{
  "name": "Bytebot Verify Recover and Report",
  "type": "task",
  "commands": [
    "echo 'üîç Checking for ops controller files (depth ‚â§ 3)...'",
    "docker exec bytebot-desktop timeout 10 find /bytebot -maxdepth 3 -type f -iname '*ops*' 2>/dev/null | grep -v 'node_modules' | grep -v '.cache' | grep -v 'dist' || echo '‚ö†Ô∏è  No matching files or search timed out.'",
    "echo '‚úÖ File scan done. Now testing the ops controller endpoint...'",
    "status=$(curl -s -o /dev/null -w '%{http_code}' http://localhost:9991/api/ops/health)",
    "if [ \"$status\" -eq 200 ]; then",
    "  echo '‚úÖ Ops endpoint responding on port 9991 (HTTP 200)'",
    "  port=9991",
    "else",
    "  status2=$(curl -s -o /dev/null -w '%{http_code}' http://localhost:9990/api/ops/health)",
    "  if [ \"$status2\" -eq 200 ]; then",
    "    echo '‚úÖ Ops endpoint responding on port 9990 (HTTP 200)'",
    "    port=9990",
    "  else",
    "    echo '‚ùå Could not reach Bytebot Agent on ports 9991 or 9990.'",
    "    echo 'ü©∫ Attempting automated recovery...'",
    "    bash Code-Buddy/bytebotd/ops/recover_bytebot.sh",
    "    echo '‚è≥ Rechecking after recovery...'",
    "    sleep 5",
    "    retry=$(curl -s -o /dev/null -w '%{http_code}' http://localhost:9991/api/ops/health)",
    "    if [ \"$retry\" -eq 200 ]; then echo '‚úÖ Bytebot Agent recovered on port 9991.'; port=9991; fi",
    "    retry2=$(curl -s -o /dev/null -w '%{http_code}' http://localhost:9990/api/ops/health)",
    "    if [ \"$retry2\" -eq 200 ]; then echo '‚úÖ Bytebot Agent recovered on port 9990.'; port=9990; fi",
    "    if [ -z \"$port\" ]; then echo 'üö® Recovery attempt failed. Manual intervention required.'; exit 1; fi",
    "  fi",
    "fi",
    "echo 'üì° Bytebot Agent verified operational on port '$port'. Mission Control standing by.'",
    "",
    "# üß† Run health check and capture output",
    "health_output=$(python3 Code-Buddy/bytebotd/ops/bytebot_health.py)",
    "",
    "# üß© Determine alert color based on content",
    "if echo \"$health_output\" | grep -q '‚ùå'; then",
    "  if echo \"$health_output\" | grep -q 'FAIL'; then",
    "    color=16711680",
    "    status_emoji='üî¥ Critical'",
    "  else",
    "    color=16744192",
    "    status_emoji='üü° Partial'",
    "  fi",
    "else",
    "  color=65280",
    "  status_emoji='üü¢ Healthy'",
    "fi",
    "",
    "# üì° Send structured embed to Discord",
    "if [ -n \"$BYTEBOT_DISCORD_WEBHOOK\" ]; then",
    "  echo 'üì£ Sending health summary to Discord webhook...'",
    "  curl -H 'Content-Type: application/json' -X POST \"$BYTEBOT_DISCORD_WEBHOOK\" -d \"{",
    "    \\\"embeds\\\": [{",
    "      \\\"title\\\": \\\"Bytebot Health Summary\\\",",
    "      \\\"description\\\": \\\"$status_emoji | Automated status report from Kilo\\\",",
    "      \\\"color\\\": $color,",
    "      \\\"fields\\\": [",
    "        {\\\"name\\\": \\\"Host\\\", \\\"value\\\": \\\"$(hostname)\\\", \\\"inline\\\": true},",
    "        {\\\"name\\\": \\\"Timestamp\\\", \\\"value\\\": \\\"$(date '+%Y-%m-%d %H:%M:%S')\\\", \\\"inline\\\": true},",
    "        {\\\"name\\\": \\\"Health Output\\\", \\\"value\\\": \\\"\\`\\`\\`$health_output\\`\\`\\`\\\"}",
    "      ]",
    "    }]",
    "  }\"",
    "else",
    "  echo '‚ö†Ô∏è  BYTEBOT_DISCORD_WEBHOOK not set. Skipping webhook notification.'",
    "fi",
    "",
    "echo '‚úÖ Full verification, recovery, and reporting sequence complete.'"
  ]
}