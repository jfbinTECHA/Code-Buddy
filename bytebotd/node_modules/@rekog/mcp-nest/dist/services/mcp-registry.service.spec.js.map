{"version":3,"file":"mcp-registry.service.spec.js","sourceRoot":"","sources":["../../src/services/mcp-registry.service.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  DynamicModule,\n  Injectable,\n  Module,\n  ValueProvider,\n} from '@nestjs/common';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { McpRegistryService } from './mcp-registry.service';\nimport { DiscoveryService, MetadataScanner } from '@nestjs/core';\nimport { Tool } from '../decorators/tool.decorator';\nimport { McpModule } from '../mcp.module';\n\ndescribe('McpRegistryService', () => {\n  let service: McpRegistryService;\n  const mockMcpModuleId = 'test-mcp-module-id';\n\n  const mockResource = (name: string, uri: string) => ({\n    type: 'resource',\n    metadata: { name, uri },\n    providerClass: Symbol(name),\n    methodName: 'someMethod',\n  });\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        McpRegistryService,\n        {\n          provide: DiscoveryService,\n          useValue: {\n            getProviders: jest.fn(() => []),\n            getControllers: jest.fn(() => []),\n          },\n        },\n        MetadataScanner,\n      ],\n    }).compile();\n\n    service = module.get<McpRegistryService>(McpRegistryService);\n\n    const mockResources = [\n      mockResource('res0', '/posts/comments'),\n      mockResource('res1', '/users/{id}'),\n      mockResource('res2', '/posts/:postId/comments'),\n      mockResource('res3', 'mcp://hello-world'),\n    ];\n\n    (service as any).discoveredToolsByMcpModuleId = new Map([\n      [mockMcpModuleId, mockResources],\n    ]);\n  });\n\n  it('should return the correct resource by URI', () => {\n    const result = service.findResourceByUri(mockMcpModuleId, '/users/123');\n    expect(result?.resource.metadata.name).toBe('res1');\n    expect(result?.params).toEqual({ id: '123' });\n  });\n\n  it('should return the correct resource by URI', () => {\n    const result = service.findResourceByUri(mockMcpModuleId, '/users/123');\n    expect(result?.resource.metadata.name).toBe('res1');\n    expect(result?.params).toEqual({ id: '123' });\n  });\n\n  it('should return undefined for unknown URI', () => {\n    const result = service.findResourceByUri(mockMcpModuleId, '/unknown/path');\n    expect(result).toBeUndefined();\n  });\n\n  it('should match complex URI template', () => {\n    const result = service.findResourceByUri(\n      mockMcpModuleId,\n      '/posts/456/comments',\n    );\n    expect(result?.resource.metadata.name).toBe('res2');\n    expect(result?.params).toEqual({ postId: '456' });\n  });\n\n  it('should match simple URI template', () => {\n    const result = service.findResourceByUri(\n      mockMcpModuleId,\n      '/posts/comments',\n    );\n    expect(result?.resource.metadata.name).toBe('res0');\n    expect(result?.params).toEqual({});\n  });\n\n  it('should match mcp URI', () => {\n    const result = service.findResourceByUri(\n      mockMcpModuleId,\n      'mcp://hello-world',\n    );\n    expect(result?.resource.metadata.name).toBe('res3');\n    expect(result?.params).toEqual({});\n  });\n});\n\n/**\n * In the case of multiple MCP servers in different modules, the discovery should be scoped to each MCP root.\n * The structure of test modules is the following:\n *\n *                        TestModule\n *                     /              \\\n *                   /                 \\\n *                 /                    \\\n *         ModuleA (server-a)     ModuleB (server-b)\n *               |                      |\n *               |                      |\n *             ToolsA                 ToolsB\n */\ndescribe('McpRegistryService - Multiple discovery roots', () => {\n  const mcpModuleA = McpModule.forRoot({ name: 'server-a', version: '0.0.1' });\n  const mcpModuleB = McpModule.forRoot({ name: 'server-b', version: '0.0.1' });\n\n  @Injectable()\n  class ToolsA {\n    @Tool({\n      name: 'toolA',\n      description: 'Tool A from ModuleA',\n    })\n    toolA() {\n      return 'Tool A result';\n    }\n  }\n\n  @Injectable()\n  class ToolsB {\n    @Tool({\n      name: 'toolB',\n      description: 'Tool B from ModuleB',\n    })\n    toolB() {\n      return 'Tool B result';\n    }\n  }\n\n  @Module({\n    imports: [mcpModuleA],\n    providers: [ToolsA],\n    exports: [ToolsA],\n  })\n  class ModuleA {}\n\n  @Module({\n    imports: [mcpModuleB],\n    providers: [ToolsB],\n    exports: [ToolsB],\n  })\n  class ModuleB {}\n\n  let service: McpRegistryService;\n  const idModuleA = getMcpModuleId(mcpModuleA);\n  const idModuleB = getMcpModuleId(mcpModuleB);\n\n  beforeAll(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [ModuleA, ModuleB],\n    }).compile();\n\n    service = module.get<McpRegistryService>(McpRegistryService);\n    service.onApplicationBootstrap();\n  });\n\n  it('server-a discovered toolA only', () => {\n    const tools = service.getTools(idModuleA);\n\n    expect(tools.length).toBe(1);\n\n    const tool = tools.find((tool) => tool.metadata.name === 'toolA');\n    expect(tool).toBeDefined();\n  });\n\n  it('server-b discovered toolB only', () => {\n    const tools = service.getTools(idModuleB);\n\n    expect(tools.length).toBe(1);\n\n    const tool = tools.find((tool) => tool.metadata.name === 'toolB');\n    expect(tool).toBeDefined();\n  });\n});\n\n/**\n * In the case of multiple MCP servers in a single module, the discovery should discover the same tools for all MCP servers.\n * The structure of test modules is the following:\n *\n *      TestModule\n *          |\n *          |\n *       AppModule (server-a, server-b)\n *          |\n *          |\n *        Tools\n */\ndescribe('McpRegistryService - Single discovery root with multiple MCP servers', () => {\n  const mcpModuleA = McpModule.forRoot({ name: 'server-a', version: '0.0.1' });\n  const mcpModuleB = McpModule.forRoot({ name: 'server-b', version: '0.0.1' });\n\n  const idModuleA = getMcpModuleId(mcpModuleA);\n  const idModuleB = getMcpModuleId(mcpModuleB);\n\n  @Injectable()\n  class Tools {\n    @Tool({\n      name: 'tool',\n      description: 'Tool from AppModule',\n    })\n    tool() {\n      return 'Tool result';\n    }\n  }\n\n  @Module({\n    imports: [mcpModuleA, mcpModuleB],\n    providers: [Tools],\n  })\n  class AppModule {}\n\n  let service: McpRegistryService;\n\n  beforeAll(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      imports: [AppModule],\n    }).compile();\n\n    service = module.get<McpRegistryService>(McpRegistryService);\n    service.onApplicationBootstrap();\n  });\n\n  it('server-a discovered the tool', () => {\n    const tools = service.getTools(idModuleA);\n\n    expect(tools.length).toBe(1);\n\n    const tool = tools.find((tool) => tool.metadata.name === 'tool');\n    expect(tool).toBeDefined();\n  });\n\n  it('server-b discovered the tool', () => {\n    const tools = service.getTools(idModuleB);\n\n    expect(tools.length).toBe(1);\n\n    const tool = tools.find((tool) => tool.metadata.name === 'tool');\n    expect(tool).toBeDefined();\n  });\n});\n\n/**\n * Helper function to get the MCP module ID from a DynamicModule.\n * Pulling the IDs from the compiled TestingModule doesn't work as expected.\n * It returns the same ID for both modules, which is the ID of the module registered last.\n */\nfunction getMcpModuleId(module: DynamicModule): string {\n  const valueProvider = module?.providers?.find(\n    (provider) =>\n      typeof provider === 'object' &&\n      (provider as ValueProvider).provide === 'MCP_MODULE_ID',\n  ) as ValueProvider<string> | undefined;\n\n  if (!valueProvider) {\n    throw new Error(\n      'MCP_MODULE_ID provider not found in module. This should not happen.',\n    );\n  }\n\n  return valueProvider.useValue;\n}\n"]}