{"version":3,"file":"mcp-registry.service.js","sourceRoot":"","sources":["../../src/services/mcp-registry.service.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Injectable,\n  InjectionToken,\n  Logger,\n  OnApplicationBootstrap,\n} from '@nestjs/common';\nimport {\n  DiscoveryService,\n  MetadataScanner,\n  ModulesContainer,\n} from '@nestjs/core';\nimport {\n  MCP_PROMPT_METADATA_KEY,\n  MCP_RESOURCE_METADATA_KEY,\n  MCP_TOOL_METADATA_KEY,\n  ToolMetadata,\n} from '../decorators';\nimport { ResourceMetadata } from '../decorators/resource.decorator';\nimport { match } from 'path-to-regexp';\nimport { PromptMetadata } from '../decorators/prompt.decorator';\nimport { Module } from '@nestjs/core/injector/module';\n\n/**\n * Interface representing a discovered tool\n */\nexport type DiscoveredTool<T extends object> = {\n  type: 'tool' | 'resource' | 'prompt';\n  metadata: T;\n  providerClass: InjectionToken;\n  methodName: string;\n};\n\n/**\n * Singleton service that discovers and registers tools during application bootstrap\n */\n@Injectable()\nexport class McpRegistryService implements OnApplicationBootstrap {\n  private readonly logger = new Logger(McpRegistryService.name);\n  private discoveredToolsByMcpModuleId: Map<string, DiscoveredTool<any>[]> =\n    new Map();\n\n  constructor(\n    private readonly discovery: DiscoveryService,\n    private readonly metadataScanner: MetadataScanner,\n    private readonly modulesContainer: ModulesContainer,\n  ) {}\n\n  onApplicationBootstrap() {\n    this.discoverTools();\n  }\n\n  /**\n   * Finds all modules that import the McpModule and then scans the providers and controllers in their subtrees\n   */\n  private discoverTools() {\n    const getImportedMcpModules = (module: Module) =>\n      Array.from(module.imports).filter(\n        (m) => (m.instance as any).__isMcpModule,\n      );\n\n    const pairs = Array.from(this.modulesContainer.values())\n      .map((module): [Module, Module[]] => [\n        module,\n        getImportedMcpModules(module),\n      ])\n      .filter(([, importedMcpModules]) => importedMcpModules.length > 0);\n\n    for (const [rootModule, mcpModules] of pairs) {\n      this.logger.debug(\n        `Discovering tools, resources, and prompts for module: ${rootModule.name}`,\n      );\n\n      const subtreeModules = this.collectSubtreeModules(rootModule);\n\n      for (const mcpModule of mcpModules) {\n        const mcpModuleId =\n          mcpModule.getProviderByKey<string>('MCP_MODULE_ID')?.instance;\n        this.discoverToolsForModuleSubtree(mcpModuleId, subtreeModules);\n      }\n    }\n  }\n\n  private collectSubtreeModules(root: Module): Module[] {\n    const subtreeModules: Module[] = [];\n    const collect = (module: Module) => {\n      subtreeModules.push(module);\n      module.imports.forEach((importedModule) => {\n        if (!subtreeModules.includes(importedModule)) {\n          collect(importedModule);\n        }\n      });\n    };\n    collect(root);\n    return subtreeModules;\n  }\n\n  /**\n   * Scans all providers and controllers for @Tool decorators\n   */\n  private discoverToolsForModuleSubtree(\n    mcpModuleId: string,\n    modules: Module[],\n  ) {\n    const providers = this.discovery.getProviders(undefined, modules);\n    const controllers = this.discovery.getControllers(undefined, modules);\n    const allInstances = [...providers, ...controllers]\n      .filter(\n        (wrapper) =>\n          wrapper.instance &&\n          typeof wrapper.instance === 'object' &&\n          wrapper.instance !== null,\n      )\n      .map((wrapper) => ({\n        instance: wrapper.instance as object,\n        token: wrapper.token,\n      }));\n\n    const discovered: {\n      tools: string[];\n      resources: string[];\n      prompts: string[];\n    } = { tools: [], resources: [], prompts: [] };\n\n    allInstances.forEach(({ instance, token }) => {\n      this.metadataScanner.getAllMethodNames(instance).forEach((methodName) => {\n        const methodRef = instance[methodName] as object;\n        const methodMetaKeys = Reflect.getOwnMetadataKeys(methodRef);\n\n        if (methodMetaKeys.includes(MCP_TOOL_METADATA_KEY)) {\n          this.addDiscoveryTool(mcpModuleId, methodRef, token, methodName);\n          discovered.tools.push(`${token.toString()}.${methodName}`);\n        }\n\n        if (methodMetaKeys.includes(MCP_RESOURCE_METADATA_KEY)) {\n          this.addDiscoveryResource(mcpModuleId, methodRef, token, methodName);\n          discovered.resources.push(`${token.toString()}.${methodName}`);\n        }\n\n        if (methodMetaKeys.includes(MCP_PROMPT_METADATA_KEY)) {\n          this.addDiscoveryPrompt(mcpModuleId, methodRef, token, methodName);\n          discovered.prompts.push(`${token.toString()}.${methodName}`);\n        }\n      });\n    });\n\n    this.logger.debug(\n      `Discovered tools: ${discovered.tools.length ? discovered.tools.join(', ') : 'none'}`,\n    );\n    this.logger.debug(\n      `Discovered resources: ${discovered.resources.length ? discovered.resources.join(', ') : 'none'}`,\n    );\n    this.logger.debug(\n      `Discovered prompts: ${discovered.prompts.length ? discovered.prompts.join(', ') : 'none'}`,\n    );\n  }\n\n  /**\n   * Adds a discovered tool to the registry\n   */\n  private addDiscovery<T>(\n    type: 'tool' | 'resource' | 'prompt',\n    metadataKey: string,\n    mcpModuleId: string,\n    methodRef: object,\n    token: InjectionToken,\n    methodName: string,\n  ) {\n    const metadata: T = Reflect.getMetadata(metadataKey, methodRef);\n\n    if (!metadata['name']) {\n      metadata['name'] = methodName;\n    }\n\n    if (!this.discoveredToolsByMcpModuleId.has(mcpModuleId)) {\n      this.discoveredToolsByMcpModuleId.set(mcpModuleId, []);\n    }\n\n    this.discoveredToolsByMcpModuleId.get(mcpModuleId)?.push({\n      type,\n      metadata,\n      providerClass: token,\n      methodName,\n    });\n  }\n\n  private addDiscoveryPrompt(\n    mcpModuleId: string,\n    methodRef: object,\n    token: InjectionToken,\n    methodName: string,\n  ) {\n    this.addDiscovery<PromptMetadata>(\n      'prompt',\n      MCP_PROMPT_METADATA_KEY,\n      mcpModuleId,\n      methodRef,\n      token,\n      methodName,\n    );\n  }\n\n  private addDiscoveryTool(\n    mcpModuleId: string,\n    methodRef: object,\n    token: InjectionToken,\n    methodName: string,\n  ) {\n    this.addDiscovery<ToolMetadata>(\n      'tool',\n      MCP_TOOL_METADATA_KEY,\n      mcpModuleId,\n      methodRef,\n      token,\n      methodName,\n    );\n  }\n\n  private addDiscoveryResource(\n    mcpModuleId: string,\n    methodRef: object,\n    token: InjectionToken,\n    methodName: string,\n  ) {\n    this.addDiscovery<ResourceMetadata>(\n      'resource',\n      MCP_RESOURCE_METADATA_KEY,\n      mcpModuleId,\n      methodRef,\n      token,\n      methodName,\n    );\n  }\n\n  /**\n   * Get all discovered tools\n   */\n  getTools(mcpModuleId: string): DiscoveredTool<ToolMetadata>[] {\n    return (\n      this.discoveredToolsByMcpModuleId\n        .get(mcpModuleId)\n        ?.filter((tool) => tool.type === 'tool') ?? []\n    );\n  }\n\n  /**\n   * Find a tool by name\n   */\n  findTool(\n    mcpModuleId: string,\n    name: string,\n  ): DiscoveredTool<ToolMetadata> | undefined {\n    return this.getTools(mcpModuleId).find(\n      (tool) => tool.metadata.name === name,\n    );\n  }\n\n  /**\n   * Get all discovered resources\n   */\n  getResources(mcpModuleId: string): DiscoveredTool<ResourceMetadata>[] {\n    return (\n      this.discoveredToolsByMcpModuleId\n        .get(mcpModuleId)\n        ?.filter((tool) => tool.type === 'resource') ?? []\n    );\n  }\n\n  /**\n   * Find a resource by name\n   */\n  findResource(\n    mcpModuleId: string,\n    name: string,\n  ): DiscoveredTool<ResourceMetadata> | undefined {\n    return this.getResources(mcpModuleId).find(\n      (tool) => tool.metadata.name === name,\n    );\n  }\n\n  /**\n   * Get all discovered prompts\n   */\n  getPrompts(mcpModuleId: string): DiscoveredTool<PromptMetadata>[] {\n    return (\n      this.discoveredToolsByMcpModuleId\n        .get(mcpModuleId)\n        ?.filter((tool) => tool.type === 'prompt') ?? []\n    );\n  }\n\n  /**\n   * Find a prompt by name\n   */\n  findPrompt(\n    mcpModuleId: string,\n    name: string,\n  ): DiscoveredTool<PromptMetadata> | undefined {\n    return this.getPrompts(mcpModuleId).find(\n      (tool) => tool.metadata.name === name,\n    );\n  }\n\n  private convertTemplate(template: string): string {\n    return template?.replace(/{(\\w+)}/g, ':$1');\n  }\n\n  private convertUri(uri: string): string {\n    if (uri.includes('://')) {\n      return uri.split('://')[1];\n    }\n\n    return uri;\n  }\n\n  /**\n   * Find a resource by uri\n   * @returns An object containing the found resource and extracted parameters, or undefined if no resource is found\n   */\n  findResourceByUri(\n    mcpModuleId: string,\n    uri: string,\n  ):\n    | {\n        resource: DiscoveredTool<ResourceMetadata>;\n        params: Record<string, string>;\n      }\n    | undefined {\n    const resources = this.getResources(mcpModuleId).map((tool) => ({\n      name: tool.metadata.name,\n      uri: tool.metadata.uri,\n    }));\n\n    const strippedInputUri = this.convertUri(uri);\n\n    for (const t of resources) {\n      if (!t.uri) continue;\n\n      const rawTemplate = t.uri;\n      const templatePath = this.convertTemplate(this.convertUri(rawTemplate));\n      const matcher = match(templatePath, { decode: decodeURIComponent });\n      const result = matcher(strippedInputUri);\n\n      if (result) {\n        const foundResource = this.findResource(mcpModuleId, t.name);\n        if (!foundResource) continue;\n\n        return {\n          resource: foundResource,\n          params: result.params as Record<string, string>,\n        };\n      }\n    }\n\n    return undefined;\n  }\n}\n"]}