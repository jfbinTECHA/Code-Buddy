{"version":3,"file":"sse-ping.service.js","sourceRoot":"","sources":["../../src/services/sse-ping.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,2CAKwB;AASjB,IAAM,cAAc,sBAApB,MAAM,cAAc;IAczB;QAbQ,iBAAY,GAA0B,IAAI,CAAC;QAClC,WAAM,GAAG,IAAI,eAAM,CAAC,gBAAc,CAAC,IAAI,CAAC,CAAC;QACzC,sBAAiB,GAAG,IAAI,GAAG,EAMzC,CAAC;QAGI,mBAAc,GAAG,KAAK,CAAC;IAEhB,CAAC;IAEhB,YAAY;QACV,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,+BAA+B,CAAC,CAAC;IACnD,CAAC;IAED,eAAe;QACb,IAAI,CAAC,gBAAgB,EAAE,CAAC;QACxB,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,0BAA0B,CAAC,CAAC;IAC9C,CAAC;IAKD,SAAS,CAAC,OAA2D;QACnE,IAAI,OAAO,CAAC,cAAc,KAAK,SAAS,EAAE,CAAC;YACzC,IAAI,CAAC,cAAc,GAAG,OAAO,CAAC,cAAc,CAAC;QAC/C,CAAC;QAED,IAAI,OAAO,CAAC,WAAW,KAAK,KAAK,EAAE,CAAC;YAClC,IAAI,CAAC,iBAAiB,EAAE,CAAC;QAC3B,CAAC;aAAM,CAAC;YACN,IAAI,CAAC,gBAAgB,EAAE,CAAC;QAC1B,CAAC;IACH,CAAC;IAKD,kBAAkB,CAChB,SAAiB,EACjB,SAA6B,EAC7B,GAAa;QAEb,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,SAAS,EAAE,EAAE,SAAS,EAAE,GAAG,EAAE,CAAC,CAAC;QAC1D,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,8BAA8B,SAAS,EAAE,CAAC,CAAC;IAC/D,CAAC;IAKD,gBAAgB,CAAC,SAAiB;QAChC,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;QACzC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,2BAA2B,SAAS,EAAE,CAAC,CAAC;IAC5D,CAAC;IAKO,iBAAiB;QACvB,IAAI,IAAI,CAAC,YAAY,EAAE,CAAC;YACtB,IAAI,CAAC,gBAAgB,EAAE,CAAC;QAC1B,CAAC;QAED,IAAI,CAAC,MAAM,CAAC,GAAG,CACb,wCAAwC,IAAI,CAAC,cAAc,KAAK,CACjE,CAAC;QACF,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC,GAAG,EAAE;YACnC,IAAI,CAAC,wBAAwB,EAAE,CAAC;QAClC,CAAC,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;IAC1B,CAAC;IAKO,gBAAgB;QACtB,IAAI,IAAI,CAAC,YAAY,EAAE,CAAC;YACtB,aAAa,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;YACjC,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;YACzB,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,2BAA2B,CAAC,CAAC;QAC/C,CAAC;IACH,CAAC;IAKO,wBAAwB;QAC9B,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QAC7B,MAAM,eAAe,GAAG,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC;QAEpD,IAAI,eAAe,KAAK,CAAC,EAAE,CAAC;YAC1B,OAAO;QACT,CAAC;QAED,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,uBAAuB,eAAe,cAAc,CAAC,CAAC;QAExE,KAAK,MAAM,CAAC,SAAS,EAAE,EAAE,GAAG,EAAE,CAAC,IAAI,IAAI,CAAC,iBAAiB,CAAC,OAAO,EAAE,EAAE,CAAC;YACpE,IAAI,CAAC;gBAGH,IAAI,CAAC,GAAG,CAAC,MAAM,IAAI,GAAG,CAAC,QAAQ,EAAE,CAAC;oBAChC,GAAG,CAAC,KAAK,CAAC,YAAY,IAAI,IAAI,CAAC,SAAS,CAAC,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;gBACjE,CAAC;qBAAM,CAAC;oBACN,IAAI,CAAC,MAAM,CAAC,KAAK,CACf,cAAc,SAAS,kCAAkC,CAC1D,CAAC;oBAGF,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC;gBACnC,CAAC;YACH,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,IAAI,CAAC,MAAM,CAAC,KAAK,CACf,oCAAoC,SAAS,EAAE,EAC/C,KAAK,CACN,CAAC;gBACF,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC;YACnC,CAAC;QACH,CAAC;IACH,CAAC;CACF,CAAA;AA3HY,wCAAc;yBAAd,cAAc;IAD1B,IAAA,mBAAU,GAAE;;GACA,cAAc,CA2H1B","sourcesContent":["import {\n  Injectable,\n  OnModuleInit,\n  OnModuleDestroy,\n  Logger,\n} from '@nestjs/common';\nimport { SSEServerTransport } from '@modelcontextprotocol/sdk/server/sse.js';\nimport type { Response } from 'express';\n\n/**\n * Service that implements automatic ping for SSE connections\n * This prevents browser/client timeouts for long-lived connections\n */\n@Injectable()\nexport class SsePingService implements OnModuleInit, OnModuleDestroy {\n  private pingInterval: NodeJS.Timeout | null = null;\n  private readonly logger = new Logger(SsePingService.name);\n  private readonly activeConnections = new Map<\n    string,\n    {\n      transport: SSEServerTransport;\n      res: Response;\n    }\n  >();\n\n  // Default to 30 seconds - this is a reasonable interval for most clients\n  private pingIntervalMs = 30000;\n\n  constructor() {}\n\n  onModuleInit() {\n    this.logger.log('Initializing SSE ping service');\n  }\n\n  onModuleDestroy() {\n    this.stopPingInterval();\n    this.logger.log('SSE ping service stopped');\n  }\n\n  /**\n   * Configure the ping service\n   */\n  configure(options: { pingEnabled?: boolean; pingIntervalMs?: number }) {\n    if (options.pingIntervalMs !== undefined) {\n      this.pingIntervalMs = options.pingIntervalMs;\n    }\n\n    if (options.pingEnabled !== false) {\n      this.startPingInterval();\n    } else {\n      this.stopPingInterval();\n    }\n  }\n\n  /**\n   * Register a new SSE connection to receive pings\n   */\n  registerConnection(\n    sessionId: string,\n    transport: SSEServerTransport,\n    res: Response,\n  ) {\n    this.activeConnections.set(sessionId, { transport, res });\n    this.logger.debug(`SSE connection registered: ${sessionId}`);\n  }\n\n  /**\n   * Remove an SSE connection\n   */\n  removeConnection(sessionId: string) {\n    this.activeConnections.delete(sessionId);\n    this.logger.debug(`SSE connection removed: ${sessionId}`);\n  }\n\n  /**\n   * Start the ping interval timer\n   */\n  private startPingInterval() {\n    if (this.pingInterval) {\n      this.stopPingInterval();\n    }\n\n    this.logger.log(\n      `Starting SSE ping service (interval: ${this.pingIntervalMs}ms)`,\n    );\n    this.pingInterval = setInterval(() => {\n      this.sendPingToAllConnections();\n    }, this.pingIntervalMs);\n  }\n\n  /**\n   * Stop the ping interval timer\n   */\n  private stopPingInterval() {\n    if (this.pingInterval) {\n      clearInterval(this.pingInterval);\n      this.pingInterval = null;\n      this.logger.log('SSE ping interval stopped');\n    }\n  }\n\n  /**\n   * Send a ping to all active connections\n   */\n  private sendPingToAllConnections() {\n    const timestamp = Date.now();\n    const connectionCount = this.activeConnections.size;\n\n    if (connectionCount === 0) {\n      return;\n    }\n\n    this.logger.debug(`Sending SSE ping to ${connectionCount} connections`);\n\n    for (const [sessionId, { res }] of this.activeConnections.entries()) {\n      try {\n        // Send a comment-type SSE message (line starting with ':')\n        // This keeps the connection alive without triggering an event in the client\n        if (!res.closed && res.writable) {\n          res.write(`: ping - ${new Date(timestamp).toISOString()}\\n\\n`);\n        } else {\n          this.logger.debug(\n            `Connection ${sessionId} is no longer writable, removing`,\n          );\n          // TODO: After non writable connections are discovered it'd be useful to cleanup transports/mcp servers\n          // for that connection in  sse.controller.factory.ts\n          this.removeConnection(sessionId);\n        }\n      } catch (error) {\n        this.logger.error(\n          `Error sending ping to connection ${sessionId}`,\n          error,\n        );\n        this.removeConnection(sessionId);\n      }\n    }\n  }\n}\n"]}