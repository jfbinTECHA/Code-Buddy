{"version":3,"file":"mcp-handler.base.js","sourceRoot":"","sources":["../../../src/services/handlers/mcp-handler.base.ts"],"names":[],"mappings":"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","sourcesContent":["import { Logger } from '@nestjs/common';\nimport { ModuleRef } from '@nestjs/core';\nimport { McpServer } from '@modelcontextprotocol/sdk/server/mcp.js';\nimport { Progress } from '@modelcontextprotocol/sdk/types.js';\nimport { Context, McpRequest, SerializableValue } from '../../interfaces';\nimport { McpRegistryService } from '../mcp-registry.service';\n\nexport abstract class McpHandlerBase {\n  protected logger: Logger;\n\n  constructor(\n    protected readonly moduleRef: ModuleRef,\n    protected readonly registry: McpRegistryService,\n    loggerContext: string,\n  ) {\n    this.logger = new Logger(loggerContext);\n  }\n\n  protected createContext(\n    mcpServer: McpServer,\n    mcpRequest: McpRequest,\n  ): Context {\n    // handless stateless traffic where notifications and progress are not supported\n    if ((mcpServer.server.transport as any).sessionId === undefined) {\n      return this.createStatelessContext(mcpServer, mcpRequest);\n    }\n\n    const progressToken = mcpRequest.params?._meta?.progressToken;\n    return {\n      reportProgress: async (progress: Progress) => {\n        if (progressToken) {\n          await mcpServer.server.notification({\n            method: 'notifications/progress',\n            params: {\n              ...progress,\n              progressToken,\n            } as Progress,\n          });\n        }\n      },\n      log: {\n        debug: (message: string, context?: SerializableValue) => {\n          void mcpServer.server.sendLoggingMessage({\n            level: 'debug',\n            data: { message, context },\n          });\n        },\n        error: (message: string, context?: SerializableValue) => {\n          void mcpServer.server.sendLoggingMessage({\n            level: 'error',\n            data: { message, context },\n          });\n        },\n        info: (message: string, context?: SerializableValue) => {\n          void mcpServer.server.sendLoggingMessage({\n            level: 'info',\n            data: { message, context },\n          });\n        },\n        warn: (message: string, context?: SerializableValue) => {\n          void mcpServer.server.sendLoggingMessage({\n            level: 'warning',\n            data: { message, context },\n          });\n        },\n      },\n      mcpServer,\n      mcpRequest,\n    };\n  }\n\n  protected createStatelessContext(\n    mcpServer: McpServer,\n    mcpRequest: McpRequest,\n  ): Context {\n    const warn = (fn: string) => {\n      this.logger.warn(`Stateless context: '${fn}' is not supported.`);\n    };\n    return {\n      // eslint-disable-next-line @typescript-eslint/require-await,@typescript-eslint/no-unused-vars\n      reportProgress: async (_progress: Progress) => {\n        warn('reportProgress not supported in stateless');\n      },\n      log: {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        debug: (_message: string, _data?: SerializableValue) => {\n          warn('server report logging not supported in stateless');\n        },\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        error: (_message: string, _data?: SerializableValue) => {\n          warn('server report logging not supported in stateless');\n        },\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        info: (_message: string, _data?: SerializableValue) => {\n          warn('server report logging not supported in stateless');\n        },\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        warn: (_message: string, _data?: SerializableValue) => {\n          warn('server report logging not supported in stateless');\n        },\n      },\n      mcpServer,\n      mcpRequest,\n    };\n  }\n}\n"]}