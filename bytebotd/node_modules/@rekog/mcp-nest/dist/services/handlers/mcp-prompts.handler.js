"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var McpPromptsHandler_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.McpPromptsHandler = void 0;
const common_1 = require("@nestjs/common");
const core_1 = require("@nestjs/core");
const types_js_1 = require("@modelcontextprotocol/sdk/types.js");
const mcp_registry_service_1 = require("../mcp-registry.service");
const mcp_handler_base_1 = require("./mcp-handler.base");
let McpPromptsHandler = McpPromptsHandler_1 = class McpPromptsHandler extends mcp_handler_base_1.McpHandlerBase {
    constructor(moduleRef, registry, mcpModuleId) {
        super(moduleRef, registry, McpPromptsHandler_1.name);
        this.mcpModuleId = mcpModuleId;
    }
    registerHandlers(mcpServer, httpRequest) {
        if (this.registry.getPrompts(this.mcpModuleId).length === 0) {
            this.logger.debug('No prompts registered, skipping prompt handlers');
            return;
        }
        mcpServer.server.setRequestHandler(types_js_1.ListPromptsRequestSchema, () => {
            this.logger.debug('ListPromptsRequestSchema is being called');
            const prompts = this.registry
                .getPrompts(this.mcpModuleId)
                .map((prompt) => ({
                name: prompt.metadata.name,
                description: prompt.metadata.description,
                arguments: prompt.metadata.parameters
                    ? Object.entries(prompt.metadata.parameters.shape).map(([name, field]) => ({
                        name,
                        description: field.description,
                        required: !field.isOptional(),
                    }))
                    : [],
            }));
            return {
                prompts,
            };
        });
        mcpServer.server.setRequestHandler(types_js_1.GetPromptRequestSchema, async (request) => {
            this.logger.debug('GetPromptRequestSchema is being called');
            try {
                const name = request.params.name;
                const promptInfo = this.registry.findPrompt(this.mcpModuleId, name);
                if (!promptInfo) {
                    throw new types_js_1.McpError(types_js_1.ErrorCode.MethodNotFound, `Unknown prompt: ${name}`);
                }
                const contextId = core_1.ContextIdFactory.getByRequest(httpRequest);
                this.moduleRef.registerRequestByContextId(httpRequest, contextId);
                const promptInstance = await this.moduleRef.resolve(promptInfo.providerClass, contextId, { strict: false });
                if (!promptInstance) {
                    throw new types_js_1.McpError(types_js_1.ErrorCode.MethodNotFound, `Unknown prompt: ${name}`);
                }
                const context = this.createContext(mcpServer, request);
                const methodName = promptInfo.methodName;
                const result = await promptInstance[methodName].call(promptInstance, request.params.arguments, context, httpRequest);
                this.logger.debug(result, 'GetPromptRequestSchema result');
                return result;
            }
            catch (error) {
                this.logger.error(error);
                return {
                    contents: [{ mimeType: 'text/plain', text: error.message }],
                    isError: true,
                };
            }
        });
    }
};
exports.McpPromptsHandler = McpPromptsHandler;
exports.McpPromptsHandler = McpPromptsHandler = McpPromptsHandler_1 = __decorate([
    (0, common_1.Injectable)({ scope: common_1.Scope.REQUEST }),
    __param(2, (0, common_1.Inject)('MCP_MODULE_ID')),
    __metadata("design:paramtypes", [core_1.ModuleRef,
        mcp_registry_service_1.McpRegistryService, String])
], McpPromptsHandler);
//# sourceMappingURL=mcp-prompts.handler.js.map