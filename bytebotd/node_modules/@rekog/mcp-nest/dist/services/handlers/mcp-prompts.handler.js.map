{"version":3,"file":"mcp-prompts.handler.js","sourceRoot":"","sources":["../../../src/services/handlers/mcp-prompts.handler.ts"],"names":[],"mappings":"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","sourcesContent":["import { Inject, Injectable, Scope } from '@nestjs/common';\nimport { ContextIdFactory, ModuleRef } from '@nestjs/core';\nimport { McpServer } from '@modelcontextprotocol/sdk/server/mcp.js';\nimport {\n  ErrorCode,\n  GetPromptRequestSchema,\n  ListPromptsRequestSchema,\n  McpError,\n  PromptArgument,\n} from '@modelcontextprotocol/sdk/types.js';\nimport { Request } from 'express';\nimport { McpRegistryService } from '../mcp-registry.service';\nimport { McpHandlerBase } from './mcp-handler.base';\n\n@Injectable({ scope: Scope.REQUEST })\nexport class McpPromptsHandler extends McpHandlerBase {\n  constructor(\n    moduleRef: ModuleRef,\n    registry: McpRegistryService,\n    @Inject('MCP_MODULE_ID') private readonly mcpModuleId: string,\n  ) {\n    super(moduleRef, registry, McpPromptsHandler.name);\n  }\n\n  registerHandlers(mcpServer: McpServer, httpRequest: Request) {\n    if (this.registry.getPrompts(this.mcpModuleId).length === 0) {\n      this.logger.debug('No prompts registered, skipping prompt handlers');\n      return;\n    }\n    mcpServer.server.setRequestHandler(ListPromptsRequestSchema, () => {\n      this.logger.debug('ListPromptsRequestSchema is being called');\n\n      const prompts = this.registry\n        .getPrompts(this.mcpModuleId)\n        .map((prompt) => ({\n          name: prompt.metadata.name,\n          description: prompt.metadata.description,\n          arguments: prompt.metadata.parameters\n            ? Object.entries(prompt.metadata.parameters.shape).map(\n                ([name, field]): PromptArgument => ({\n                  name,\n                  description: field.description,\n                  required: !field.isOptional(),\n                }),\n              )\n            : [],\n        }));\n\n      return {\n        prompts,\n      };\n    });\n\n    mcpServer.server.setRequestHandler(\n      GetPromptRequestSchema,\n      async (request) => {\n        this.logger.debug('GetPromptRequestSchema is being called');\n\n        try {\n          const name = request.params.name;\n          const promptInfo = this.registry.findPrompt(this.mcpModuleId, name);\n\n          if (!promptInfo) {\n            throw new McpError(\n              ErrorCode.MethodNotFound,\n              `Unknown prompt: ${name}`,\n            );\n          }\n\n          const contextId = ContextIdFactory.getByRequest(httpRequest);\n          this.moduleRef.registerRequestByContextId(httpRequest, contextId);\n\n          const promptInstance = await this.moduleRef.resolve(\n            promptInfo.providerClass,\n            contextId,\n            { strict: false },\n          );\n\n          if (!promptInstance) {\n            throw new McpError(\n              ErrorCode.MethodNotFound,\n              `Unknown prompt: ${name}`,\n            );\n          }\n\n          const context = this.createContext(mcpServer, request);\n          const methodName = promptInfo.methodName;\n\n          const result = await promptInstance[methodName].call(\n            promptInstance,\n            request.params.arguments,\n            context,\n            httpRequest,\n          );\n\n          this.logger.debug(result, 'GetPromptRequestSchema result');\n\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n          return result;\n        } catch (error) {\n          this.logger.error(error);\n          return {\n            contents: [{ mimeType: 'text/plain', text: error.message }],\n            isError: true,\n          };\n        }\n      },\n    );\n  }\n}\n"]}