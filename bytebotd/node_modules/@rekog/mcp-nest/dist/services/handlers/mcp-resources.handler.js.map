{"version":3,"file":"mcp-resources.handler.js","sourceRoot":"","sources":["../../../src/services/handlers/mcp-resources.handler.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA,2CAA2D;AAC3D,uCAA2D;AAE3D,iEAK4C;AAE5C,kEAA6D;AAC7D,yDAAoD;AAG7C,IAAM,mBAAmB,2BAAzB,MAAM,mBAAoB,SAAQ,iCAAc;IACrD,YACE,SAAoB,EACpB,QAA4B,EACc,WAAmB;QAE7D,KAAK,CAAC,SAAS,EAAE,QAAQ,EAAE,qBAAmB,CAAC,IAAI,CAAC,CAAC;QAFX,gBAAW,GAAX,WAAW,CAAQ;IAG/D,CAAC;IAED,gBAAgB,CAAC,SAAoB,EAAE,WAAoB;QACzD,IAAI,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YAC9D,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,qDAAqD,CAAC,CAAC;YACzE,OAAO;QACT,CAAC;QAED,SAAS,CAAC,MAAM,CAAC,iBAAiB,CAAC,qCAA0B,EAAE,GAAG,EAAE;YAClE,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,4CAA4C,CAAC,CAAC;YAChE,OAAO;gBACL,SAAS,EAAE,IAAI,CAAC,QAAQ;qBACrB,YAAY,CAAC,IAAI,CAAC,WAAW,CAAC;qBAC9B,GAAG,CAAC,CAAC,SAAS,EAAE,EAAE,CAAC,SAAS,CAAC,QAAQ,CAAC;aAC1C,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,SAAS,CAAC,MAAM,CAAC,iBAAiB,CAChC,oCAAyB,EACzB,KAAK,EAAE,OAAO,EAAE,EAAE;YAChB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,2CAA2C,CAAC,CAAC;YAE/D,MAAM,GAAG,GAAG,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC;YAC/B,MAAM,YAAY,GAAG,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CAClD,IAAI,CAAC,WAAW,EAChB,GAAG,CACJ,CAAC;YAEF,IAAI,CAAC,YAAY,EAAE,CAAC;gBAClB,MAAM,IAAI,mBAAQ,CAChB,oBAAS,CAAC,cAAc,EACxB,qBAAqB,GAAG,EAAE,CAC3B,CAAC;YACJ,CAAC;YAED,IAAI,CAAC;gBACH,MAAM,SAAS,GAAG,uBAAgB,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC;gBAC7D,IAAI,CAAC,SAAS,CAAC,0BAA0B,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC;gBAElE,MAAM,gBAAgB,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,OAAO,CACnD,YAAY,CAAC,QAAQ,CAAC,aAAa,EACnC,SAAS,EACT,EAAE,MAAM,EAAE,KAAK,EAAE,CAClB,CAAC;gBAEF,IAAI,CAAC,gBAAgB,EAAE,CAAC;oBACtB,MAAM,IAAI,mBAAQ,CAChB,oBAAS,CAAC,cAAc,EACxB,qBAAqB,GAAG,EAAE,CAC3B,CAAC;gBACJ,CAAC;gBAED,MAAM,OAAO,GAAG,IAAI,CAAC,aAAa,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;gBAEvD,MAAM,aAAa,GAAG;oBACpB,GAAG,YAAY,CAAC,MAAM;oBACtB,GAAG,OAAO,CAAC,MAAM;iBAClB,CAAC;gBAEF,MAAM,UAAU,GAAG,YAAY,CAAC,QAAQ,CAAC,UAAU,CAAC;gBAEpD,MAAM,MAAM,GAAG,MAAM,gBAAgB,CAAC,UAAU,CAAC,CAAC,IAAI,CACpD,gBAAgB,EAChB,aAAa,EACb,OAAO,EACP,WAAW,CACZ,CAAC;gBAEF,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE,kCAAkC,CAAC,CAAC;gBAG9D,OAAO,MAAM,CAAC;YAChB,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;gBACzB,OAAO;oBACL,QAAQ,EAAE,CAAC,EAAE,GAAG,EAAE,QAAQ,EAAE,YAAY,EAAE,IAAI,EAAE,KAAK,CAAC,OAAO,EAAE,CAAC;oBAChE,OAAO,EAAE,IAAI;iBACd,CAAC;YACJ,CAAC;QACH,CAAC,CACF,CAAC;IACJ,CAAC;CACF,CAAA;AAzFY,kDAAmB;8BAAnB,mBAAmB;IAD/B,IAAA,mBAAU,EAAC,EAAE,KAAK,EAAE,cAAK,CAAC,OAAO,EAAE,CAAC;IAKhC,WAAA,IAAA,eAAM,EAAC,eAAe,CAAC,CAAA;qCAFb,gBAAS;QACV,yCAAkB;GAHnB,mBAAmB,CAyF/B","sourcesContent":["import { Inject, Injectable, Scope } from '@nestjs/common';\nimport { ContextIdFactory, ModuleRef } from '@nestjs/core';\nimport { McpServer } from '@modelcontextprotocol/sdk/server/mcp.js';\nimport {\n  ErrorCode,\n  ListResourcesRequestSchema,\n  McpError,\n  ReadResourceRequestSchema,\n} from '@modelcontextprotocol/sdk/types.js';\nimport { Request } from 'express';\nimport { McpRegistryService } from '../mcp-registry.service';\nimport { McpHandlerBase } from './mcp-handler.base';\n\n@Injectable({ scope: Scope.REQUEST })\nexport class McpResourcesHandler extends McpHandlerBase {\n  constructor(\n    moduleRef: ModuleRef,\n    registry: McpRegistryService,\n    @Inject('MCP_MODULE_ID') private readonly mcpModuleId: string,\n  ) {\n    super(moduleRef, registry, McpResourcesHandler.name);\n  }\n\n  registerHandlers(mcpServer: McpServer, httpRequest: Request) {\n    if (this.registry.getResources(this.mcpModuleId).length === 0) {\n      this.logger.debug('No resources registered, skipping resource handlers');\n      return;\n    }\n\n    mcpServer.server.setRequestHandler(ListResourcesRequestSchema, () => {\n      this.logger.debug('ListResourcesRequestSchema is being called');\n      return {\n        resources: this.registry\n          .getResources(this.mcpModuleId)\n          .map((resources) => resources.metadata),\n      };\n    });\n\n    mcpServer.server.setRequestHandler(\n      ReadResourceRequestSchema,\n      async (request) => {\n        this.logger.debug('ReadResourceRequestSchema is being called');\n\n        const uri = request.params.uri;\n        const resourceInfo = this.registry.findResourceByUri(\n          this.mcpModuleId,\n          uri,\n        );\n\n        if (!resourceInfo) {\n          throw new McpError(\n            ErrorCode.MethodNotFound,\n            `Unknown resource: ${uri}`,\n          );\n        }\n\n        try {\n          const contextId = ContextIdFactory.getByRequest(httpRequest);\n          this.moduleRef.registerRequestByContextId(httpRequest, contextId);\n\n          const resourceInstance = await this.moduleRef.resolve(\n            resourceInfo.resource.providerClass,\n            contextId,\n            { strict: false },\n          );\n\n          if (!resourceInstance) {\n            throw new McpError(\n              ErrorCode.MethodNotFound,\n              `Unknown resource: ${uri}`,\n            );\n          }\n\n          const context = this.createContext(mcpServer, request);\n\n          const requestParams = {\n            ...resourceInfo.params,\n            ...request.params,\n          };\n\n          const methodName = resourceInfo.resource.methodName;\n\n          const result = await resourceInstance[methodName].call(\n            resourceInstance,\n            requestParams,\n            context,\n            httpRequest,\n          );\n\n          this.logger.debug(result, 'ReadResourceRequestSchema result');\n\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n          return result;\n        } catch (error) {\n          this.logger.error(error);\n          return {\n            contents: [{ uri, mimeType: 'text/plain', text: error.message }],\n            isError: true,\n          };\n        }\n      },\n    );\n  }\n}\n"]}