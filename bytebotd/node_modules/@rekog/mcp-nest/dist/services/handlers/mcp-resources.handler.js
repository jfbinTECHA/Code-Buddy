"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var McpResourcesHandler_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.McpResourcesHandler = void 0;
const common_1 = require("@nestjs/common");
const core_1 = require("@nestjs/core");
const types_js_1 = require("@modelcontextprotocol/sdk/types.js");
const mcp_registry_service_1 = require("../mcp-registry.service");
const mcp_handler_base_1 = require("./mcp-handler.base");
let McpResourcesHandler = McpResourcesHandler_1 = class McpResourcesHandler extends mcp_handler_base_1.McpHandlerBase {
    constructor(moduleRef, registry, mcpModuleId) {
        super(moduleRef, registry, McpResourcesHandler_1.name);
        this.mcpModuleId = mcpModuleId;
    }
    registerHandlers(mcpServer, httpRequest) {
        if (this.registry.getResources(this.mcpModuleId).length === 0) {
            this.logger.debug('No resources registered, skipping resource handlers');
            return;
        }
        mcpServer.server.setRequestHandler(types_js_1.ListResourcesRequestSchema, () => {
            this.logger.debug('ListResourcesRequestSchema is being called');
            return {
                resources: this.registry
                    .getResources(this.mcpModuleId)
                    .map((resources) => resources.metadata),
            };
        });
        mcpServer.server.setRequestHandler(types_js_1.ReadResourceRequestSchema, async (request) => {
            this.logger.debug('ReadResourceRequestSchema is being called');
            const uri = request.params.uri;
            const resourceInfo = this.registry.findResourceByUri(this.mcpModuleId, uri);
            if (!resourceInfo) {
                throw new types_js_1.McpError(types_js_1.ErrorCode.MethodNotFound, `Unknown resource: ${uri}`);
            }
            try {
                const contextId = core_1.ContextIdFactory.getByRequest(httpRequest);
                this.moduleRef.registerRequestByContextId(httpRequest, contextId);
                const resourceInstance = await this.moduleRef.resolve(resourceInfo.resource.providerClass, contextId, { strict: false });
                if (!resourceInstance) {
                    throw new types_js_1.McpError(types_js_1.ErrorCode.MethodNotFound, `Unknown resource: ${uri}`);
                }
                const context = this.createContext(mcpServer, request);
                const requestParams = {
                    ...resourceInfo.params,
                    ...request.params,
                };
                const methodName = resourceInfo.resource.methodName;
                const result = await resourceInstance[methodName].call(resourceInstance, requestParams, context, httpRequest);
                this.logger.debug(result, 'ReadResourceRequestSchema result');
                return result;
            }
            catch (error) {
                this.logger.error(error);
                return {
                    contents: [{ uri, mimeType: 'text/plain', text: error.message }],
                    isError: true,
                };
            }
        });
    }
};
exports.McpResourcesHandler = McpResourcesHandler;
exports.McpResourcesHandler = McpResourcesHandler = McpResourcesHandler_1 = __decorate([
    (0, common_1.Injectable)({ scope: common_1.Scope.REQUEST }),
    __param(2, (0, common_1.Inject)('MCP_MODULE_ID')),
    __metadata("design:paramtypes", [core_1.ModuleRef,
        mcp_registry_service_1.McpRegistryService, String])
], McpResourcesHandler);
//# sourceMappingURL=mcp-resources.handler.js.map