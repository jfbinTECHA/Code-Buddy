{"version":3,"file":"mcp-executor.service.js","sourceRoot":"","sources":["../../src/services/mcp-executor.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;AACA,2CAAmE;AACnE,uCAAyC;AAEzC,iEAA4D;AAC5D,oEAA+D;AAC/D,4EAAuE;AACvE,wEAAmE;AAM5D,IAAM,kBAAkB,0BAAxB,MAAM,kBAAkB;IAM7B,YACE,SAAoB,EACpB,QAA4B,EACH,WAAmB;QARtC,WAAM,GAAG,IAAI,eAAM,CAAC,oBAAkB,CAAC,IAAI,CAAC,CAAC;QAUnD,IAAI,CAAC,YAAY,GAAG,IAAI,mCAAe,CAAC,SAAS,EAAE,QAAQ,EAAE,WAAW,CAAC,CAAC;QAC1E,IAAI,CAAC,gBAAgB,GAAG,IAAI,2CAAmB,CAC7C,SAAS,EACT,QAAQ,EACR,WAAW,CACZ,CAAC;QACF,IAAI,CAAC,cAAc,GAAG,IAAI,uCAAiB,CACzC,SAAS,EACT,QAAQ,EACR,WAAW,CACZ,CAAC;IACJ,CAAC;IAOD,uBAAuB,CAAC,SAAoB,EAAE,WAAoB;QAChE,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;QAC3D,IAAI,CAAC,gBAAgB,CAAC,gBAAgB,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;QAC/D,IAAI,CAAC,cAAc,CAAC,gBAAgB,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;IAC/D,CAAC;CACF,CAAA;AAlCY,gDAAkB;6BAAlB,kBAAkB;IAD9B,IAAA,mBAAU,EAAC,EAAE,KAAK,EAAE,cAAK,CAAC,OAAO,EAAE,CAAC;IAUhC,WAAA,IAAA,eAAM,EAAC,eAAe,CAAC,CAAA;qCAFb,gBAAS;QACV,yCAAkB;GARnB,kBAAkB,CAkC9B","sourcesContent":["import { McpServer } from '@modelcontextprotocol/sdk/server/mcp.js';\nimport { Inject, Injectable, Logger, Scope } from '@nestjs/common';\nimport { ModuleRef } from '@nestjs/core';\nimport { Request } from 'express';\nimport { McpRegistryService } from './mcp-registry.service';\nimport { McpToolsHandler } from './handlers/mcp-tools.handler';\nimport { McpResourcesHandler } from './handlers/mcp-resources.handler';\nimport { McpPromptsHandler } from './handlers/mcp-prompts.handler';\n\n/**\n * Request-scoped service for executing MCP tools\n */\n@Injectable({ scope: Scope.REQUEST })\nexport class McpExecutorService {\n  private logger = new Logger(McpExecutorService.name);\n  private toolsHandler: McpToolsHandler;\n  private resourcesHandler: McpResourcesHandler;\n  private promptsHandler: McpPromptsHandler;\n\n  constructor(\n    moduleRef: ModuleRef,\n    registry: McpRegistryService,\n    @Inject('MCP_MODULE_ID') mcpModuleId: string,\n  ) {\n    this.toolsHandler = new McpToolsHandler(moduleRef, registry, mcpModuleId);\n    this.resourcesHandler = new McpResourcesHandler(\n      moduleRef,\n      registry,\n      mcpModuleId,\n    );\n    this.promptsHandler = new McpPromptsHandler(\n      moduleRef,\n      registry,\n      mcpModuleId,\n    );\n  }\n\n  /**\n   * Register tool-related request handlers with the MCP server\n   * @param mcpServer - The MCP server instance\n   * @param request - The current HTTP request object\n   */\n  registerRequestHandlers(mcpServer: McpServer, httpRequest: Request) {\n    this.toolsHandler.registerHandlers(mcpServer, httpRequest);\n    this.resourcesHandler.registerHandlers(mcpServer, httpRequest);\n    this.promptsHandler.registerHandlers(mcpServer, httpRequest);\n  }\n}\n"]}