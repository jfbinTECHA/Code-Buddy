{"version":3,"file":"resource.decorator.js","sourceRoot":"","sources":["../../src/decorators/resource.decorator.ts"],"names":[],"mappings":";;;AAAA,2CAA6C;AAC7C,2CAAwD;AAyBjD,MAAM,QAAQ,GAAG,CAAC,OAAwB,EAAE,EAAE;IACnD,OAAO,IAAA,oBAAW,EAAC,qCAAyB,EAAE,OAAO,CAAC,CAAC;AACzD,CAAC,CAAC;AAFW,QAAA,QAAQ,YAEnB","sourcesContent":["import { SetMetadata } from '@nestjs/common';\nimport { MCP_RESOURCE_METADATA_KEY } from './constants';\n\nexport type ResourceOptions =\n  // https://modelcontextprotocol.io/docs/concepts/resources#direct-resources\n  {\n    uri: string; // Unique identifier for the resource\n    name?: string; // Human-readable name\n    description?: string; // Optional description\n    mimeType?: string; // Optional MIME type\n  };\n\nexport interface ResourceMetadata {\n  uri: string; // Unique identifier for the resource\n  name: string; // Human-readable name\n  description?: string; // Optional description\n  mimeType?: string; // Optional MIME type\n}\n\n/**\n * Decorator that marks a controller method as an MCP resource.\n * @param {Object} options - The options for the decorator\n * @param {string} options.name - The name of the resource\n * @param {string} options.uri - The URI of the resource\n * @returns {MethodDecorator} - The decorator\n */\nexport const Resource = (options: ResourceOptions) => {\n  return SetMetadata(MCP_RESOURCE_METADATA_KEY, options);\n};\n"]}