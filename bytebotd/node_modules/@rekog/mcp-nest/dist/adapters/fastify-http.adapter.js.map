{"version":3,"file":"fastify-http.adapter.js","sourceRoot":"","sources":["../../src/adapters/fastify-http.adapter.ts"],"names":[],"mappings":";;;AA4BA,MAAa,kBAAkB;IAC7B,YAAY,CAAC,GAAmB;QAC9B,OAAO;YACL,GAAG,EAAE,GAAG,CAAC,GAAG;YACZ,MAAM,EAAE,GAAG,CAAC,MAAM;YAClB,OAAO,EAAE,GAAG,CAAC,OAAwD;YACrE,KAAK,EAAE,GAAG,CAAC,KAAK;YAChB,IAAI,EAAE,GAAG,CAAC,IAAI;YACd,MAAM,EAAE,GAAG,CAAC,MAAM;YAClB,GAAG,EAAE,CAAC,IAAY,EAAE,EAAE;gBACpB,MAAM,KAAK,GAAG,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;gBAC9C,OAAO,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;YACjD,CAAC;YACD,GAAG,EAAG,GAAW,CAAC,GAAG;SACtB,CAAC;IACJ,CAAC;IAED,aAAa,CAAC,GAAiB;QAC7B,OAAO;YACL,MAAM,EAAE,CAAC,IAAY,EAAE,EAAE;gBACvB,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;gBACjB,OAAO,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;YACjC,CAAC;YACD,IAAI,EAAE,CAAC,IAAS,EAAE,EAAE;gBAClB,KAAK,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBACpB,OAAO,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;YACjC,CAAC;YACD,IAAI,EAAE,CAAC,IAAY,EAAE,EAAE;gBACrB,KAAK,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBACpB,OAAO,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;YACjC,CAAC;YACD,KAAK,EAAE,CAAC,KAAU,EAAE,EAAE;gBACpB,KAAK,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YAC5B,CAAC;YACD,SAAS,EAAE,CAAC,IAAY,EAAE,KAAwB,EAAE,EAAE;gBACpD,GAAG,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;YAC1B,CAAC;YACD,IAAI,WAAW;gBACb,OAAO,GAAG,CAAC,IAAI,CAAC;YAClB,CAAC;YACD,IAAI,QAAQ;gBACV,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC;YACnB,CAAC;YACD,IAAI,MAAM;gBACR,OAAO,GAAG,CAAC,IAAI,CAAC;YAClB,CAAC;YACD,EAAE,EAAE,CAAC,KAAa,EAAE,QAAkC,EAAE,EAAE;gBACxD,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;YAC9B,CAAC;YACD,GAAG,EAAE,GAAG,CAAC,GAAG;SACb,CAAC;IACJ,CAAC;CACF;AApDD,gDAoDC","sourcesContent":["// Import types conditionally to avoid hard dependency\ninterface FastifyRequest {\n  url: string;\n  method: string;\n  headers: Record<string, string | string[]>;\n  query: Record<string, any>;\n  body: any;\n  params: Record<string, string>;\n  routeOptions?: any;\n}\n\ninterface FastifyReply {\n  status(code: number): this;\n  send(payload: any): Promise<void>;\n  header(name: string, value: string | string[]): this;\n  sent: boolean;\n  raw: any;\n}\n\nimport {\n  HttpAdapter,\n  HttpRequest,\n  HttpResponse,\n} from '../interfaces/http-adapter.interface';\n\n/**\n * Fastify HTTP adapter that implements the generic HTTP interface\n */\nexport class FastifyHttpAdapter implements HttpAdapter {\n  adaptRequest(req: FastifyRequest): HttpRequest {\n    return {\n      url: req.url,\n      method: req.method,\n      headers: req.headers as Record<string, string | string[] | undefined>,\n      query: req.query,\n      body: req.body,\n      params: req.params,\n      get: (name: string) => {\n        const value = req.headers[name.toLowerCase()];\n        return Array.isArray(value) ? value[0] : value;\n      },\n      raw: (req as any).raw, // Raw Node.js IncomingMessage for MCP transport\n    };\n  }\n\n  adaptResponse(res: FastifyReply): HttpResponse {\n    return {\n      status: (code: number) => {\n        res.status(code);\n        return this.adaptResponse(res);\n      },\n      json: (body: any) => {\n        void res.send(body);\n        return this.adaptResponse(res);\n      },\n      send: (body: string) => {\n        void res.send(body);\n        return this.adaptResponse(res);\n      },\n      write: (chunk: any) => {\n        void res.raw.write(chunk);\n      },\n      setHeader: (name: string, value: string | string[]) => {\n        res.header(name, value);\n      },\n      get headersSent() {\n        return res.sent;\n      },\n      get writable() {\n        return !res.sent;\n      },\n      get closed() {\n        return res.sent;\n      },\n      on: (event: string, listener: (...args: any[]) => void) => {\n        res.raw.on(event, listener);\n      },\n      raw: res.raw, // Raw Node.js ServerResponse for MCP transport\n    };\n  }\n}\n"]}