{"version":3,"file":"express-http.adapter.js","sourceRoot":"","sources":["../../src/adapters/express-http.adapter.ts"],"names":[],"mappings":";;;AAUA,MAAa,kBAAkB;IAC7B,YAAY,CAAC,GAAY;QACvB,OAAO;YACL,GAAG,EAAE,GAAG,CAAC,GAAG;YACZ,MAAM,EAAE,GAAG,CAAC,MAAM;YAClB,OAAO,EAAE,GAAG,CAAC,OAAwD;YACrE,KAAK,EAAE,GAAG,CAAC,KAAK;YAChB,IAAI,EAAE,GAAG,CAAC,IAAI;YACd,MAAM,EAAE,GAAG,CAAC,MAAM;YAClB,GAAG,EAAE,CAAC,IAAY,EAAE,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC;YACpC,GAAG,EAAE,GAAG;SACT,CAAC;IACJ,CAAC;IAED,aAAa,CAAC,GAAa;QACzB,OAAO;YACL,MAAM,EAAE,CAAC,IAAY,EAAE,EAAE;gBACvB,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;gBACjB,OAAO,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;YACjC,CAAC;YACD,IAAI,EAAE,CAAC,IAAS,EAAE,EAAE;gBAClB,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBACf,OAAO,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;YACjC,CAAC;YACD,IAAI,EAAE,CAAC,IAAY,EAAE,EAAE;gBACrB,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBACf,OAAO,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;YACjC,CAAC;YACD,KAAK,EAAE,CAAC,KAAU,EAAE,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC;YACvC,SAAS,EAAE,CAAC,IAAY,EAAE,KAAwB,EAAE,EAAE,CACpD,GAAG,CAAC,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC;YAC5B,IAAI,WAAW;gBACb,OAAO,GAAG,CAAC,WAAW,CAAC;YACzB,CAAC;YACD,IAAI,QAAQ;gBACV,OAAO,GAAG,CAAC,QAAQ,CAAC;YACtB,CAAC;YACD,IAAI,MAAM;gBACR,OAAO,GAAG,CAAC,SAAS,IAAI,GAAG,CAAC,aAAa,CAAC;YAC5C,CAAC;YACD,EAAE,EAAE,CAAC,KAAa,EAAE,QAAkC,EAAE,EAAE;gBACxD,GAAG,CAAC,EAAE,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;YAC1B,CAAC;YACD,GAAG,EAAE,GAAG;SACT,CAAC;IACJ,CAAC;CACF;AA9CD,gDA8CC","sourcesContent":["import type { Request, Response } from 'express';\nimport {\n  HttpAdapter,\n  HttpRequest,\n  HttpResponse,\n} from '../interfaces/http-adapter.interface';\n\n/**\n * Express HTTP adapter that implements the generic HTTP interface\n */\nexport class ExpressHttpAdapter implements HttpAdapter {\n  adaptRequest(req: Request): HttpRequest {\n    return {\n      url: req.url,\n      method: req.method,\n      headers: req.headers as Record<string, string | string[] | undefined>,\n      query: req.query,\n      body: req.body,\n      params: req.params,\n      get: (name: string) => req.get(name),\n      raw: req,\n    };\n  }\n\n  adaptResponse(res: Response): HttpResponse {\n    return {\n      status: (code: number) => {\n        res.status(code);\n        return this.adaptResponse(res);\n      },\n      json: (body: any) => {\n        res.json(body);\n        return this.adaptResponse(res);\n      },\n      send: (body: string) => {\n        res.send(body);\n        return this.adaptResponse(res);\n      },\n      write: (chunk: any) => res.write(chunk),\n      setHeader: (name: string, value: string | string[]) =>\n        res.setHeader(name, value),\n      get headersSent() {\n        return res.headersSent;\n      },\n      get writable() {\n        return res.writable;\n      },\n      get closed() {\n        return res.destroyed || res.writableEnded;\n      },\n      on: (event: string, listener: (...args: any[]) => void) => {\n        res.on(event, listener);\n      },\n      raw: res,\n    };\n  }\n}\n"]}