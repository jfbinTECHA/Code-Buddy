{"version":3,"file":"resource-template.decorator.js","sourceRoot":"","sources":["../../../src/mcp/decorators/resource-template.decorator.ts"],"names":[],"mappings":";;;AAAA,2CAA6C;AAC7C,2CAAiE;AA2B1D,MAAM,gBAAgB,GAAG,CAAC,OAAgC,EAAE,EAAE;IACnE,OAAO,IAAA,oBAAW,EAAC,8CAAkC,EAAE,OAAO,CAAC,CAAC;AAClE,CAAC,CAAC;AAFW,QAAA,gBAAgB,oBAE3B","sourcesContent":["import { SetMetadata } from '@nestjs/common';\nimport { MCP_RESOURCE_TEMPLATE_METADATA_KEY } from './constants';\n\nexport type ResourceTemplateOptions =\n  // https://modelcontextprotocol.io/docs/concepts/resources#resource-templates\n  {\n    uriTemplate: string; // URI template following RFC 6570\n    name?: string; // Human-readable name\n    description?: string; // Optional description\n    mimeType?: string; // Optional MIME type\n    _meta?: Record<string, any>;\n  };\n\nexport interface ResourceTemplateMetadata {\n  uriTemplate: string; // URI template following RFC 6570\n  name: string; // Human-readable name\n  description?: string; // Optional description\n  mimeType?: string; // Optional MIME type\n  _meta?: Record<string, any>;\n}\n\n/**\n * Decorator that marks a controller method as an MCP resource.\n * @param {Object} options - The options for the decorator\n * @param {string} options.name - The name of the resource\n * @param {string} options.uriTemplate - The URI template of the resource\n * @returns {MethodDecorator} - The decorator\n */\nexport const ResourceTemplate = (options: ResourceTemplateOptions) => {\n  return SetMetadata(MCP_RESOURCE_TEMPLATE_METADATA_KEY, options);\n};\n"]}