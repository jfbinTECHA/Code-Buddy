"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var McpRegistryService_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.McpRegistryService = void 0;
const common_1 = require("@nestjs/common");
const core_1 = require("@nestjs/core");
const decorators_1 = require("../decorators");
const path_to_regexp_1 = require("path-to-regexp");
let McpRegistryService = McpRegistryService_1 = class McpRegistryService {
    constructor(discovery, metadataScanner, modulesContainer) {
        this.discovery = discovery;
        this.metadataScanner = metadataScanner;
        this.modulesContainer = modulesContainer;
        this.logger = new common_1.Logger(McpRegistryService_1.name);
        this.discoveredToolsByMcpModuleId = new Map();
    }
    onApplicationBootstrap() {
        this.discoverTools();
    }
    discoverTools() {
        const getImportedMcpModules = (module) => Array.from(module.imports).filter((m) => m.instance.__isMcpModule);
        const pairs = Array.from(this.modulesContainer.values())
            .map((module) => [
            module,
            getImportedMcpModules(module),
        ])
            .filter(([, importedMcpModules]) => importedMcpModules.length > 0);
        for (const [rootModule, mcpModules] of pairs) {
            this.logger.debug(`Discovering tools, resources, resource templates, and prompts for module: ${rootModule.name}`);
            const subtreeModules = this.collectSubtreeModules(rootModule);
            for (const mcpModule of mcpModules) {
                const mcpModuleId = mcpModule.getProviderByKey('MCP_MODULE_ID')?.instance;
                this.discoverToolsForModuleSubtree(mcpModuleId, subtreeModules);
            }
        }
    }
    collectSubtreeModules(root) {
        const subtreeModules = [];
        const collect = (module) => {
            subtreeModules.push(module);
            module.imports.forEach((importedModule) => {
                if (!subtreeModules.includes(importedModule)) {
                    collect(importedModule);
                }
            });
        };
        collect(root);
        return subtreeModules;
    }
    discoverToolsForModuleSubtree(mcpModuleId, modules) {
        const providers = this.discovery.getProviders(undefined, modules);
        const controllers = this.discovery.getControllers(undefined, modules);
        const allInstances = [...providers, ...controllers]
            .filter((wrapper) => wrapper.instance &&
            typeof wrapper.instance === 'object' &&
            wrapper.instance !== null)
            .map((wrapper) => ({
            instance: wrapper.instance,
            token: wrapper.token,
        }));
        allInstances.forEach(({ instance, token }) => {
            this.metadataScanner.getAllMethodNames(instance).forEach((methodName) => {
                const methodRef = instance[methodName];
                const methodMetaKeys = Reflect.getOwnMetadataKeys(methodRef);
                if (methodMetaKeys.includes(decorators_1.MCP_TOOL_METADATA_KEY)) {
                    this.addDiscoveryTool(mcpModuleId, methodRef, token, methodName);
                }
                if (methodMetaKeys.includes(decorators_1.MCP_RESOURCE_METADATA_KEY)) {
                    this.addDiscoveryResource(mcpModuleId, methodRef, token, methodName);
                }
                if (methodMetaKeys.includes(decorators_1.MCP_RESOURCE_TEMPLATE_METADATA_KEY)) {
                    this.addDiscoveryResourceTemplate(mcpModuleId, methodRef, token, methodName);
                }
                if (methodMetaKeys.includes(decorators_1.MCP_PROMPT_METADATA_KEY)) {
                    this.addDiscoveryPrompt(mcpModuleId, methodRef, token, methodName);
                }
            });
        });
    }
    addDiscovery(type, metadataKey, mcpModuleId, methodRef, token, methodName) {
        const metadata = Reflect.getMetadata(metadataKey, methodRef);
        if (!metadata['name']) {
            metadata['name'] = methodName;
        }
        if (!this.discoveredToolsByMcpModuleId.has(mcpModuleId)) {
            this.discoveredToolsByMcpModuleId.set(mcpModuleId, []);
        }
        this.discoveredToolsByMcpModuleId.get(mcpModuleId)?.push({
            type,
            metadata,
            providerClass: token,
            methodName,
        });
    }
    addDiscoveryPrompt(mcpModuleId, methodRef, token, methodName) {
        this.logger.debug(`Prompt discovered: ${token.name}.${methodName} in module: ${mcpModuleId}`);
        this.addDiscovery('prompt', decorators_1.MCP_PROMPT_METADATA_KEY, mcpModuleId, methodRef, token, methodName);
    }
    addDiscoveryTool(mcpModuleId, methodRef, token, methodName) {
        this.logger.debug(`Tool discovered: ${token.name}.${methodName} in module: ${mcpModuleId}`);
        this.addDiscovery('tool', decorators_1.MCP_TOOL_METADATA_KEY, mcpModuleId, methodRef, token, methodName);
    }
    addDiscoveryResource(mcpModuleId, methodRef, token, methodName) {
        this.logger.debug(`Resource discovered: ${token.name}.${methodName} in module: ${mcpModuleId}`);
        this.addDiscovery('resource', decorators_1.MCP_RESOURCE_METADATA_KEY, mcpModuleId, methodRef, token, methodName);
    }
    addDiscoveryResourceTemplate(mcpModuleId, methodRef, token, methodName) {
        this.logger.debug(`Resource Template discovered: ${token.name}.${methodName} in module: ${mcpModuleId}`);
        this.addDiscovery('resource-template', decorators_1.MCP_RESOURCE_TEMPLATE_METADATA_KEY, mcpModuleId, methodRef, token, methodName);
    }
    getMcpModuleIds() {
        return Array.from(this.discoveredToolsByMcpModuleId.keys());
    }
    getTools(mcpModuleId) {
        return (this.discoveredToolsByMcpModuleId
            .get(mcpModuleId)
            ?.filter((tool) => tool.type === 'tool') ?? []);
    }
    findTool(mcpModuleId, name) {
        return this.getTools(mcpModuleId).find((tool) => tool.metadata.name === name);
    }
    getResources(mcpModuleId) {
        return (this.discoveredToolsByMcpModuleId
            .get(mcpModuleId)
            ?.filter((tool) => tool.type === 'resource') ?? []);
    }
    findResource(mcpModuleId, name) {
        return this.getResources(mcpModuleId).find((tool) => tool.metadata.name === name);
    }
    getResourceTemplates(mcpModuleId) {
        return (this.discoveredToolsByMcpModuleId
            .get(mcpModuleId)
            ?.filter((tool) => tool.type === 'resource-template') ?? []);
    }
    findResourceTemplate(mcpModuleId, name) {
        return this.getResourceTemplates(mcpModuleId).find((tool) => tool.metadata.name === name);
    }
    getPrompts(mcpModuleId) {
        return (this.discoveredToolsByMcpModuleId
            .get(mcpModuleId)
            ?.filter((tool) => tool.type === 'prompt') ?? []);
    }
    findPrompt(mcpModuleId, name) {
        return this.getPrompts(mcpModuleId).find((tool) => tool.metadata.name === name);
    }
    convertTemplate(template) {
        return template?.replace(/{(\w+)}/g, ':$1');
    }
    convertUri(uri) {
        if (uri.includes('://')) {
            return uri.split('://')[1];
        }
        return uri;
    }
    findResourceByUri(mcpModuleId, uri) {
        const resources = this.getResources(mcpModuleId).map((tool) => ({
            name: tool.metadata.name,
            uri: tool.metadata.uri,
        }));
        const strippedInputUri = this.convertUri(uri);
        for (const t of resources) {
            if (!t.uri)
                continue;
            const rawTemplate = t.uri;
            const templatePath = this.convertTemplate(this.convertUri(rawTemplate));
            const matcher = (0, path_to_regexp_1.match)(templatePath, { decode: decodeURIComponent });
            const result = matcher(strippedInputUri);
            if (result) {
                const foundResource = this.findResource(mcpModuleId, t.name);
                if (!foundResource)
                    continue;
                return {
                    resource: foundResource,
                    params: result.params,
                };
            }
        }
        return undefined;
    }
    findResourceTemplateByUri(mcpModuleId, uri) {
        const resourceTemplates = this.getResourceTemplates(mcpModuleId).map((tool) => ({
            name: tool.metadata.name,
            uriTemplate: tool.metadata.uriTemplate,
        }));
        const strippedInputUri = this.convertUri(uri);
        for (const t of resourceTemplates) {
            if (!t.uriTemplate)
                continue;
            const rawTemplate = t.uriTemplate;
            const templatePath = this.convertTemplate(this.convertUri(rawTemplate));
            const matcher = (0, path_to_regexp_1.match)(templatePath, { decode: decodeURIComponent });
            const result = matcher(strippedInputUri);
            if (result) {
                const foundResourceTemplate = this.findResourceTemplate(mcpModuleId, t.name);
                if (!foundResourceTemplate)
                    continue;
                return {
                    resourceTemplate: foundResourceTemplate,
                    params: result.params,
                };
            }
        }
        return undefined;
    }
};
exports.McpRegistryService = McpRegistryService;
exports.McpRegistryService = McpRegistryService = McpRegistryService_1 = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [core_1.DiscoveryService,
        core_1.MetadataScanner,
        core_1.ModulesContainer])
], McpRegistryService);
//# sourceMappingURL=mcp-registry.service.js.map