{"version":3,"file":"mcp-resources.handler.js","sourceRoot":"","sources":["../../../../src/mcp/services/handlers/mcp-resources.handler.ts"],"names":[],"mappings":"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","sourcesContent":["import { Inject, Injectable, InjectionToken, Scope } from '@nestjs/common';\nimport { ContextIdFactory, ModuleRef } from '@nestjs/core';\nimport { McpServer } from '@modelcontextprotocol/sdk/server/mcp.js';\nimport {\n  ErrorCode,\n  ListResourcesRequestSchema,\n  ListResourceTemplatesRequestSchema,\n  McpError,\n  ReadResourceRequestSchema,\n} from '@modelcontextprotocol/sdk/types.js';\nimport { McpRegistryService } from '../mcp-registry.service';\nimport { McpHandlerBase } from './mcp-handler.base';\nimport { Context } from '../../interfaces';\nimport { HttpRequest } from '../../interfaces/http-adapter.interface';\n\n@Injectable({ scope: Scope.REQUEST })\nexport class McpResourcesHandler extends McpHandlerBase {\n  constructor(\n    moduleRef: ModuleRef,\n    registry: McpRegistryService,\n    @Inject('MCP_MODULE_ID') private readonly mcpModuleId: string,\n  ) {\n    super(moduleRef, registry, McpResourcesHandler.name);\n  }\n\n  registerHandlers(mcpServer: McpServer, httpRequest: HttpRequest) {\n    const resources = this.registry.getResources(this.mcpModuleId);\n    const resourceTemplates = this.registry.getResourceTemplates(\n      this.mcpModuleId,\n    );\n    if (resources.length === 0 && resourceTemplates.length === 0) {\n      this.logger.debug(\n        'No resources or resource templates registered, skipping resource handlers',\n      );\n      return;\n    }\n\n    mcpServer.server.setRequestHandler(ListResourcesRequestSchema, () => {\n      this.logger.debug('ListResourcesRequestSchema is being called');\n      return {\n        resources: this.registry\n          .getResources(this.mcpModuleId)\n          .map((resources) => resources.metadata),\n      };\n    });\n\n    mcpServer.server.setRequestHandler(\n      ListResourceTemplatesRequestSchema,\n      () => {\n        this.logger.debug('ListResourceTemplatesRequestSchema is being called');\n        return {\n          resourceTemplates: this.registry\n            .getResourceTemplates(this.mcpModuleId)\n            .map((resourceTemplate) => resourceTemplate.metadata),\n        };\n      },\n    );\n\n    mcpServer.server.setRequestHandler(\n      ReadResourceRequestSchema,\n      async (request) => {\n        this.logger.debug('ReadResourceRequestSchema is being called');\n\n        const uri = request.params.uri;\n        const resourceInfo = this.registry.findResourceByUri(\n          this.mcpModuleId,\n          uri,\n        );\n        const resourceTemplateInfo = this.registry.findResourceTemplateByUri(\n          this.mcpModuleId,\n          uri,\n        );\n\n        try {\n          let providerClass: InjectionToken;\n          let params: Record<string, unknown> = {};\n          let methodName: string;\n          if (resourceTemplateInfo) {\n            providerClass = resourceTemplateInfo.resourceTemplate.providerClass;\n            params = {\n              ...resourceTemplateInfo.params,\n              ...request.params,\n            };\n            methodName = resourceTemplateInfo.resourceTemplate.methodName;\n          } else if (resourceInfo) {\n            providerClass = resourceInfo.resource.providerClass;\n\n            params = {\n              ...resourceInfo.params,\n              ...request.params,\n            };\n            methodName = resourceInfo.resource.methodName;\n          } else {\n            throw new McpError(\n              ErrorCode.MethodNotFound,\n              `Unknown resource: ${uri}`,\n            );\n          }\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n          return await this.handleRequest(\n            httpRequest,\n            providerClass,\n            uri,\n            this.createContext(mcpServer, request),\n            params,\n            methodName,\n          );\n        } catch (error) {\n          this.logger.error(error);\n          return {\n            contents: [{ uri, mimeType: 'text/plain', text: error.message }],\n            isError: true,\n          };\n        }\n      },\n    );\n  }\n\n  private async handleRequest(\n    httpRequest: HttpRequest,\n    providerClass: InjectionToken,\n    uri: string,\n    context: Context,\n    requestParams: Record<string, unknown>,\n    methodName: string,\n  ) {\n    const contextId = ContextIdFactory.getByRequest(httpRequest);\n    this.moduleRef.registerRequestByContextId(httpRequest, contextId);\n\n    const resourceInstance = await this.moduleRef.resolve(\n      providerClass,\n      contextId,\n      { strict: false },\n    );\n\n    if (!resourceInstance) {\n      throw new McpError(\n        ErrorCode.MethodNotFound,\n        `Unknown resource template: ${uri}`,\n      );\n    }\n    const result = await resourceInstance[methodName].call(\n      resourceInstance,\n      requestParams,\n      context,\n      httpRequest,\n    );\n\n    this.logger.debug(result, 'ReadResourceRequestSchema result');\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n    return result;\n  }\n}\n"]}