{"version":3,"file":"mcp-sse.service.js","sourceRoot":"","sources":["../../../src/mcp/services/mcp-sse.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Inject, Injectable, Logger } from '@nestjs/common';\nimport { ApplicationConfig, ContextIdFactory, ModuleRef } from '@nestjs/core';\nimport { McpServer } from '@modelcontextprotocol/sdk/server/mcp.js';\nimport { SSEServerTransport } from '@modelcontextprotocol/sdk/server/sse.js';\nimport { buildMcpCapabilities } from '../utils/capabilities-builder';\nimport { McpOptions } from '../interfaces';\nimport { McpExecutorService } from './mcp-executor.service';\nimport { McpRegistryService } from './mcp-registry.service';\nimport { SsePingService } from './sse-ping.service';\nimport { normalizeEndpoint } from '../utils/normalize-endpoint';\nimport { HttpAdapterFactory } from '../adapters';\n\n@Injectable()\nexport class McpSseService {\n  private readonly logger = new Logger(McpSseService.name);\n\n  // Note: Currently, storing transports and servers makes it a requirement to have sticky sessions.\n\n  // Map to store active transports by session ID\n  private readonly transports = new Map<string, SSEServerTransport>();\n  // Map to store MCP server instances by session ID\n  private readonly mcpServers = new Map<string, McpServer>();\n\n  constructor(\n    @Inject('MCP_OPTIONS') private readonly options: McpOptions,\n    @Inject('MCP_MODULE_ID') private readonly mcpModuleId: string,\n    private readonly applicationConfig: ApplicationConfig,\n    private readonly moduleRef: ModuleRef,\n    private readonly toolRegistry: McpRegistryService,\n    @Inject(SsePingService) private readonly pingService: SsePingService,\n  ) {}\n\n  /**\n   * Initialize the SSE service and configure ping service\n   */\n  initialize() {\n    // Configure ping service with options\n    this.pingService.configure({\n      pingEnabled: this.options.sse?.pingEnabled, // Enable by default\n      pingIntervalMs: this.options.sse?.pingIntervalMs,\n    });\n  }\n\n  /**\n   * Create and manage SSE connection\n   */\n  async createSseConnection(\n    rawReq: any,\n    rawRes: any,\n    messagesEndpoint: string,\n    apiPrefix: string,\n  ): Promise<void> {\n    const adapter = HttpAdapterFactory.getAdapter(rawReq, rawRes);\n    const res = adapter.adaptResponse(rawRes);\n\n    // Create a new SSE transport instance\n    const transport = new SSEServerTransport(\n      normalizeEndpoint(\n        `${apiPrefix}/${this.applicationConfig.getGlobalPrefix()}/${messagesEndpoint}`,\n      ),\n      res.raw,\n    );\n    const sessionId = transport.sessionId;\n\n    // Create a new MCP server instance with dynamic capabilities\n    const capabilities = buildMcpCapabilities(\n      this.mcpModuleId,\n      this.toolRegistry,\n      this.options,\n    );\n    this.logger.debug('Built MCP capabilities:', capabilities);\n\n    // Create a new MCP server for this session with dynamic capabilities\n    const mcpServer = new McpServer(\n      { name: this.options.name, version: this.options.version },\n      {\n        capabilities,\n        instructions: this.options.instructions || '',\n      },\n    );\n\n    // Store the transport and server for this session\n    this.transports.set(sessionId, transport);\n    this.mcpServers.set(sessionId, mcpServer);\n\n    // Register the connection with the ping service\n    this.pingService.registerConnection(sessionId, transport, res);\n\n    transport.onclose = () => {\n      // Clean up when the connection closes\n      this.transports.delete(sessionId);\n      this.mcpServers.delete(sessionId);\n      this.pingService.removeConnection(sessionId);\n    };\n\n    await mcpServer.connect(transport);\n  }\n\n  /**\n   * Handle message processing for SSE\n   */\n  async handleMessage(rawReq: any, rawRes: any, body: unknown): Promise<any> {\n    const adapter = HttpAdapterFactory.getAdapter(rawReq, rawRes);\n    const req = adapter.adaptRequest(rawReq);\n    const res = adapter.adaptResponse(rawRes);\n    const sessionId = req.query.sessionId as string;\n    const transport = this.transports.get(sessionId);\n\n    if (!transport) {\n      return res.status(404).send('Session not found');\n    }\n\n    const mcpServer = this.mcpServers.get(sessionId);\n    if (!mcpServer) {\n      return res.status(404).send('MCP server not found for session');\n    }\n\n    // Resolve the request-scoped tool executor service\n    const contextId = ContextIdFactory.getByRequest(req);\n    const executor = await this.moduleRef.resolve(\n      McpExecutorService,\n      contextId,\n    );\n\n    // Register request handlers with the user context from this specific request\n    executor.registerRequestHandlers(mcpServer, req);\n\n    // Process the message\n    await transport.handlePostMessage(req.raw, res.raw, body);\n  }\n}\n"]}