import { OnModuleDestroy } from '@nestjs/common';
import { ModuleRef } from '@nestjs/core';
import { McpServer } from '@modelcontextprotocol/sdk/server/mcp.js';
import { StreamableHTTPServerTransport } from '@modelcontextprotocol/sdk/server/streamableHttp.js';
import { HttpRequest, HttpResponse } from '../interfaces/http-adapter.interface';
import { McpOptions } from '../interfaces';
import { McpRegistryService } from './mcp-registry.service';
export declare class McpStreamableHttpService implements OnModuleDestroy {
    private readonly options;
    private readonly mcpModuleId;
    private readonly moduleRef;
    private readonly toolRegistry;
    private readonly logger;
    private readonly transports;
    private readonly mcpServers;
    private readonly executors;
    private readonly isStatelessMode;
    constructor(options: McpOptions, mcpModuleId: string, moduleRef: ModuleRef, toolRegistry: McpRegistryService);
    createStatelessServer(rawReq: any): Promise<{
        server: McpServer;
        transport: StreamableHTTPServerTransport;
    }>;
    handlePostRequest(req: any, res: any, body: unknown): Promise<void>;
    handleStatelessRequest(req: any, res: HttpResponse, body: unknown): Promise<void>;
    handleStatefulRequest(req: HttpRequest, res: HttpResponse, body: unknown): Promise<void>;
    handleGetRequest(req: any, res: any): Promise<void>;
    handleDeleteRequest(req: any, res: any): Promise<void>;
    private isInitializeRequest;
    private cleanupSession;
    onModuleDestroy(): Promise<void>;
}
//# sourceMappingURL=mcp-streamable-http.service.d.ts.map