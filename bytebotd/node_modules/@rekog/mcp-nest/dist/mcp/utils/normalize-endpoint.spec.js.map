{"version":3,"file":"normalize-endpoint.spec.js","sourceRoot":"","sources":["../../../src/mcp/utils/normalize-endpoint.spec.ts"],"names":[],"mappings":";;AAAA,6DAAyD;AAEzD,QAAQ,CAAC,mBAAmB,EAAE,GAAG,EAAE;IACjC,EAAE,CAAC,4CAA4C,EAAE,GAAG,EAAE;QACpD,MAAM,CAAC,IAAA,sCAAiB,EAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QACzC,MAAM,CAAC,IAAA,sCAAiB,EAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IAChD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wCAAwC,EAAE,GAAG,EAAE;QAChD,MAAM,KAAK,GAAG,gBAAgB,CAAC;QAC/B,MAAM,QAAQ,GAAG,aAAa,CAAC;QAC/B,MAAM,CAAC,IAAA,sCAAiB,EAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAClD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uBAAuB,EAAE,GAAG,EAAE;QAC/B,MAAM,KAAK,GAAG,UAAU,CAAC;QACzB,MAAM,QAAQ,GAAG,SAAS,CAAC;QAC3B,MAAM,CAAC,IAAA,sCAAiB,EAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAClD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4DAA4D,EAAE,GAAG,EAAE;QACpE,MAAM,KAAK,GAAG,kDAAkD,CAAC;QACjE,MAAM,QAAQ,GAAG,iDAAiD,CAAC;QACnE,MAAM,CAAC,IAAA,sCAAiB,EAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAClD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6DAA6D,EAAE,GAAG,EAAE;QACrE,MAAM,KAAK,GAAG,iCAAiC,CAAC;QAChD,MAAM,QAAQ,GAAG,6BAA6B,CAAC;QAC/C,MAAM,CAAC,IAAA,sCAAiB,EAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAClD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iCAAiC,EAAE,GAAG,EAAE;QACzC,MAAM,KAAK,GAAG,6BAA6B,CAAC;QAC5C,MAAM,QAAQ,GAAG,4BAA4B,CAAC;QAC9C,MAAM,CAAC,IAAA,sCAAiB,EAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAClD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gDAAgD,EAAE,GAAG,EAAE;QACxD,MAAM,KAAK,GAAG,YAAY,CAAC;QAC3B,MAAM,QAAQ,GAAG,SAAS,CAAC;QAC3B,MAAM,CAAC,IAAA,sCAAiB,EAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAClD,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { normalizeEndpoint } from './normalize-endpoint';\n\ndescribe('normalizeEndpoint', () => {\n  it('returns empty string for null or undefined', () => {\n    expect(normalizeEndpoint(null)).toBe('');\n    expect(normalizeEndpoint(undefined)).toBe('');\n  });\n\n  it('collapses multiple slashes in the path', () => {\n    const input = 'foo//bar///baz';\n    const expected = 'foo/bar/baz';\n    expect(normalizeEndpoint(input)).toBe(expected);\n  });\n\n  it('removes leading slash', () => {\n    const input = '/foo/bar';\n    const expected = 'foo/bar';\n    expect(normalizeEndpoint(input)).toBe(expected);\n  });\n\n  it('preserves http protocol and collapses slashes after domain', () => {\n    const input = 'http://localhost:3000//remote-auth/auth/callback';\n    const expected = 'http://localhost:3000/remote-auth/auth/callback';\n    expect(normalizeEndpoint(input)).toBe(expected);\n  });\n\n  it('preserves https protocol and collapses slashes after domain', () => {\n    const input = 'https://example.com///path///to';\n    const expected = 'https://example.com/path/to';\n    expect(normalizeEndpoint(input)).toBe(expected);\n  });\n\n  it('preserves other protocols (ftp)', () => {\n    const input = 'ftp://example.com//dir/file';\n    const expected = 'ftp://example.com/dir/file';\n    expect(normalizeEndpoint(input)).toBe(expected);\n  });\n\n  it('handles no protocol and leading double slashes', () => {\n    const input = '//foo//bar';\n    const expected = 'foo/bar';\n    expect(normalizeEndpoint(input)).toBe(expected);\n  });\n});\n"]}