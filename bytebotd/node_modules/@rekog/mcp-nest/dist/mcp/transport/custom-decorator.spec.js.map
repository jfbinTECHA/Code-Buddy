{"version":3,"file":"custom-decorator.spec.js","sourceRoot":"","sources":["../../../src/mcp/transport/custom-decorator.spec.ts"],"names":[],"mappings":";;AAAA,2CAA6C;AAC7C,qEAA+D;AAC/D,6FAAsF;AAEtF,QAAQ,CAAC,mBAAmB,EAAE,GAAG,EAAE;IAEjC,MAAM,mBAAmB,GAAG,IAAA,oBAAW,EAAC,gBAAgB,EAAE,IAAI,CAAC,CAAC;IAEhE,QAAQ,CAAC,wBAAwB,EAAE,GAAG,EAAE;QACtC,EAAE,CAAC,sDAAsD,EAAE,GAAG,EAAE;YAE9D,MAAM,UAAU,GAAG,CAAC,mBAAmB,CAAC,CAAC;YAGzC,MAAM,aAAa,GAAG,IAAA,4CAAmB,EACvC,mBAAmB,EACnB,wBAAwB,EACxB,MAAM,EACN,EAAE,EACF,UAAU,CACX,CAAC;YAGF,MAAM,CAAC,aAAa,CAAC,CAAC,WAAW,EAAE,CAAC;YACpC,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,gBAAgB,EAAE,aAAa,CAAC,CAAC,CAAC,UAAU,EAAE,CAAC;QAC5E,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,uCAAuC,EAAE,GAAG,EAAE;YAE/C,MAAM,aAAa,GAAG,IAAA,4CAAmB,EACvC,mBAAmB,EACnB,wBAAwB,EACxB,MAAM,CACP,CAAC;YAGF,MAAM,CAAC,aAAa,CAAC,CAAC,WAAW,EAAE,CAAC;YACpC,MAAM,CACJ,OAAO,CAAC,WAAW,CAAC,gBAAgB,EAAE,aAAa,CAAC,CACrD,CAAC,aAAa,EAAE,CAAC;QACpB,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,oCAAoC,EAAE,GAAG,EAAE;QAClD,EAAE,CAAC,kEAAkE,EAAE,GAAG,EAAE;YAE1E,MAAM,UAAU,GAAG,CAAC,mBAAmB,CAAC,CAAC;YAGzC,MAAM,oBAAoB,GAAG,IAAA,mEAA8B,EACzD,oBAAoB,EACpB,MAAM,EACN,EAAE,EACF,UAAU,CACX,CAAC;YAGF,MAAM,CAAC,oBAAoB,CAAC,CAAC,WAAW,EAAE,CAAC;YAC3C,MAAM,CACJ,OAAO,CAAC,WAAW,CAAC,gBAAgB,EAAE,oBAAoB,CAAC,CAC5D,CAAC,UAAU,EAAE,CAAC;QACjB,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,uCAAuC,EAAE,GAAG,EAAE;YAE/C,MAAM,oBAAoB,GAAG,IAAA,mEAA8B,EACzD,oBAAoB,EACpB,MAAM,CACP,CAAC;YAGF,MAAM,CAAC,oBAAoB,CAAC,CAAC,WAAW,EAAE,CAAC;QAC7C,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { SetMetadata } from '@nestjs/common';\nimport { createSseController } from './sse.controller.factory';\nimport { createStreamableHttpController } from './streamable-http.controller.factory';\n\ndescribe('Custom Decorators', () => {\n  // Custom decorator for testing\n  const testCustomDecorator = SetMetadata('test:decorator', true);\n\n  describe('SSE Controller Factory', () => {\n    it('should apply custom decorators to the SSE controller', () => {\n      // Arrange\n      const decorators = [testCustomDecorator];\n\n      // Act\n      const sseController = createSseController(\n        'test-sse-endpoint',\n        'test-messages-endpoint',\n        '/api',\n        [],\n        decorators,\n      );\n\n      // Assert\n      expect(sseController).toBeDefined();\n      expect(Reflect.getMetadata('test:decorator', sseController)).toBeTruthy();\n    });\n\n    it('should work without custom decorators', () => {\n      // Act\n      const sseController = createSseController(\n        'test-sse-endpoint',\n        'test-messages-endpoint',\n        '/api',\n      );\n\n      // Assert\n      expect(sseController).toBeDefined();\n      expect(\n        Reflect.getMetadata('test:decorator', sseController),\n      ).toBeUndefined();\n    });\n  });\n\n  describe('Streamable HTTP Controller Factory', () => {\n    it('should apply custom decorators to the Streamable HTTP controller', () => {\n      // Arrange\n      const decorators = [testCustomDecorator];\n\n      // Act\n      const streamableController = createStreamableHttpController(\n        'test-http-endpoint',\n        '/api',\n        [],\n        decorators,\n      );\n\n      // Assert\n      expect(streamableController).toBeDefined();\n      expect(\n        Reflect.getMetadata('test:decorator', streamableController),\n      ).toBeTruthy();\n    });\n\n    it('should work without custom decorators', () => {\n      // Act\n      const StreamableController = createStreamableHttpController(\n        'test-http-endpoint',\n        '/api',\n      );\n\n      // Assert\n      expect(StreamableController).toBeDefined();\n    });\n  });\n});\n"]}