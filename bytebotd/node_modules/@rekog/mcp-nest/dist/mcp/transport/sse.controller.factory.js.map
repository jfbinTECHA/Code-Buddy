{"version":3,"file":"sse.controller.factory.js","sourceRoot":"","sources":["../../../src/mcp/transport/sse.controller.factory.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAwBA,kDAuDC;AA/ED,2CAewB;AAGxB,iEAA4D;AAC5D,oEAAgE;AAKhE,SAAgB,mBAAmB,CACjC,WAAmB,EACnB,gBAAwB,EACxB,SAAiB,EACjB,SAA8B,EAAE,EAChC,aAA+B,EAAE;;IAEjC,IAIM,aAAa,qBAJnB,MAIM,aAAa;QAGjB,YACyB,OAAmC,EAC1C,aAA4B;YADL,YAAO,GAAP,OAAO,CAAY;YAC1C,kBAAa,GAAb,aAAa,CAAe;YAJrC,WAAM,GAAG,IAAI,eAAM,CAAC,eAAa,CAAC,IAAI,CAAC,CAAC;QAK9C,CAAC;QAKJ,YAAY;YACV,IAAI,CAAC,aAAa,CAAC,UAAU,EAAE,CAAC;QAClC,CAAC;QAOK,AAAN,KAAK,CAAC,GAAG,CAAQ,MAAW,EAAS,MAAW;YAC9C,OAAO,IAAI,CAAC,aAAa,CAAC,mBAAmB,CAC3C,MAAM,EACN,MAAM,EACN,gBAAgB,EAChB,SAAS,CACV,CAAC;QACJ,CAAC;QAOK,AAAN,KAAK,CAAC,QAAQ,CACL,MAAW,EACX,MAAW,EACV,IAAa;YAErB,MAAM,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,MAAM,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;QAC/D,CAAC;KACF,CAAA;IArBO;QAFL,IAAA,YAAG,EAAC,IAAA,sCAAiB,EAAC,GAAG,SAAS,IAAI,WAAW,EAAE,CAAC,CAAC;QACrD,IAAA,kBAAS,EAAC,GAAG,MAAM,CAAC;QACV,WAAA,IAAA,YAAG,GAAE,CAAA;QAAe,WAAA,IAAA,YAAG,GAAE,CAAA;;;;4CAOnC;IAOK;QAFL,IAAA,aAAI,EAAC,IAAA,sCAAiB,EAAC,GAAG,SAAS,IAAI,gBAAgB,EAAE,CAAC,CAAC;QAC3D,IAAA,kBAAS,EAAC,GAAG,MAAM,CAAC;QAElB,WAAA,IAAA,YAAG,GAAE,CAAA;QACL,WAAA,IAAA,YAAG,GAAE,CAAA;QACL,WAAA,IAAA,aAAI,GAAE,CAAA;;;;iDAGR;IAxCG,aAAa;QAJlB,IAAA,mBAAU,EAAC;YACV,OAAO,EAAE,wBAAe;SACzB,CAAC;QACD,IAAA,wBAAe,EAAC,GAAG,UAAU,CAAC;QAK1B,WAAA,IAAA,eAAM,EAAC,aAAa,CAAC,CAAA;iDACS,+BAAa;OAL1C,aAAa,CAyClB;IAED,OAAO,aAAa,CAAC;AACvB,CAAC","sourcesContent":["import {\n  Body,\n  CanActivate,\n  Controller,\n  Get,\n  Inject,\n  Logger,\n  OnModuleInit,\n  Post,\n  Req,\n  Res,\n  Type,\n  UseGuards,\n  VERSION_NEUTRAL,\n  applyDecorators,\n} from '@nestjs/common';\n\nimport { McpOptions } from '../interfaces';\nimport { McpSseService } from '../services/mcp-sse.service';\nimport { normalizeEndpoint } from '../utils/normalize-endpoint';\n\n/**\n * Creates a controller for handling SSE connections and tool executions\n */\nexport function createSseController(\n  sseEndpoint: string,\n  messagesEndpoint: string,\n  apiPrefix: string,\n  guards: Type<CanActivate>[] = [],\n  decorators: ClassDecorator[] = [],\n) {\n  @Controller({\n    version: VERSION_NEUTRAL,\n  })\n  @applyDecorators(...decorators)\n  class SseController implements OnModuleInit {\n    readonly logger = new Logger(SseController.name);\n\n    constructor(\n      @Inject('MCP_OPTIONS') public readonly options: McpOptions,\n      public readonly mcpSseService: McpSseService,\n    ) {}\n\n    /**\n     * Initialize the controller and configure SSE service\n     */\n    onModuleInit() {\n      this.mcpSseService.initialize();\n    }\n\n    /**\n     * SSE connection endpoint\n     */\n    @Get(normalizeEndpoint(`${apiPrefix}/${sseEndpoint}`))\n    @UseGuards(...guards)\n    async sse(@Req() rawReq: any, @Res() rawRes: any) {\n      return this.mcpSseService.createSseConnection(\n        rawReq,\n        rawRes,\n        messagesEndpoint,\n        apiPrefix,\n      );\n    }\n\n    /**\n     * Tool execution endpoint - protected by the provided guards\n     */\n    @Post(normalizeEndpoint(`${apiPrefix}/${messagesEndpoint}`))\n    @UseGuards(...guards)\n    async messages(\n      @Req() rawReq: any,\n      @Res() rawRes: any,\n      @Body() body: unknown,\n    ): Promise<void> {\n      await this.mcpSseService.handleMessage(rawReq, rawRes, body);\n    }\n  }\n\n  return SseController;\n}\n"]}