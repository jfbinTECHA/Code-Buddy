"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.McpAuthJwtGuard = void 0;
const common_1 = require("@nestjs/common");
const jwt_token_service_1 = require("../services/jwt-token.service");
let McpAuthJwtGuard = class McpAuthJwtGuard {
    constructor(jwtTokenService, store) {
        this.jwtTokenService = jwtTokenService;
        this.store = store;
    }
    async canActivate(context) {
        const request = context.switchToHttp().getRequest();
        const token = this.extractTokenFromHeader(request);
        if (!token) {
            throw new common_1.UnauthorizedException('Access token required');
        }
        const payload = this.jwtTokenService.validateToken(token);
        if (!payload) {
            throw new common_1.UnauthorizedException('Invalid or expired access token');
        }
        const enriched = { ...payload };
        try {
            if (!enriched.user_data && enriched.user_profile_id) {
                const profile = await this.store.getUserProfileById(enriched.user_profile_id);
                if (profile) {
                    enriched.user_data = profile;
                }
            }
            const ud = enriched.user_data || {};
            enriched.username =
                enriched.username || ud.username || ud.id || enriched.sub;
            enriched.email = enriched.email || ud.email;
            enriched.displayName = enriched.displayName || ud.displayName;
            enriched.avatarUrl = enriched.avatarUrl || ud.avatarUrl;
            enriched.name =
                enriched.name ||
                    ud.displayName ||
                    ud.username ||
                    ud.email ||
                    enriched.sub;
        }
        catch {
        }
        request.user = enriched;
        return true;
    }
    extractTokenFromHeader(request) {
        const authHeader = request.headers.authorization;
        if (!authHeader) {
            return undefined;
        }
        const [type, token] = authHeader.split(' ');
        return type === 'Bearer' ? token : undefined;
    }
};
exports.McpAuthJwtGuard = McpAuthJwtGuard;
exports.McpAuthJwtGuard = McpAuthJwtGuard = __decorate([
    (0, common_1.Injectable)(),
    __param(1, (0, common_1.Inject)('IOAuthStore')),
    __metadata("design:paramtypes", [jwt_token_service_1.JwtTokenService, Object])
], McpAuthJwtGuard);
//# sourceMappingURL=jwt-auth.guard.js.map