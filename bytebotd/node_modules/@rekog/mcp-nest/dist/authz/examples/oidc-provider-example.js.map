{"version":3,"file":"oidc-provider-example.js","sourceRoot":"","sources":["../../../src/authz/examples/oidc-provider-example.ts"],"names":[],"mappings":";;;;;;;;;AAAA,2CAAwC;AACxC,kEAAgE;AAChE,kEAAmE;AA6D5D,IAAM,yBAAyB,GAA/B,MAAM,yBAAyB;CAAG,CAAA;AAA5B,8DAAyB;oCAAzB,yBAAyB;IAtDrC,IAAA,eAAM,EAAC;QACN,OAAO,EAAE;YAEP,4CAAqB,CAAC,OAAO,CAAC;gBAE5B,QAAQ,EAAE,OAAO,CAAC,GAAG,CAAC,gBAAiB;gBACvC,YAAY,EAAE,OAAO,CAAC,GAAG,CAAC,oBAAqB;gBAG/C,SAAS,EAAE,OAAO,CAAC,GAAG,CAAC,UAAW;gBAGlC,SAAS,EAAE,OAAO,CAAC,GAAG,CAAC,UAAU,IAAI,wBAAwB;gBAC7D,QAAQ,EAAE,OAAO,CAAC,GAAG,CAAC,YAAY,IAAI,4BAA4B;gBAGlE,SAAS,EAAE,OAAO,CAAC,GAAG,CAAC,UAAU,IAAI,wBAAwB;gBAC7D,WAAW,EAAE,OAAO,CAAC,GAAG,CAAC,YAAY,IAAI,YAAY;gBAGrD,uBAAuB,EAAE,IAAI;gBAC7B,wBAAwB,EAAE,KAAK;gBAG/B,YAAY,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI;gBACjC,YAAY,EAAE,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY;gBACnD,qBAAqB,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI;gBACrC,iBAAiB,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI;gBAGjC,QAAQ,EAAE,qCAAmB;gBAG7B,SAAS,EAAE,MAAM;gBAGjB,SAAS,EAAE;oBACT,oCAAoC,EAClC,yCAAyC;oBAC3C,QAAQ,EAAE,MAAM;oBAChB,SAAS,EAAE,OAAO;oBAClB,QAAQ,EAAE,WAAW;oBACrB,KAAK,EAAE,QAAQ;oBACf,QAAQ,EAAE,aAAa;oBACvB,MAAM,EAAE,SAAS;iBAClB;gBAGD,kBAAkB,EAAE;oBAClB,IAAI,EAAE,QAAQ;iBACf;aACF,CAAC;SACH;KACF,CAAC;GACW,yBAAyB,CAAG","sourcesContent":["import { Module } from '@nestjs/common';\nimport { McpOidcProviderModule } from '../oidc-provider.module';\nimport { GitHubOAuthProvider } from '../providers/github.provider';\n\n/**\n * Example configuration for using the new OIDC Provider\n * instead of the legacy custom OAuth implementation\n */\n\n@Module({\n  imports: [\n    // Replace McpAuthModule.forRoot with McpOidcProviderModule.forRoot\n    McpOidcProviderModule.forRoot({\n      // GitHub OAuth App credentials\n      clientId: process.env.GITHUB_CLIENT_ID!,\n      clientSecret: process.env.GITHUB_CLIENT_SECRET!,\n\n      // JWT signing secret (should be at least 32 characters)\n      jwtSecret: process.env.JWT_SECRET!,\n\n      // Server configuration\n      serverUrl: process.env.SERVER_URL || 'https://localhost:3000',\n      resource: process.env.RESOURCE_URL || 'https://localhost:3000/mcp',\n\n      // OIDC Provider configuration\n      jwtIssuer: process.env.JWT_ISSUER || 'https://localhost:3000',\n      jwtAudience: process.env.JWT_AUDIENCE || 'mcp-client',\n\n      // Token expiration settings\n      jwtAccessTokenExpiresIn: '1h',\n      jwtRefreshTokenExpiresIn: '30d',\n\n      // Cookie and session settings\n      cookieMaxAge: 24 * 60 * 60 * 1000, // 24 hours\n      cookieSecure: process.env.NODE_ENV === 'production',\n      oauthSessionExpiresIn: 10 * 60 * 1000, // 10 minutes\n      authCodeExpiresIn: 10 * 60 * 1000, // 10 minutes\n\n      // GitHub provider configuration\n      provider: GitHubOAuthProvider,\n\n      // Optional: API prefix for OIDC endpoints (defaults to 'oidc')\n      apiPrefix: 'oidc',\n\n      // Optional: Custom endpoint configuration\n      endpoints: {\n        wellKnownAuthorizationServerMetadata:\n          '/.well-known/oauth-authorization-server',\n        register: '/reg',\n        authorize: '/auth',\n        callback: '/callback',\n        token: '/token',\n        validate: '/introspect',\n        revoke: '/revoke',\n      },\n\n      // Optional: Storage configuration (defaults to memory)\n      storeConfiguration: {\n        type: 'memory', // or 'typeorm' for persistent storage\n      },\n    }),\n  ],\n})\nexport class AppModuleWithOidcProvider {}\n\n/**\n * Environment variables required:\n *\n * GITHUB_CLIENT_ID=your_github_oauth_app_client_id\n * GITHUB_CLIENT_SECRET=your_github_oauth_app_client_secret\n * JWT_SECRET=your_jwt_signing_secret_at_least_32_characters_long\n * SERVER_URL=https://your-server.com (optional, defaults to localhost:3000)\n * RESOURCE_URL=https://your-server.com/mcp (optional)\n * JWT_ISSUER=https://your-server.com (optional)\n * JWT_AUDIENCE=mcp-client (optional)\n * NODE_ENV=production (for secure cookies)\n */\n\n/**\n * OIDC Endpoints provided by this configuration:\n *\n * Well-known metadata:\n * - GET /.well-known/oauth-authorization-server\n * - GET /.well-known/oauth-protected-resource\n * - GET /oidc/.well-known/openid_configuration\n *\n * OAuth 2.0 / OIDC endpoints:\n * - GET /oidc/auth - Authorization endpoint\n * - POST /oidc/token - Token endpoint\n * - GET /oidc/me - UserInfo endpoint\n * - GET /oidc/jwks - JSON Web Key Set\n * - POST /oidc/reg - Dynamic client registration\n * - POST /oidc/introspect - Token introspection\n * - POST /oidc/revoke - Token revocation\n *\n * Custom interaction endpoints:\n * - GET /oidc/interaction/:uid - GitHub authentication initiation\n * - GET /oidc/callback - GitHub OAuth callback\n */\n\n/**\n * Migration from legacy McpAuthModule:\n *\n * 1. Replace imports:\n *    - Change: import { McpAuthModule } from '@rekog/mcp-nest/authz'\n *    - To: import { McpOidcProviderModule } from '@rekog/mcp-nest/authz'\n *\n * 2. Update module registration:\n *    - Change: McpAuthModule.forRoot(...)\n *    - To: McpOidcProviderModule.forRoot(...)\n *\n * 3. Update endpoints (if you have hardcoded URLs):\n *    - Authorization: /authorize → /oidc/auth\n *    - Token: /token → /oidc/token\n *    - Callback: /callback → /oidc/callback\n *    - Well-known: /.well-known/oauth-authorization-server (unchanged)\n *\n * 4. Benefits of the new implementation:\n *    - Standards-compliant OIDC provider\n *    - Better security with proper OIDC flows\n *    - Automatic JWKS endpoint\n *    - Built-in token introspection\n *    - Support for ID tokens\n *    - Better integration with OIDC-compliant clients\n */\n"]}