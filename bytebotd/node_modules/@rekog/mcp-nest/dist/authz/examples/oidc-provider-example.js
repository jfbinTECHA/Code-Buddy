"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppModuleWithOidcProvider = void 0;
const common_1 = require("@nestjs/common");
const oidc_provider_module_1 = require("../oidc-provider.module");
const github_provider_1 = require("../providers/github.provider");
let AppModuleWithOidcProvider = class AppModuleWithOidcProvider {
};
exports.AppModuleWithOidcProvider = AppModuleWithOidcProvider;
exports.AppModuleWithOidcProvider = AppModuleWithOidcProvider = __decorate([
    (0, common_1.Module)({
        imports: [
            oidc_provider_module_1.McpOidcProviderModule.forRoot({
                clientId: process.env.GITHUB_CLIENT_ID,
                clientSecret: process.env.GITHUB_CLIENT_SECRET,
                jwtSecret: process.env.JWT_SECRET,
                serverUrl: process.env.SERVER_URL || 'https://localhost:3000',
                resource: process.env.RESOURCE_URL || 'https://localhost:3000/mcp',
                jwtIssuer: process.env.JWT_ISSUER || 'https://localhost:3000',
                jwtAudience: process.env.JWT_AUDIENCE || 'mcp-client',
                jwtAccessTokenExpiresIn: '1h',
                jwtRefreshTokenExpiresIn: '30d',
                cookieMaxAge: 24 * 60 * 60 * 1000,
                cookieSecure: process.env.NODE_ENV === 'production',
                oauthSessionExpiresIn: 10 * 60 * 1000,
                authCodeExpiresIn: 10 * 60 * 1000,
                provider: github_provider_1.GitHubOAuthProvider,
                apiPrefix: 'oidc',
                endpoints: {
                    wellKnownAuthorizationServerMetadata: '/.well-known/oauth-authorization-server',
                    register: '/reg',
                    authorize: '/auth',
                    callback: '/callback',
                    token: '/token',
                    validate: '/introspect',
                    revoke: '/revoke',
                },
                storeConfiguration: {
                    type: 'memory',
                },
            }),
        ],
    })
], AppModuleWithOidcProvider);
//# sourceMappingURL=oidc-provider-example.js.map