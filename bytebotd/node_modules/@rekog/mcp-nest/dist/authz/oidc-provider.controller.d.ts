import { Request, Response, NextFunction } from 'express';
import { AuthenticatedRequest } from './guards/jwt-auth.guard';
import { OAuthModuleOptions, OAuthUserProfile } from './providers/oauth-provider.interface';
import { ClientService } from './services/client.service';
import { JwtTokenService } from './services/jwt-token.service';
import { IOAuthStore } from './stores/oauth-store.interface';
interface GitHubAuthRequest extends Request {
    user?: {
        profile: OAuthUserProfile;
        accessToken: string;
        provider: string;
    };
}
export declare class OidcProviderController {
    private readonly oidcProvider;
    private readonly options;
    private readonly store;
    private readonly jwtTokenService;
    private readonly clientService;
    private readonly logger;
    constructor(oidcProvider: any, options: OAuthModuleOptions, store: IOAuthStore, jwtTokenService: JwtTokenService, clientService: ClientService);
    handleInteraction(uid: string, req: Request, res: Response, next: NextFunction): Promise<void>;
    handleGitHubCallback(req: GitHubAuthRequest, res: Response, next: NextFunction): void;
    private completeOidcInteraction;
    findAccount(_ctx: any, id: string): Promise<{
        accountId: string;
        claims(): Promise<{
            sub: string;
        }>;
    }>;
    registerClient(registrationDto: any): Promise<import("./stores/oauth-store.interface").OAuthClient>;
    validateToken(req: AuthenticatedRequest): {
        active: boolean;
        sub: string;
        client_id: string | undefined;
        scope: string | undefined;
        exp: number | undefined;
        iat: number | undefined;
        token_type: string;
    };
    getHealth(): {
        status: string;
        service: string;
        timestamp: string;
    };
}
export {};
//# sourceMappingURL=oidc-provider.controller.d.ts.map