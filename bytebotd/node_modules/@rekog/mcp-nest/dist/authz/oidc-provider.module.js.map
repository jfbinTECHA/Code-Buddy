{"version":3,"file":"oidc-provider.module.js","sourceRoot":"","sources":["../../src/authz/oidc-provider.module.ts"],"names":[],"mappings":"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","sourcesContent":["import { DynamicModule, Global, Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { OidcModule } from 'nest-oidc-provider';\nimport { McpAuthJwtGuard } from './guards/jwt-auth.guard';\nimport {\n  OAuthUserModuleOptions as AuthUserModuleOptions,\n  OAuthModuleDefaults,\n  OAuthModuleOptions,\n} from './providers/oauth-provider.interface';\nimport { ClientService } from './services/client.service';\nimport { JwtTokenService } from './services/jwt-token.service';\nimport { OAuthStrategyService } from './services/oauth-strategy.service';\nimport { MemoryStore } from './stores/memory-store.service';\nimport {\n  AuthorizationCodeEntity,\n  OAuthClientEntity,\n  OAuthSessionEntity,\n} from './stores/typeorm/entities';\nimport { TypeOrmStore } from './stores/typeorm/typeorm-store.service';\nimport { OidcProviderController } from './oidc-provider.controller';\nimport { ResourceMetadataController } from './controllers/resource-metadata.controller';\nimport { WellKnownController } from './controllers/well-known.controller';\nimport { GitHubAdapter } from './adapters/github.adapter';\nimport { OidcMemoryAdapter } from './adapters/oidc.adapter';\n\n// Default configuration values aligned with OIDC standards\nexport const DEFAULT_OIDC_OPTIONS: OAuthModuleDefaults = {\n  serverUrl: 'https://localhost:3000',\n  resource: 'https://localhost:3000/mcp',\n  jwtIssuer: 'https://localhost:3000',\n  jwtAudience: 'mcp-client',\n  jwtAccessTokenExpiresIn: '60s',\n  jwtRefreshTokenExpiresIn: '30d',\n  cookieMaxAge: 24 * 60 * 60 * 1000, // 24 hours\n  oauthSessionExpiresIn: 10 * 60 * 1000, // 10 minutes\n  authCodeExpiresIn: 10 * 60 * 1000, // 10 minutes\n  nodeEnv: 'development',\n  apiPrefix: 'oidc',\n  endpoints: {\n    wellKnownAuthorizationServerMetadata:\n      '/.well-known/oauth-authorization-server',\n    register: '/reg',\n    authorize: '/auth',\n    callback: '/callback',\n    token: '/token',\n    validate: '/introspect',\n    revoke: '/revoke',\n  },\n};\n\n@Global()\n@Module({})\nexport class McpOidcProviderModule {\n  static forRoot(options: AuthUserModuleOptions): DynamicModule {\n    // Merge user options with defaults and validate\n    const resolvedOptions = this.mergeAndValidateOptions(\n      DEFAULT_OIDC_OPTIONS,\n      options,\n    );\n\n    const oauthModuleOptions = {\n      provide: 'OAUTH_MODULE_OPTIONS',\n      useValue: resolvedOptions,\n    };\n\n    // Determine imports based on configuration\n    const imports = [\n      ConfigModule,\n      PassportModule.register({\n        defaultStrategy: 'jwt',\n        session: false,\n      }),\n      JwtModule.register({\n        secret: resolvedOptions.jwtSecret,\n        signOptions: {\n          issuer: resolvedOptions.jwtIssuer,\n          audience: resolvedOptions.jwtAudience,\n        },\n      }),\n      // Configure OIDC Provider\n      OidcModule.forRootAsync({\n        useFactory: async () => ({\n          issuer: resolvedOptions.serverUrl,\n          path: `/${resolvedOptions.apiPrefix}`,\n          oidc: {\n            // Core OIDC Provider configuration\n            clients: [\n              // Default MCP client for testing\n              {\n                client_id: 'mcp-client',\n                client_secret: 'mcp-client-secret',\n                redirect_uris: ['http://localhost:3000/callback'],\n                grant_types: ['authorization_code', 'refresh_token'],\n                response_types: ['code'],\n                token_endpoint_auth_method: 'client_secret_basic',\n                scope: 'openid profile email offline_access',\n              },\n            ],\n            pkce: {\n              methods: ['S256', 'plain'],\n              required: () => false, // Allow both PKCE and non-PKCE flows\n            },\n            features: {\n              devInteractions: { enabled: false },\n              deviceFlow: { enabled: false },\n              introspection: { enabled: true },\n              revocation: { enabled: true },\n              registration: { enabled: true },\n              userinfo: { enabled: true },\n            },\n            ttl: {\n              AccessToken: 3600, // 1 hour\n              AuthorizationCode: 600, // 10 minutes\n              IdToken: 3600, // 1 hour\n              RefreshToken: 1209600, // 2 weeks\n              Grant: 1209600, // 2 weeks\n            },\n            scopes: ['openid', 'profile', 'email', 'offline_access'],\n            responseTypes: ['code', 'id_token', 'code id_token'],\n            grantTypes: ['authorization_code', 'refresh_token'],\n            subjectTypes: ['public'],\n            tokenEndpointAuthMethods: [\n              'client_secret_basic',\n              'client_secret_post',\n              'none',\n            ],\n            // Custom adapter factory function\n            adapter: OidcMemoryAdapter.create,\n            // Account finder function\n            findAccount: GitHubAdapter.findAccount,\n            // Custom interaction handling for GitHub authentication\n            interactions: {\n              url: async (_ctx: any, interaction: any) => {\n                // For login interactions, redirect to our custom GitHub flow\n                if (interaction.prompt.name === 'login') {\n                  return `/oidc/interaction/${interaction.uid}`;\n                }\n                // For consent interactions, we can auto-approve or show custom consent\n                if (interaction.prompt.name === 'consent') {\n                  return `/oidc/interaction/${interaction.uid}`;\n                }\n                // Default interaction URL\n                return `/oidc/interaction/${interaction.uid}`;\n              },\n            },\n            // Custom claims\n            claims: {\n              openid: ['sub'],\n              profile: [\n                'name',\n                'family_name',\n                'given_name',\n                'preferred_username',\n              ],\n              email: ['email', 'email_verified'],\n            },\n            // Render error pages\n            renderError: async (ctx: any, _out: any, error: any) => {\n              ctx.type = 'html';\n              ctx.body = `\n                <html>\n                  <head><title>Authentication Error</title></head>\n                  <body>\n                    <h1>Authentication Error</h1>\n                    <p>${error.error_description || error.message}</p>\n                    <p><a href=\"/\">Return to application</a></p>\n                  </body>\n                </html>\n              `;\n            },\n          },\n        }),\n        inject: [], // No dependencies needed for the factory\n      }),\n    ];\n\n    // Add TypeORM configuration if using TypeORM store\n    const storeConfig = resolvedOptions.storeConfiguration;\n    const isTypeOrmStore = storeConfig?.type === 'typeorm';\n    if (storeConfig && storeConfig.type === 'typeorm') {\n      const typeormOptions = storeConfig.options;\n      imports.push(\n        TypeOrmModule.forRoot({\n          ...typeormOptions,\n          entities: [\n            ...((typeormOptions.entities || []) as any[]),\n            OAuthClientEntity,\n            AuthorizationCodeEntity,\n            OAuthSessionEntity,\n          ],\n        }),\n        TypeOrmModule.forFeature([\n          OAuthClientEntity,\n          AuthorizationCodeEntity,\n          OAuthSessionEntity,\n        ]),\n      );\n    }\n\n    // Create store provider based on configuration\n    const oauthStoreProvider = this.createStoreProvider(\n      resolvedOptions.storeConfiguration,\n    );\n\n    // Create alias for compatibility with injection\n    const oauthStoreAliasProvider = {\n      provide: MemoryStore,\n      useExisting: 'IOAuthStore',\n    };\n\n    const providers: any[] = [\n      oauthModuleOptions,\n      oauthStoreProvider,\n      oauthStoreAliasProvider,\n      OAuthStrategyService,\n      ClientService,\n      JwtTokenService,\n      McpAuthJwtGuard,\n      GitHubAdapter,\n    ];\n\n    // Add TypeOrmStore to providers if using TypeORM\n    if (isTypeOrmStore) {\n      providers.push(TypeOrmStore);\n    }\n\n    return {\n      module: McpOidcProviderModule,\n      imports,\n      controllers: [OidcProviderController, ResourceMetadataController, WellKnownController],\n      providers,\n      exports: [\n        JwtTokenService,\n        'IOAuthStore',\n        MemoryStore,\n        McpAuthJwtGuard,\n        OAuthStrategyService,\n        GitHubAdapter,\n      ],\n    };\n  }\n\n  private static mergeAndValidateOptions(\n    defaults: OAuthModuleDefaults,\n    options: AuthUserModuleOptions,\n  ): OAuthModuleOptions {\n    // Validate required options first\n    this.validateRequiredOptions(options);\n\n    // Merge with defaults\n    const resolvedOptions: OAuthModuleOptions = {\n      ...defaults,\n      ...options,\n      // Ensure jwtIssuer defaults to serverUrl if not provided\n      jwtIssuer:\n        options.jwtIssuer ||\n        options.serverUrl ||\n        DEFAULT_OIDC_OPTIONS.jwtIssuer,\n      cookieSecure:\n        options.cookieSecure || process.env.NODE_ENV === 'production',\n    };\n\n    // Final validation of resolved options\n    this.validateResolvedOptions(resolvedOptions);\n\n    return resolvedOptions;\n  }\n\n  private static validateRequiredOptions(options: AuthUserModuleOptions): void {\n    const requiredFields: (keyof AuthUserModuleOptions)[] = [\n      'provider',\n      'clientId',\n      'clientSecret',\n      'jwtSecret',\n    ];\n\n    for (const field of requiredFields) {\n      if (!options[field]) {\n        throw new Error(\n          `OidcProviderOptions: ${String(field)} is required and must be provided by the user`,\n        );\n      }\n    }\n  }\n\n  private static validateResolvedOptions(options: OAuthModuleOptions): void {\n    // Validate JWT secret is strong enough\n    if (options.jwtSecret.length < 32) {\n      throw new Error(\n        'OidcProviderOptions: jwtSecret must be at least 32 characters long',\n      );\n    }\n\n    // Validate URLs are proper format\n    try {\n      new URL(options.serverUrl);\n      new URL(options.jwtIssuer);\n    } catch (error) {\n      throw new Error(\n        'OidcProviderOptions: serverUrl and jwtIssuer must be valid URLs',\n      );\n    }\n\n    // Validate provider configuration\n    if (!options.provider.name || !options.provider.strategy) {\n      throw new Error(\n        'OidcProviderOptions: provider must have name and strategy',\n      );\n    }\n  }\n\n  private static createStoreProvider(\n    storeConfiguration: OAuthModuleOptions['storeConfiguration'],\n  ) {\n    if (!storeConfiguration || storeConfiguration.type === 'memory') {\n      // Default memory store\n      return {\n        provide: 'IOAuthStore',\n        useValue: new MemoryStore(),\n      };\n    }\n\n    if (storeConfiguration.type === 'typeorm') {\n      // TypeORM store\n      return {\n        provide: 'IOAuthStore',\n        useClass: TypeOrmStore,\n      };\n    }\n\n    if (storeConfiguration.type === 'custom') {\n      // Custom store\n      return {\n        provide: 'IOAuthStore',\n        useValue: storeConfiguration.store,\n      };\n    }\n\n    throw new Error(\n      `Unknown store configuration type: ${(storeConfiguration as any).type}`,\n    );\n  }\n}\n"]}