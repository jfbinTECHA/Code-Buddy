"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResourceMetadataController = void 0;
const common_1 = require("@nestjs/common");
let ResourceMetadataController = class ResourceMetadataController {
    constructor(options) {
        this.options = options;
    }
    getProtectedResourceMetadata() {
        return {
            resource: this.options.resource,
            authorization_server: this.options.serverUrl,
            scopes_supported: ['openid', 'profile', 'email', 'offline_access'],
            bearer_methods_supported: [
                'header',
                'body',
                'query',
            ],
            resource_documentation: `${this.options.serverUrl}/docs`,
            authorization_server_metadata_uri: `${this.options.serverUrl}/.well-known/oauth-authorization-server`,
            token_types_supported: ['Bearer'],
            capabilities: [
                'mcp-server',
                'tools',
                'resources',
                'prompts',
                'server-side-events',
                'streamable-http',
            ],
            api_version: '1.0',
            mcp_version: '2025-06-18',
            security_requirements: {
                oauth2: {
                    flows: {
                        authorizationCode: {
                            authorizationUrl: `${this.options.serverUrl}/oidc/auth`,
                            tokenUrl: `${this.options.serverUrl}/oidc/token`,
                            scopes: {
                                openid: 'OpenID Connect authentication',
                                profile: 'Access to user profile information',
                                email: 'Access to user email address',
                                offline_access: 'Refresh token for offline access',
                            },
                        },
                    },
                },
            },
        };
    }
    getResourceServerMetadata() {
        return this.getProtectedResourceMetadata();
    }
};
exports.ResourceMetadataController = ResourceMetadataController;
__decorate([
    (0, common_1.Get)('.well-known/oauth-protected-resource'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], ResourceMetadataController.prototype, "getProtectedResourceMetadata", null);
__decorate([
    (0, common_1.Get)('.well-known/resource-server'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], ResourceMetadataController.prototype, "getResourceServerMetadata", null);
exports.ResourceMetadataController = ResourceMetadataController = __decorate([
    (0, common_1.Controller)(),
    __param(0, (0, common_1.Inject)('OAUTH_MODULE_OPTIONS')),
    __metadata("design:paramtypes", [Object])
], ResourceMetadataController);
//# sourceMappingURL=resource-metadata.controller.js.map