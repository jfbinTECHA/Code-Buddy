"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WellKnownController = void 0;
const common_1 = require("@nestjs/common");
let WellKnownController = class WellKnownController {
    constructor(options) {
        this.options = options;
    }
    getAuthorizationServerMetadata() {
        return {
            issuer: this.options.serverUrl,
            authorization_endpoint: `${this.options.serverUrl}/oidc/auth`,
            token_endpoint: `${this.options.serverUrl}/oidc/token`,
            userinfo_endpoint: `${this.options.serverUrl}/oidc/me`,
            jwks_uri: `${this.options.serverUrl}/oidc/jwks`,
            registration_endpoint: `${this.options.serverUrl}/oidc/reg`,
            scopes_supported: [
                'openid',
                'profile',
                'email',
                'offline_access'
            ],
            response_types_supported: [
                'code',
                'id_token',
                'code id_token'
            ],
            grant_types_supported: [
                'authorization_code',
                'refresh_token'
            ],
            subject_types_supported: [
                'public'
            ],
            token_endpoint_auth_methods_supported: [
                'client_secret_basic',
                'client_secret_post',
                'none'
            ],
            code_challenge_methods_supported: [
                'plain',
                'S256'
            ],
            claims_supported: [
                'sub',
                'name',
                'preferred_username',
                'email',
                'email_verified'
            ],
            introspection_endpoint: `${this.options.serverUrl}/oidc/introspect`,
            revocation_endpoint: `${this.options.serverUrl}/oidc/revoke`,
            service_documentation: `${this.options.serverUrl}/docs`,
            end_session_endpoint: `${this.options.serverUrl}/oidc/session/end`,
            check_session_iframe: `${this.options.serverUrl}/oidc/session/check`,
            'x-mcp-capabilities': [
                'tools',
                'resources',
                'prompts',
                'server-side-events',
                'streamable-http'
            ],
            'x-mcp-version': '2024-11-05',
            'x-api-version': '1.0'
        };
    }
    getOpenIdConfiguration() {
        return {
            url: `/oidc/.well-known/openid_configuration`,
            statusCode: 302
        };
    }
    getOAuthAuthorizationServer() {
        return this.getAuthorizationServerMetadata();
    }
    getWebFinger() {
        return {
            subject: this.options.serverUrl,
            links: [
                {
                    rel: 'http://openid.net/specs/connect/1.0/issuer',
                    href: this.options.serverUrl
                }
            ]
        };
    }
};
exports.WellKnownController = WellKnownController;
__decorate([
    (0, common_1.Get)('.well-known/oauth-authorization-server'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], WellKnownController.prototype, "getAuthorizationServerMetadata", null);
__decorate([
    (0, common_1.Get)('.well-known/openid_configuration'),
    (0, common_1.Redirect)(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], WellKnownController.prototype, "getOpenIdConfiguration", null);
__decorate([
    (0, common_1.Get)('.well-known/oauth_authorization_server'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], WellKnownController.prototype, "getOAuthAuthorizationServer", null);
__decorate([
    (0, common_1.Get)('.well-known/webfinger'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], WellKnownController.prototype, "getWebFinger", null);
exports.WellKnownController = WellKnownController = __decorate([
    (0, common_1.Controller)(),
    __param(0, (0, common_1.Inject)('OAUTH_MODULE_OPTIONS')),
    __metadata("design:paramtypes", [Object])
], WellKnownController);
//# sourceMappingURL=well-known.controller.js.map