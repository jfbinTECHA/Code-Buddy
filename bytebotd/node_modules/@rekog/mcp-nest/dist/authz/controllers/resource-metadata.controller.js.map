{"version":3,"file":"resource-metadata.controller.js","sourceRoot":"","sources":["../../../src/authz/controllers/resource-metadata.controller.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,2CAAyD;AAWlD,IAAM,0BAA0B,GAAhC,MAAM,0BAA0B;IACrC,YAEmB,OAA2B;QAA3B,YAAO,GAAP,OAAO,CAAoB;IAC3C,CAAC;IAUJ,4BAA4B;QAC1B,OAAO;YAEL,QAAQ,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ;YAG/B,oBAAoB,EAAE,IAAI,CAAC,OAAO,CAAC,SAAS;YAG5C,gBAAgB,EAAE,CAAC,QAAQ,EAAE,SAAS,EAAE,OAAO,EAAE,gBAAgB,CAAC;YAGlE,wBAAwB,EAAE;gBACxB,QAAQ;gBACR,MAAM;gBACN,OAAO;aACR;YAGD,sBAAsB,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,OAAO;YAGxD,iCAAiC,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,yCAAyC;YAGrG,qBAAqB,EAAE,CAAC,QAAQ,CAAC;YAGjC,YAAY,EAAE;gBACZ,YAAY;gBACZ,OAAO;gBACP,WAAW;gBACX,SAAS;gBACT,oBAAoB;gBACpB,iBAAiB;aAClB;YAGD,WAAW,EAAE,KAAK;YAClB,WAAW,EAAE,YAAY;YAGzB,qBAAqB,EAAE;gBACrB,MAAM,EAAE;oBACN,KAAK,EAAE;wBACL,iBAAiB,EAAE;4BACjB,gBAAgB,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,YAAY;4BACvD,QAAQ,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,aAAa;4BAChD,MAAM,EAAE;gCACN,MAAM,EAAE,+BAA+B;gCACvC,OAAO,EAAE,oCAAoC;gCAC7C,KAAK,EAAE,8BAA8B;gCACrC,cAAc,EAAE,kCAAkC;6BACnD;yBACF;qBACF;iBACF;aACF;SACF,CAAC;IACJ,CAAC;IAOD,yBAAyB;QACvB,OAAO,IAAI,CAAC,4BAA4B,EAAE,CAAC;IAC7C,CAAC;CACF,CAAA;AAnFY,gEAA0B;AAcrC;IADC,IAAA,YAAG,EAAC,sCAAsC,CAAC;;;;8EA4D3C;AAOD;IADC,IAAA,YAAG,EAAC,6BAA6B,CAAC;;;;2EAGlC;qCAlFU,0BAA0B;IADtC,IAAA,mBAAU,GAAE;IAGR,WAAA,IAAA,eAAM,EAAC,sBAAsB,CAAC,CAAA;;GAFtB,0BAA0B,CAmFtC","sourcesContent":["import { Controller, Get, Inject } from '@nestjs/common';\nimport { OAuthModuleOptions } from '../providers/oauth-provider.interface';\n\n/**\n * OAuth Protected Resource Metadata Controller\n *\n * Implements RFC 8705 - OAuth 2.0 Resource Server Metadata\n * This endpoint describes the protected resource (MCP server) and points\n * to the authorization server that protects it.\n */\n@Controller()\nexport class ResourceMetadataController {\n  constructor(\n    @Inject('OAUTH_MODULE_OPTIONS')\n    private readonly options: OAuthModuleOptions,\n  ) {}\n\n  /**\n   * OAuth Protected Resource Metadata Endpoint\n   * GET /.well-known/oauth-protected-resource\n   *\n   * This endpoint provides metadata about the protected resource (MCP server)\n   * including the authorization server that protects it.\n   */\n  @Get('.well-known/oauth-protected-resource')\n  getProtectedResourceMetadata() {\n    return {\n      // The resource identifier - this is your MCP server\n      resource: this.options.resource,\n\n      // The authorization server that protects this resource\n      authorization_server: this.options.serverUrl,\n\n      // Additional metadata about the protected resource\n      scopes_supported: ['openid', 'profile', 'email', 'offline_access'],\n\n      // Bearer token methods supported\n      bearer_methods_supported: [\n        'header', // Authorization: Bearer <token>\n        'body', // access_token in request body\n        'query', // access_token as query parameter\n      ],\n\n      // Indicate that this resource supports RFC 7662 token introspection\n      resource_documentation: `${this.options.serverUrl}/docs`,\n\n      // Additional OAuth 2.0 Resource Server metadata\n      authorization_server_metadata_uri: `${this.options.serverUrl}/.well-known/oauth-authorization-server`,\n\n      // Supported token types\n      token_types_supported: ['Bearer'],\n\n      // Resource server capabilities\n      capabilities: [\n        'mcp-server', // This is an MCP (Model Context Protocol) server\n        'tools', // Supports MCP tools\n        'resources', // Supports MCP resources\n        'prompts', // Supports MCP prompts\n        'server-side-events', // Supports SSE transport\n        'streamable-http', // Supports streamable HTTP transport\n      ],\n\n      // API version information\n      api_version: '1.0',\n      mcp_version: '2025-06-18',\n\n      // Security requirements\n      security_requirements: {\n        oauth2: {\n          flows: {\n            authorizationCode: {\n              authorizationUrl: `${this.options.serverUrl}/oidc/auth`,\n              tokenUrl: `${this.options.serverUrl}/oidc/token`,\n              scopes: {\n                openid: 'OpenID Connect authentication',\n                profile: 'Access to user profile information',\n                email: 'Access to user email address',\n                offline_access: 'Refresh token for offline access',\n              },\n            },\n          },\n        },\n      },\n    };\n  }\n\n  /**\n   * Alternative endpoint for OAuth Resource Server Metadata\n   * Some clients may look for this alternative path\n   */\n  @Get('.well-known/resource-server')\n  getResourceServerMetadata() {\n    return this.getProtectedResourceMetadata();\n  }\n}\n"]}