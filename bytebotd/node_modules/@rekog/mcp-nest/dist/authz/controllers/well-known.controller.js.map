{"version":3,"file":"well-known.controller.js","sourceRoot":"","sources":["../../../src/authz/controllers/well-known.controller.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,2CAAmE;AAU5D,IAAM,mBAAmB,GAAzB,MAAM,mBAAmB;IAC9B,YACmD,OAA2B;QAA3B,YAAO,GAAP,OAAO,CAAoB;IAC3E,CAAC;IASJ,8BAA8B;QAC5B,OAAO;YACL,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,SAAS;YAC9B,sBAAsB,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,YAAY;YAC7D,cAAc,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,aAAa;YACtD,iBAAiB,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,UAAU;YACtD,QAAQ,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,YAAY;YAC/C,qBAAqB,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,WAAW;YAC3D,gBAAgB,EAAE;gBAChB,QAAQ;gBACR,SAAS;gBACT,OAAO;gBACP,gBAAgB;aACjB;YACD,wBAAwB,EAAE;gBACxB,MAAM;gBACN,UAAU;gBACV,eAAe;aAChB;YACD,qBAAqB,EAAE;gBACrB,oBAAoB;gBACpB,eAAe;aAChB;YACD,uBAAuB,EAAE;gBACvB,QAAQ;aACT;YACD,qCAAqC,EAAE;gBACrC,qBAAqB;gBACrB,oBAAoB;gBACpB,MAAM;aACP;YACD,gCAAgC,EAAE;gBAChC,OAAO;gBACP,MAAM;aACP;YACD,gBAAgB,EAAE;gBAChB,KAAK;gBACL,MAAM;gBACN,oBAAoB;gBACpB,OAAO;gBACP,gBAAgB;aACjB;YAED,sBAAsB,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,kBAAkB;YACnE,mBAAmB,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,cAAc;YAC5D,qBAAqB,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,OAAO;YAGvD,oBAAoB,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,mBAAmB;YAClE,oBAAoB,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,qBAAqB;YAGpE,oBAAoB,EAAE;gBACpB,OAAO;gBACP,WAAW;gBACX,SAAS;gBACT,oBAAoB;gBACpB,iBAAiB;aAClB;YACD,eAAe,EAAE,YAAY;YAC7B,eAAe,EAAE,KAAK;SACvB,CAAC;IACJ,CAAC;IAUD,sBAAsB;QACpB,OAAO;YACL,GAAG,EAAE,wCAAwC;YAC7C,UAAU,EAAE,GAAG;SAChB,CAAC;IACJ,CAAC;IAMD,2BAA2B;QACzB,OAAO,IAAI,CAAC,8BAA8B,EAAE,CAAC;IAC/C,CAAC;IAOD,YAAY;QACV,OAAO;YACL,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,SAAS;YAC/B,KAAK,EAAE;gBACL;oBACE,GAAG,EAAE,4CAA4C;oBACjD,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,SAAS;iBAC7B;aACF;SACF,CAAC;IACJ,CAAC;CACF,CAAA;AAnHY,kDAAmB;AAY9B;IADC,IAAA,YAAG,EAAC,wCAAwC,CAAC;;;;yEA+D7C;AAUD;IAFC,IAAA,YAAG,EAAC,kCAAkC,CAAC;IACvC,IAAA,iBAAQ,GAAE;;;;iEAMV;AAMD;IADC,IAAA,YAAG,EAAC,wCAAwC,CAAC;;;;sEAG7C;AAOD;IADC,IAAA,YAAG,EAAC,uBAAuB,CAAC;;;;uDAW5B;8BAlHU,mBAAmB;IAD/B,IAAA,mBAAU,GAAE;IAGR,WAAA,IAAA,eAAM,EAAC,sBAAsB,CAAC,CAAA;;GAFtB,mBAAmB,CAmH/B","sourcesContent":["import { Controller, Get, Inject, Redirect } from '@nestjs/common';\nimport { OAuthModuleOptions } from '../providers/oauth-provider.interface';\n\n/**\n * Root Well-Known Endpoints Controller\n * \n * Handles OAuth 2.0 and OIDC well-known endpoints at the root level\n * as required by RFC 8414 and RFC 8623\n */\n@Controller()\nexport class WellKnownController {\n  constructor(\n    @Inject('OAUTH_MODULE_OPTIONS') private readonly options: OAuthModuleOptions,\n  ) {}\n\n  /**\n   * OAuth Authorization Server Metadata Endpoint (RFC 8414)\n   * MUST be at /.well-known/oauth-authorization-server (not prefixed)\n   * \n   * This returns the same metadata as the OIDC provider but at the correct root path\n   */\n  @Get('.well-known/oauth-authorization-server')\n  getAuthorizationServerMetadata() {\n    return {\n      issuer: this.options.serverUrl,\n      authorization_endpoint: `${this.options.serverUrl}/oidc/auth`,\n      token_endpoint: `${this.options.serverUrl}/oidc/token`,\n      userinfo_endpoint: `${this.options.serverUrl}/oidc/me`,\n      jwks_uri: `${this.options.serverUrl}/oidc/jwks`,\n      registration_endpoint: `${this.options.serverUrl}/oidc/reg`,\n      scopes_supported: [\n        'openid',\n        'profile',\n        'email',\n        'offline_access'\n      ],\n      response_types_supported: [\n        'code',\n        'id_token',\n        'code id_token'\n      ],\n      grant_types_supported: [\n        'authorization_code',\n        'refresh_token'\n      ],\n      subject_types_supported: [\n        'public'\n      ],\n      token_endpoint_auth_methods_supported: [\n        'client_secret_basic',\n        'client_secret_post',\n        'none'\n      ],\n      code_challenge_methods_supported: [\n        'plain',\n        'S256'\n      ],\n      claims_supported: [\n        'sub',\n        'name',\n        'preferred_username',\n        'email',\n        'email_verified'\n      ],\n      // Additional OAuth 2.0 Authorization Server metadata\n      introspection_endpoint: `${this.options.serverUrl}/oidc/introspect`,\n      revocation_endpoint: `${this.options.serverUrl}/oidc/revoke`,\n      service_documentation: `${this.options.serverUrl}/docs`,\n      \n      // OIDC-specific metadata\n      end_session_endpoint: `${this.options.serverUrl}/oidc/session/end`,\n      check_session_iframe: `${this.options.serverUrl}/oidc/session/check`,\n      \n      // MCP-specific extensions (non-standard but useful)\n      'x-mcp-capabilities': [\n        'tools',\n        'resources', \n        'prompts',\n        'server-side-events',\n        'streamable-http'\n      ],\n      'x-mcp-version': '2024-11-05',\n      'x-api-version': '1.0'\n    };\n  }\n\n  /**\n   * OpenID Connect Discovery Document (RFC 8414 Section 3)\n   * Should be at /.well-known/openid_configuration \n   * \n   * We redirect to the OIDC provider's discovery endpoint\n   */\n  @Get('.well-known/openid_configuration')\n  @Redirect()\n  getOpenIdConfiguration() {\n    return {\n      url: `/oidc/.well-known/openid_configuration`,\n      statusCode: 302\n    };\n  }\n\n  /**\n   * Alternative OAuth Discovery endpoint (some implementations check here)\n   */\n  @Get('.well-known/oauth_authorization_server')\n  getOAuthAuthorizationServer() {\n    return this.getAuthorizationServerMetadata();\n  }\n\n  /**\n   * WebFinger endpoint for OpenID Connect Discovery (RFC 7033)\n   * Some clients use this for discovery\n   */\n  @Get('.well-known/webfinger')\n  getWebFinger() {\n    return {\n      subject: this.options.serverUrl,\n      links: [\n        {\n          rel: 'http://openid.net/specs/connect/1.0/issuer',\n          href: this.options.serverUrl\n        }\n      ]\n    };\n  }\n}"]}