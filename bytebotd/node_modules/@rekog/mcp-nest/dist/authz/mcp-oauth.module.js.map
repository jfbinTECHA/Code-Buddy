{"version":3,"file":"mcp-oauth.module.js","sourceRoot":"","sources":["../../src/authz/mcp-oauth.module.ts"],"names":[],"mappings":"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","sourcesContent":["import { DynamicModule, Global, Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { McpAuthJwtGuard } from './guards/jwt-auth.guard';\nimport { createMcpOAuthController } from './mcp-oauth.controller';\nimport {\n  OAuthUserModuleOptions as AuthUserModuleOptions,\n  OAuthEndpointConfiguration,\n  OAuthModuleDefaults,\n  OAuthModuleOptions,\n} from './providers/oauth-provider.interface';\nimport { ClientService } from './services/client.service';\nimport { JwtTokenService } from './services/jwt-token.service';\nimport { OAuthStrategyService } from './services/oauth-strategy.service';\nimport { MemoryStore } from './stores/memory-store.service';\nimport { normalizeEndpoint } from '../mcp/utils/normalize-endpoint';\nimport { OAUTH_TYPEORM_CONNECTION_NAME } from './stores/typeorm/constants';\n\n// Default configuration values\nexport const DEFAULT_OPTIONS: OAuthModuleDefaults = {\n  serverUrl: 'http://localhost:3000',\n  resource: 'http://localhost:3000/mcp',\n  jwtIssuer: 'http://localhost:3000',\n  jwtAudience: 'mcp-client',\n  jwtAccessTokenExpiresIn: '1d',\n  jwtRefreshTokenExpiresIn: '30d',\n  enableRefreshTokens: true,\n  cookieMaxAge: 24 * 60 * 60 * 1000, // 24 hours\n  oauthSessionExpiresIn: 10 * 60 * 1000, // 10 minutes\n  authCodeExpiresIn: 10 * 60 * 1000, // 10 minutes\n  nodeEnv: 'development',\n  apiPrefix: '',\n  endpoints: {\n    wellKnownAuthorizationServerMetadata:\n      '/.well-known/oauth-authorization-server',\n    wellKnownProtectedResourceMetadata: '/.well-known/oauth-protected-resource',\n    register: '/register',\n    authorize: '/authorize',\n    callback: '/callback',\n    token: '/token',\n    revoke: '/revoke',\n  },\n  disableEndpoints: {\n    wellKnownAuthorizationServerMetadata: false,\n    wellKnownProtectedResourceMetadata: false,\n  },\n  protectedResourceMetadata: {\n    scopesSupported: ['offline_access'],\n    bearerMethodsSupported: ['header'],\n    mcpVersionsSupported: ['2025-06-18'],\n  },\n  authorizationServerMetadata: {\n    responseTypesSupported: ['code'],\n    responseModesSupported: ['query'],\n    grantTypesSupported: ['authorization_code', 'refresh_token'],\n    tokenEndpointAuthMethodsSupported: [\n      'client_secret_basic',\n      'client_secret_post',\n      'none',\n    ],\n    scopesSupported: ['offline_access'],\n    codeChallengeMethodsSupported: ['plain', 'S256'],\n  },\n};\n\n@Global()\n@Module({})\nexport class McpAuthModule {\n  static forRoot(options: AuthUserModuleOptions): DynamicModule {\n    // Merge user options with defaults and validate\n    const resolvedOptions = this.mergeAndValidateOptions(\n      DEFAULT_OPTIONS,\n      options,\n    );\n\n    resolvedOptions.endpoints = prepareEndpoints(\n      resolvedOptions.apiPrefix,\n      DEFAULT_OPTIONS.endpoints,\n      options.endpoints || {},\n    );\n    const oauthModuleOptions = {\n      provide: 'OAUTH_MODULE_OPTIONS',\n      useValue: resolvedOptions,\n    };\n\n    // Determine imports based on configuration\n    const imports = [\n      ConfigModule,\n      PassportModule.register({\n        defaultStrategy: 'jwt',\n        session: false,\n      }),\n      JwtModule.register({\n        secret: resolvedOptions.jwtSecret,\n        signOptions: {\n          issuer: resolvedOptions.jwtIssuer,\n          audience: resolvedOptions.jwtAudience,\n        },\n      }),\n    ];\n\n    // Add TypeORM configuration if using TypeORM store\n    const storeConfig = resolvedOptions.storeConfiguration;\n    const isTypeOrmStore = storeConfig?.type === 'typeorm';\n    if (isTypeOrmStore) {\n      const typeormOptions = storeConfig.options;\n      try {\n        // Require TypeORM-related modules only when needed\n        // eslint-disable-next-line @typescript-eslint/no-require-imports\n        const { TypeOrmModule } = require('@nestjs/typeorm');\n        const {\n          OAuthClientEntity,\n          AuthorizationCodeEntity,\n          OAuthSessionEntity,\n          OAuthUserProfileEntity,\n          // eslint-disable-next-line @typescript-eslint/no-require-imports\n        } = require('./stores/typeorm/entities');\n\n        imports.push(\n          TypeOrmModule.forRoot({\n            ...typeormOptions,\n            // Use a unique connection name for the OAuth store to avoid clashes\n            name: OAUTH_TYPEORM_CONNECTION_NAME,\n            entities: [\n              OAuthClientEntity,\n              AuthorizationCodeEntity,\n              OAuthSessionEntity,\n              OAuthUserProfileEntity,\n            ],\n          }),\n          TypeOrmModule.forFeature(\n            [\n              OAuthClientEntity,\n              AuthorizationCodeEntity,\n              OAuthSessionEntity,\n              OAuthUserProfileEntity,\n            ],\n            OAUTH_TYPEORM_CONNECTION_NAME,\n          ),\n        );\n      } catch (err) {\n        throw new Error(\n          \"To use the TypeORM store, please install '@nestjs/typeorm' and 'typeorm'.\",\n        );\n      }\n    }\n\n    // Create store provider based on configuration\n    const oauthStoreProvider = this.createStoreProvider(\n      resolvedOptions.storeConfiguration,\n    );\n\n    // Create alias for compatibility with injection\n    const oauthStoreAliasProvider = {\n      provide: MemoryStore,\n      useExisting: 'IOAuthStore',\n    };\n\n    const providers: any[] = [\n      oauthModuleOptions,\n      oauthStoreProvider,\n      oauthStoreAliasProvider,\n      OAuthStrategyService,\n      ClientService,\n      JwtTokenService,\n      McpAuthJwtGuard,\n    ];\n\n    // No additional providers needed for TypeORM store - provider is created dynamically\n\n    // Create controller with apiPrefix\n    const OAuthControllerClass = createMcpOAuthController(\n      resolvedOptions.endpoints,\n      {\n        disableWellKnownAuthorizationServerMetadata:\n          resolvedOptions.disableEndpoints\n            .wellKnownAuthorizationServerMetadata ?? false,\n        disableWellKnownProtectedResourceMetadata:\n          resolvedOptions.disableEndpoints.wellKnownProtectedResourceMetadata ??\n          false,\n      },\n    );\n\n    return {\n      module: McpAuthModule,\n      imports,\n      controllers: [OAuthControllerClass],\n      providers,\n      exports: [\n        JwtTokenService,\n        'IOAuthStore',\n        MemoryStore,\n        McpAuthJwtGuard,\n        OAuthStrategyService,\n      ],\n    };\n  }\n\n  private static mergeAndValidateOptions(\n    defaults: OAuthModuleDefaults,\n    options: AuthUserModuleOptions,\n  ): OAuthModuleOptions {\n    // Validate required options first\n    this.validateRequiredOptions(options);\n\n    // Merge with defaults\n    const resolvedOptions: OAuthModuleOptions = {\n      ...defaults,\n      ...options,\n      // Ensure jwtIssuer defaults to serverUrl if not provided\n      jwtIssuer:\n        options.jwtIssuer || options.serverUrl || DEFAULT_OPTIONS.jwtIssuer,\n      cookieSecure:\n        options.cookieSecure || process.env.NODE_ENV === 'production',\n      // Merge protectedResourceMetadata with defaults\n      protectedResourceMetadata: {\n        ...defaults.protectedResourceMetadata,\n        ...options.protectedResourceMetadata,\n      },\n      // Merge authorizationServerMetadata with defaults\n      authorizationServerMetadata: {\n        ...defaults.authorizationServerMetadata,\n        ...options.authorizationServerMetadata,\n      },\n      // Merge disableEndpoints with defaults\n      disableEndpoints: {\n        ...defaults.disableEndpoints,\n        ...(options.disableEndpoints || {}),\n      },\n    };\n\n    if (!resolvedOptions.enableRefreshTokens) {\n      resolvedOptions.authorizationServerMetadata.grantTypesSupported =\n        resolvedOptions.authorizationServerMetadata.grantTypesSupported.filter(\n          (g) => g !== 'refresh_token',\n        );\n      resolvedOptions.protectedResourceMetadata.scopesSupported =\n        resolvedOptions.protectedResourceMetadata.scopesSupported.filter(\n          (s) => s !== 'offline_access',\n        );\n    }\n\n    // Final validation of resolved options\n    this.validateResolvedOptions(resolvedOptions);\n\n    return resolvedOptions;\n  }\n\n  private static validateRequiredOptions(options: AuthUserModuleOptions): void {\n    const requiredFields: (keyof AuthUserModuleOptions)[] = [\n      'provider',\n      'clientId',\n      'clientSecret',\n      'jwtSecret',\n    ];\n\n    for (const field of requiredFields) {\n      if (!options[field]) {\n        throw new Error(\n          `OAuthModuleOptions: ${String(field)} is required and must be provided by the user`,\n        );\n      }\n    }\n  }\n\n  private static validateResolvedOptions(options: OAuthModuleOptions): void {\n    // Validate JWT secret is strong enough\n    if (options.jwtSecret.length < 32) {\n      throw new Error(\n        'OAuthModuleOptions: jwtSecret must be at least 32 characters long',\n      );\n    }\n\n    // Validate URLs are proper format\n    try {\n      new URL(options.serverUrl);\n      new URL(options.jwtIssuer);\n    } catch {\n      throw new Error(\n        'OAuthModuleOptions: serverUrl and jwtIssuer must be valid URLs',\n      );\n    }\n\n    // Validate provider configuration\n    if (!options.provider.name || !options.provider.strategy) {\n      throw new Error(\n        'OAuthModuleOptions: provider must have name and strategy',\n      );\n    }\n  }\n\n  private static createStoreProvider(\n    storeConfiguration: OAuthModuleOptions['storeConfiguration'],\n  ) {\n    if (!storeConfiguration || storeConfiguration.type === 'memory') {\n      // Default memory store\n      return {\n        provide: 'IOAuthStore',\n        useValue: new MemoryStore(),\n      };\n    }\n\n    if (storeConfiguration.type === 'typeorm') {\n      // TypeORM store\n      const {\n        TypeOrmStore,\n        // eslint-disable-next-line @typescript-eslint/no-require-imports\n      } = require('./stores/typeorm/typeorm-store.service');\n      return {\n        provide: 'IOAuthStore',\n        useClass: TypeOrmStore,\n      };\n    }\n\n    if (storeConfiguration.type === 'custom') {\n      // Custom store\n      return {\n        provide: 'IOAuthStore',\n        useValue: storeConfiguration.store,\n      };\n    }\n\n    throw new Error(\n      `Unknown store configuration type: ${(storeConfiguration as any).type}`,\n    );\n  }\n}\n\nfunction prepareEndpoints(\n  apiPrefix: string,\n  defaultEndpoints: OAuthEndpointConfiguration,\n  configuredEndpoints: OAuthEndpointConfiguration,\n) {\n  const updatedDefaultEndpoints = {\n    wellKnownAuthorizationServerMetadata:\n      defaultEndpoints.wellKnownAuthorizationServerMetadata,\n    wellKnownProtectedResourceMetadata:\n      defaultEndpoints.wellKnownProtectedResourceMetadata,\n    callback: normalizeEndpoint(`/${apiPrefix}/${defaultEndpoints.callback}`),\n    token: normalizeEndpoint(`/${apiPrefix}/${defaultEndpoints.token}`),\n    revoke: normalizeEndpoint(`/${apiPrefix}/${defaultEndpoints.revoke}`),\n    authorize: normalizeEndpoint(`/${apiPrefix}/${defaultEndpoints.authorize}`),\n    register: normalizeEndpoint(`/${apiPrefix}/${defaultEndpoints.register}`),\n  } as OAuthEndpointConfiguration;\n\n  return {\n    ...updatedDefaultEndpoints,\n    ...configuredEndpoints,\n  };\n}\n"]}