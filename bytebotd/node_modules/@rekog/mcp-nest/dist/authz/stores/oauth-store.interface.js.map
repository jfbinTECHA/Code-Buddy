{"version":3,"file":"oauth-store.interface.js","sourceRoot":"","sources":["../../../src/authz/stores/oauth-store.interface.ts"],"names":[],"mappings":"","sourcesContent":["import {\n  OAuthSession,\n  OAuthUserProfile,\n} from '../providers/oauth-provider.interface';\n\nexport interface OAuthClient {\n  client_id: string;\n  client_secret?: string;\n  client_name: string;\n  client_description?: string;\n  logo_uri?: string;\n  client_uri?: string;\n  developer_name?: string;\n  developer_email?: string;\n  redirect_uris: string[];\n  grant_types: string[];\n  response_types: string[];\n  token_endpoint_auth_method: string;\n  created_at: Date;\n  updated_at: Date;\n}\n\nexport interface AuthorizationCode {\n  code: string;\n  user_id: string;\n  client_id: string;\n  redirect_uri: string;\n  code_challenge: string;\n  code_challenge_method: string;\n  resource?: string;\n  scope?: string;\n  expires_at: number;\n  used_at?: Date;\n  // Link to stored user profile (if available)\n  user_profile_id?: string;\n}\n\nexport interface ClientRegistrationDto {\n  client_name: string;\n  client_description?: string;\n  logo_uri?: string;\n  client_uri?: string;\n  developer_name?: string;\n  developer_email?: string;\n  redirect_uris: string[];\n  grant_types?: string[];\n  response_types?: string[];\n  token_endpoint_auth_method?: string;\n}\n\n/**\n * Interface for OAuth store implementations.\n *\n * Implement this interface to create custom storage solutions (e.g., Redis, Database, etc.).\n * The default implementation is an in-memory store suitable for development.\n *\n * @example\n * ```typescript\n * class RedisOAuthStore implements IOAuthStore {\n *   constructor(private redisClient: RedisClient) {}\n *\n *   async storeClient(client: OAuthClient): Promise<void> {\n *     await this.redisClient.set(`client:${client.client_id}`, JSON.stringify(client));\n *   }\n *\n *   async getClient(client_id: string): Promise<OAuthClient | undefined> {\n *     const data = await this.redisClient.get(`client:${client_id}`);\n *     return data ? JSON.parse(data) : undefined;\n *   }\n *\n *   async findClient(client_name: string): Promise<OAuthClient | undefined> {\n *     const data = await this.redisClient.get(`client_name:${client_name}`);\n *     return data ? JSON.parse(data) : undefined;\n *   }\n *\n *   generateClientId(client: OAuthClient): string {\n *     // Custom client ID generation logic\n *     const normalizedName = client.client_name.toLowerCase().replace(/[^a-z0-9]/g, '');\n *     const timestamp = Date.now().toString(36);\n *     return `${normalizedName}_${timestamp}`;\n *   }\n *\n *   // ... implement other methods\n * }\n *\n * // Usage in module:\n * McpOAuthModule.forRoot({\n *   provider: GoogleOAuthProvider,\n *   clientId: process.env.GOOGLE_CLIENT_ID!,\n *   clientSecret: process.env.GOOGLE_CLIENT_SECRET!,\n *   jwtSecret: process.env.JWT_SECRET!,\n *   memoryStore: new RedisOAuthStore(redisClient), // Custom implementation\n * })\n * ```\n */\nexport interface IOAuthStore {\n  // Client management\n  storeClient(client: OAuthClient): Promise<OAuthClient>;\n  getClient(client_id: string): Promise<OAuthClient | undefined>;\n  findClient(client_name: string): Promise<OAuthClient | undefined>;\n  generateClientId(client: OAuthClient): string;\n\n  // Authorization code management\n  storeAuthCode(code: AuthorizationCode): Promise<void>;\n  getAuthCode(code: string): Promise<AuthorizationCode | undefined>;\n  removeAuthCode(code: string): Promise<void>;\n\n  // OAuth session management\n  storeOAuthSession(sessionId: string, session: OAuthSession): Promise<void>;\n  getOAuthSession(sessionId: string): Promise<OAuthSession | undefined>;\n  removeOAuthSession(sessionId: string): Promise<void>;\n\n  // User profile management\n  /**\n   * Upsert a user profile from an OAuth provider and return a stable profile_id.\n   * The profile_id should be stable across logins for the same provider+user.\n   */\n  upsertUserProfile(\n    profile: OAuthUserProfile,\n    provider: string,\n  ): Promise<string>;\n\n  /** Retrieve a stored user profile by its profile_id */\n  getUserProfileById(\n    profileId: string,\n  ): Promise<\n    (OAuthUserProfile & { profile_id: string; provider: string }) | undefined\n  >;\n}\n"]}