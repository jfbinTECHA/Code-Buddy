{"version":3,"file":"memory-store.service.spec.js","sourceRoot":"","sources":["../../../src/authz/stores/memory-store.service.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { MemoryStore } from './memory-store.service';\nimport { OAuthClient, AuthorizationCode } from './oauth-store.interface';\nimport { OAuthSession } from '../providers/oauth-provider.interface';\n\ndescribe('MemoryStore', () => {\n  let service: MemoryStore;\n\n  beforeEach(async () => {\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [MemoryStore],\n    }).compile();\n\n    service = module.get<MemoryStore>(MemoryStore);\n  });\n\n  it('should be defined', () => {\n    expect(service).toBeDefined();\n  });\n\n  describe('generateClientId', () => {\n    it('should generate consistent client IDs for identical objects', () => {\n      const client1: Partial<OAuthClient> = {\n        client_name: 'MCP Inspector',\n        client_uri: 'https://github.com/modelcontextprotocol/inspector',\n        redirect_uris: ['http://localhost:6274/oauth/callback'],\n        token_endpoint_auth_method: 'none',\n        grant_types: ['authorization_code', 'refresh_token'],\n        response_types: ['code'],\n      };\n\n      const client2: Partial<OAuthClient> = {\n        client_name: 'MCP Inspector',\n        client_uri: 'https://github.com/modelcontextprotocol/inspector',\n        redirect_uris: ['http://localhost:6274/oauth/callback'],\n        token_endpoint_auth_method: 'none',\n        grant_types: ['authorization_code', 'refresh_token'],\n        response_types: ['code'],\n      };\n\n      const id1 = service.generateClientId(client1 as OAuthClient);\n      const id2 = service.generateClientId(client2 as OAuthClient);\n\n      expect(id1).toBe(id2);\n    });\n\n    it('should generate consistent client IDs regardless of property order', () => {\n      // First object with properties in one order\n      const clientJson1 = `{\n        \"client_name\": \"MCP Inspector\",\n        \"client_uri\": \"https://github.com/modelcontextprotocol/inspector\",\n        \"redirect_uris\": [\"http://localhost:6274/oauth/callback\"],\n        \"token_endpoint_auth_method\": \"none\",\n        \"grant_types\": [\"authorization_code\", \"refresh_token\"],\n        \"response_types\": [\"code\"]\n      }`;\n\n      // Second object with properties in different order\n      const clientJson2 = `{\n        \"response_types\": [\"code\"],\n        \"grant_types\": [\"authorization_code\", \"refresh_token\"],\n        \"token_endpoint_auth_method\": \"none\",\n        \"redirect_uris\": [\"http://localhost:6274/oauth/callback\"],\n        \"client_uri\": \"https://github.com/modelcontextprotocol/inspector\",\n        \"client_name\": \"MCP Inspector\"\n      }`;\n\n      const client1 = JSON.parse(clientJson1) as OAuthClient;\n      const client2 = JSON.parse(clientJson2) as OAuthClient;\n\n      const id1 = service.generateClientId(client1);\n      const id2 = service.generateClientId(client2);\n\n      expect(id1).toBe(id2);\n    });\n\n    it('should generate consistent client IDs regardless of array order', () => {\n      // First object with arrays in one order\n      const clientJson1 = `{\n        \"client_name\": \"MCP Inspector\",\n        \"client_uri\": \"https://github.com/modelcontextprotocol/inspector\",\n        \"redirect_uris\": [\n          \"http://localhost:6274/oauth/callback\",\n          \"http://localhost:8080/callback\",\n          \"http://127.0.0.1:3000/auth\"\n        ],\n        \"token_endpoint_auth_method\": \"none\",\n        \"grant_types\": [\n          \"authorization_code\",\n          \"refresh_token\",\n          \"client_credentials\"\n        ],\n        \"response_types\": [\"code\", \"token\"]\n      }`;\n\n      // Second object with arrays in different order\n      const clientJson2 = `{\n        \"client_name\": \"MCP Inspector\",\n        \"client_uri\": \"https://github.com/modelcontextprotocol/inspector\",\n        \"redirect_uris\": [\n          \"http://127.0.0.1:3000/auth\",\n          \"http://localhost:6274/oauth/callback\",\n          \"http://localhost:8080/callback\"\n        ],\n        \"token_endpoint_auth_method\": \"none\",\n        \"grant_types\": [\"client_credentials\", \"authorization_code\", \"refresh_token\"],\n        \"response_types\": [\"token\", \"code\"]\n      }`;\n\n      const client1 = JSON.parse(clientJson1) as OAuthClient;\n      const client2 = JSON.parse(clientJson2) as OAuthClient;\n\n      const id1 = service.generateClientId(client1);\n      const id2 = service.generateClientId(client2);\n\n      expect(id1).toBe(id2);\n    });\n\n    it('should generate consistent client IDs regardless of both property and array order', () => {\n      // First object with mixed ordering\n      const clientJson1 = `{\n        \"grant_types\": [\"refresh_token\", \"authorization_code\"],\n        \"client_name\": \"MCP Inspector\",\n        \"response_types\": [\"code\"],\n        \"redirect_uris\": [\n          \"http://localhost:8080/callback\",\n          \"http://localhost:6274/oauth/callback\"\n        ],\n        \"token_endpoint_auth_method\": \"none\",\n        \"client_uri\": \"https://github.com/modelcontextprotocol/inspector\"\n      }`;\n\n      // Second object with different mixed ordering\n      const clientJson2 = `{\n        \"client_uri\": \"https://github.com/modelcontextprotocol/inspector\",\n        \"token_endpoint_auth_method\": \"none\",\n        \"redirect_uris\": [\n          \"http://localhost:6274/oauth/callback\",\n          \"http://localhost:8080/callback\"\n        ],\n        \"response_types\": [\"code\"],\n        \"client_name\": \"MCP Inspector\",\n        \"grant_types\": [\"authorization_code\", \"refresh_token\"]\n      }`;\n\n      const client1 = JSON.parse(clientJson1) as OAuthClient;\n      const client2 = JSON.parse(clientJson2) as OAuthClient;\n\n      const id1 = service.generateClientId(client1);\n      const id2 = service.generateClientId(client2);\n\n      expect(id1).toBe(id2);\n    });\n\n    it('should generate different client IDs for different objects', () => {\n      const client1: Partial<OAuthClient> = {\n        client_name: 'MCP Inspector',\n        client_uri: 'https://github.com/modelcontextprotocol/inspector',\n        redirect_uris: ['http://localhost:6274/oauth/callback'],\n        token_endpoint_auth_method: 'none',\n        grant_types: ['authorization_code', 'refresh_token'],\n        response_types: ['code'],\n      };\n\n      const client2: Partial<OAuthClient> = {\n        client_name: 'Different App', // Changed client name\n        client_uri: 'https://github.com/modelcontextprotocol/inspector',\n        redirect_uris: ['http://localhost:6274/oauth/callback'],\n        token_endpoint_auth_method: 'none',\n        grant_types: ['authorization_code', 'refresh_token'],\n        response_types: ['code'],\n      };\n\n      const id1 = service.generateClientId(client1 as OAuthClient);\n      const id2 = service.generateClientId(client2 as OAuthClient);\n\n      expect(id1).not.toBe(id2);\n    });\n\n    it('should generate different client IDs when array contents differ', () => {\n      const client1: Partial<OAuthClient> = {\n        client_name: 'MCP Inspector',\n        client_uri: 'https://github.com/modelcontextprotocol/inspector',\n        redirect_uris: ['http://localhost:6274/oauth/callback'],\n        token_endpoint_auth_method: 'none',\n        grant_types: ['authorization_code', 'refresh_token'],\n        response_types: ['code'],\n      };\n\n      const client2: Partial<OAuthClient> = {\n        client_name: 'MCP Inspector',\n        client_uri: 'https://github.com/modelcontextprotocol/inspector',\n        redirect_uris: ['http://localhost:6274/oauth/callback'],\n        token_endpoint_auth_method: 'none',\n        grant_types: ['authorization_code'], // Removed 'refresh_token'\n        response_types: ['code'],\n      };\n\n      const id1 = service.generateClientId(client1 as OAuthClient);\n      const id2 = service.generateClientId(client2 as OAuthClient);\n\n      expect(id1).not.toBe(id2);\n    });\n\n    it('should include normalized client name in the generated ID', () => {\n      const client: Partial<OAuthClient> = {\n        client_name: 'MCP Inspector!@#', // Special characters\n        client_uri: 'https://github.com/modelcontextprotocol/inspector',\n        redirect_uris: ['http://localhost:6274/oauth/callback'],\n        token_endpoint_auth_method: 'none',\n        grant_types: ['authorization_code', 'refresh_token'],\n        response_types: ['code'],\n      };\n\n      const clientId = service.generateClientId(client as OAuthClient);\n\n      // Should start with normalized name (lowercase, alphanumeric only)\n      expect(clientId).toMatch(/^mcpinspector_[a-f0-9]{16}$/);\n    });\n\n    it('should generate IDs with consistent format', () => {\n      const client: Partial<OAuthClient> = {\n        client_name: 'Test App',\n        client_uri: 'https://example.com',\n        redirect_uris: ['http://localhost:3000/callback'],\n        token_endpoint_auth_method: 'none',\n        grant_types: ['authorization_code'],\n        response_types: ['code'],\n      };\n\n      const clientId = service.generateClientId(client as OAuthClient);\n\n      // Should match pattern: normalizedname_16hexchars\n      expect(clientId).toMatch(/^[a-z0-9]+_[a-f0-9]{16}$/);\n\n      // Should be consistent across multiple calls\n      const clientId2 = service.generateClientId(client as OAuthClient);\n      expect(clientId).toBe(clientId2);\n    });\n  });\n\n  describe('Client Management', () => {\n    const mockClient: OAuthClient = {\n      client_id: 'test-client-id',\n      client_name: 'Test Client',\n      client_description: 'A test OAuth client',\n      logo_uri: 'https://example.com/logo.png',\n      client_uri: 'https://example.com',\n      developer_name: 'Test Developer',\n      developer_email: 'test@example.com',\n      redirect_uris: ['http://localhost:3000/callback'],\n      grant_types: ['authorization_code', 'refresh_token'],\n      response_types: ['code'],\n      token_endpoint_auth_method: 'none',\n      created_at: new Date(),\n      updated_at: new Date(),\n    };\n\n    describe('storeClient', () => {\n      it('should store a client and return it', async () => {\n        const result = await service.storeClient(mockClient);\n        expect(result).toEqual(mockClient);\n      });\n\n      it('should allow retrieving the stored client', async () => {\n        await service.storeClient(mockClient);\n        const retrieved = await service.getClient(mockClient.client_id);\n        expect(retrieved).toEqual(mockClient);\n      });\n\n      it('should overwrite existing client with same ID', async () => {\n        await service.storeClient(mockClient);\n\n        const updatedClient = { ...mockClient, client_name: 'Updated Client' };\n        await service.storeClient(updatedClient);\n\n        const retrieved = await service.getClient(mockClient.client_id);\n        expect(retrieved?.client_name).toBe('Updated Client');\n      });\n    });\n\n    describe('getClient', () => {\n      it('should return undefined for non-existent client', async () => {\n        const result = await service.getClient('non-existent-id');\n        expect(result).toBeUndefined();\n      });\n\n      it('should return the correct client when it exists', async () => {\n        await service.storeClient(mockClient);\n        const result = await service.getClient(mockClient.client_id);\n        expect(result).toEqual(mockClient);\n      });\n    });\n\n    describe('findClient', () => {\n      it('should return undefined for non-existent client name', async () => {\n        const result = await service.findClient('Non-existent Client');\n        expect(result).toBeUndefined();\n      });\n\n      it('should find client by exact name match', async () => {\n        await service.storeClient(mockClient);\n        const result = await service.findClient(mockClient.client_name);\n        expect(result).toEqual(mockClient);\n      });\n\n      it('should be case sensitive', async () => {\n        await service.storeClient(mockClient);\n        const result = await service.findClient(\n          mockClient.client_name.toUpperCase(),\n        );\n        expect(result).toBeUndefined();\n      });\n\n      it('should return first match when multiple clients exist', async () => {\n        const client1 = { ...mockClient, client_id: 'client-1' };\n        const client2 = {\n          ...mockClient,\n          client_id: 'client-2',\n          client_name: 'Different Client',\n        };\n\n        await service.storeClient(client1);\n        await service.storeClient(client2);\n\n        const result = await service.findClient(client1.client_name);\n        expect(result).toEqual(client1);\n      });\n    });\n  });\n\n  describe('Authorization Code Management', () => {\n    const mockAuthCode: AuthorizationCode = {\n      code: 'test-auth-code',\n      user_id: 'user-123',\n      client_id: 'client-123',\n      redirect_uri: 'http://localhost:3000/callback',\n      code_challenge: 'test-challenge',\n      code_challenge_method: 'S256',\n      expires_at: Date.now() + 600000, // 10 minutes from now\n    };\n\n    describe('storeAuthCode', () => {\n      it('should store an authorization code', async () => {\n        await service.storeAuthCode(mockAuthCode);\n        const retrieved = await service.getAuthCode(mockAuthCode.code);\n        expect(retrieved).toEqual(mockAuthCode);\n      });\n\n      it('should overwrite existing code with same value', async () => {\n        await service.storeAuthCode(mockAuthCode);\n\n        const updatedCode = { ...mockAuthCode, user_id: 'updated-user' };\n        await service.storeAuthCode(updatedCode);\n\n        const retrieved = await service.getAuthCode(mockAuthCode.code);\n        expect(retrieved?.user_id).toBe('updated-user');\n      });\n    });\n\n    describe('getAuthCode', () => {\n      it('should return undefined for non-existent code', async () => {\n        const result = await service.getAuthCode('non-existent-code');\n        expect(result).toBeUndefined();\n      });\n\n      it('should return the correct authorization code when it exists', async () => {\n        await service.storeAuthCode(mockAuthCode);\n        const result = await service.getAuthCode(mockAuthCode.code);\n        expect(result).toEqual(mockAuthCode);\n      });\n    });\n\n    describe('removeAuthCode', () => {\n      it('should remove an authorization code', async () => {\n        await service.storeAuthCode(mockAuthCode);\n        await service.removeAuthCode(mockAuthCode.code);\n\n        const retrieved = await service.getAuthCode(mockAuthCode.code);\n        expect(retrieved).toBeUndefined();\n      });\n\n      it('should not throw when removing non-existent code', async () => {\n        await expect(\n          service.removeAuthCode('non-existent-code'),\n        ).resolves.not.toThrow();\n      });\n    });\n  });\n\n  describe('OAuth Session Management', () => {\n    const mockSession: OAuthSession = {\n      sessionId: 'session-123',\n      state: 'test-state',\n      clientId: 'client-123',\n      redirectUri: 'http://localhost:3000/callback',\n      codeChallenge: 'test-challenge',\n      codeChallengeMethod: 'S256',\n      oauthState: 'oauth-state-123',\n      resource: 'test-resource',\n      expiresAt: Date.now() + 3600000, // 1 hour from now\n    };\n\n    const expiredSession: OAuthSession = {\n      ...mockSession,\n      sessionId: 'expired-session',\n      expiresAt: Date.now() - 1000, // 1 second ago\n    };\n\n    describe('storeOAuthSession', () => {\n      it('should store an OAuth session', async () => {\n        const sessionId = 'session-123';\n        await service.storeOAuthSession(sessionId, mockSession);\n\n        const retrieved = await service.getOAuthSession(sessionId);\n        expect(retrieved).toEqual(mockSession);\n      });\n\n      it('should overwrite existing session with same ID', async () => {\n        const sessionId = 'session-123';\n        await service.storeOAuthSession(sessionId, mockSession);\n\n        const updatedSession = { ...mockSession, state: 'updated-state' };\n        await service.storeOAuthSession(sessionId, updatedSession);\n\n        const retrieved = await service.getOAuthSession(sessionId);\n        expect(retrieved?.state).toBe('updated-state');\n      });\n    });\n\n    describe('getOAuthSession', () => {\n      it('should return undefined for non-existent session', async () => {\n        const result = await service.getOAuthSession('non-existent-session');\n        expect(result).toBeUndefined();\n      });\n\n      it('should return the correct OAuth session when it exists', async () => {\n        const sessionId = 'session-123';\n        await service.storeOAuthSession(sessionId, mockSession);\n\n        const result = await service.getOAuthSession(sessionId);\n        expect(result).toEqual(mockSession);\n      });\n\n      it('should return undefined and auto-remove expired sessions', async () => {\n        const sessionId = 'expired-session';\n        await service.storeOAuthSession(sessionId, expiredSession);\n\n        const result = await service.getOAuthSession(sessionId);\n        expect(result).toBeUndefined();\n\n        // Verify it was actually removed\n        const result2 = await service.getOAuthSession(sessionId);\n        expect(result2).toBeUndefined();\n      });\n    });\n\n    describe('removeOAuthSession', () => {\n      it('should remove an OAuth session', async () => {\n        const sessionId = 'session-123';\n        await service.storeOAuthSession(sessionId, mockSession);\n        await service.removeOAuthSession(sessionId);\n\n        const retrieved = await service.getOAuthSession(sessionId);\n        expect(retrieved).toBeUndefined();\n      });\n\n      it('should not throw when removing non-existent session', async () => {\n        await expect(\n          service.removeOAuthSession('non-existent-session'),\n        ).resolves.not.toThrow();\n      });\n    });\n  });\n});\n"]}