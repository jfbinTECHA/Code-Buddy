{"version":3,"file":"typeorm-store.service.spec.js","sourceRoot":"","sources":["../../../../src/authz/stores/typeorm/typeorm-store.service.spec.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/unbound-method */\nimport { Test, TestingModule } from '@nestjs/testing';\nimport { getRepositoryToken } from '@nestjs/typeorm';\nimport { Repository, DeleteResult } from 'typeorm';\nimport { TypeOrmStore } from './typeorm-store.service';\nimport {\n  OAuthClientEntity,\n  AuthorizationCodeEntity,\n  OAuthSessionEntity,\n  OAuthUserProfileEntity,\n} from './entities';\nimport { OAuthClient, AuthorizationCode } from '../oauth-store.interface';\nimport { OAuthSession } from '../../providers/oauth-provider.interface';\nimport { OAUTH_TYPEORM_CONNECTION_NAME } from './constants';\n\ndescribe('TypeOrmStore', () => {\n  let service: TypeOrmStore;\n  let clientRepository: jest.Mocked<Repository<OAuthClientEntity>>;\n  let authCodeRepository: jest.Mocked<Repository<AuthorizationCodeEntity>>;\n  let sessionRepository: jest.Mocked<Repository<OAuthSessionEntity>>;\n\n  beforeEach(async () => {\n    // Create mocked repositories\n    const mockClientRepository = {\n      save: jest.fn(),\n      findOne: jest.fn(),\n      delete: jest.fn(),\n    };\n\n    const mockAuthCodeRepository = {\n      save: jest.fn(),\n      findOne: jest.fn(),\n      delete: jest.fn(),\n    };\n\n    const mockSessionRepository = {\n      save: jest.fn(),\n      findOne: jest.fn(),\n      delete: jest.fn(),\n    };\n\n    const mockUserProfileRepository = {\n      save: jest.fn(),\n      findOne: jest.fn(),\n      delete: jest.fn(),\n    };\n\n    const module: TestingModule = await Test.createTestingModule({\n      providers: [\n        TypeOrmStore,\n        {\n          provide: getRepositoryToken(\n            OAuthClientEntity,\n            OAUTH_TYPEORM_CONNECTION_NAME,\n          ),\n          useValue: mockClientRepository,\n        },\n        {\n          provide: getRepositoryToken(\n            AuthorizationCodeEntity,\n            OAUTH_TYPEORM_CONNECTION_NAME,\n          ),\n          useValue: mockAuthCodeRepository,\n        },\n        {\n          provide: getRepositoryToken(\n            OAuthSessionEntity,\n            OAUTH_TYPEORM_CONNECTION_NAME,\n          ),\n          useValue: mockSessionRepository,\n        },\n        {\n          provide: getRepositoryToken(\n            OAuthUserProfileEntity,\n            OAUTH_TYPEORM_CONNECTION_NAME,\n          ),\n          useValue: mockUserProfileRepository,\n        },\n      ],\n    }).compile();\n\n    service = module.get<TypeOrmStore>(TypeOrmStore);\n    clientRepository = module.get(\n      getRepositoryToken(OAuthClientEntity, OAUTH_TYPEORM_CONNECTION_NAME),\n    );\n    authCodeRepository = module.get(\n      getRepositoryToken(\n        AuthorizationCodeEntity,\n        OAUTH_TYPEORM_CONNECTION_NAME,\n      ),\n    );\n    sessionRepository = module.get(\n      getRepositoryToken(OAuthSessionEntity, OAUTH_TYPEORM_CONNECTION_NAME),\n    );\n    // Note: userProfileRepository is not directly used in tests below; it's provided for completeness\n  });\n\n  afterEach(() => {\n    jest.clearAllMocks();\n  });\n\n  it('should be defined', () => {\n    expect(service).toBeDefined();\n  });\n\n  describe('generateClientId', () => {\n    const mockClient: OAuthClient = {\n      client_id: '',\n      client_name: 'Test Client',\n      client_description: 'A test OAuth client',\n      logo_uri: 'https://example.com/logo.png',\n      client_uri: 'https://example.com',\n      developer_name: 'Test Developer',\n      developer_email: 'test@example.com',\n      redirect_uris: ['http://localhost:3000/callback'],\n      grant_types: ['authorization_code', 'refresh_token'],\n      response_types: ['code'],\n      token_endpoint_auth_method: 'none',\n      created_at: new Date(),\n      updated_at: new Date(),\n    };\n\n    it('should generate client IDs with correct format', () => {\n      const clientId = service.generateClientId(mockClient);\n\n      // Should match pattern: normalizedname_8hexchars\n      expect(clientId).toMatch(/^[a-z0-9]+_[a-f0-9]{8}$/);\n    });\n\n    it('should include normalized client name in the generated ID', () => {\n      const clientWithSpecialChars = {\n        ...mockClient,\n        client_name: 'Test Client!@#',\n      };\n\n      const clientId = service.generateClientId(clientWithSpecialChars);\n      expect(clientId).toMatch(/^testclient_[a-f0-9]{8}$/);\n    });\n\n    it('should generate different IDs for different clients', () => {\n      const client1 = { ...mockClient, client_name: 'Client One' };\n      const client2 = { ...mockClient, client_name: 'Client Two' };\n\n      const id1 = service.generateClientId(client1);\n      const id2 = service.generateClientId(client2);\n\n      expect(id1).not.toBe(id2);\n    });\n\n    it('should generate different IDs on each call (non-deterministic)', () => {\n      const id1 = service.generateClientId(mockClient);\n      const id2 = service.generateClientId(mockClient);\n\n      // TypeORM store uses random bytes, so IDs should be different\n      expect(id1).not.toBe(id2);\n    });\n  });\n\n  describe('Client Management', () => {\n    const mockClient: OAuthClient = {\n      client_id: 'test-client-id',\n      client_name: 'Test Client',\n      client_description: 'A test OAuth client',\n      logo_uri: 'https://example.com/logo.png',\n      client_uri: 'https://example.com',\n      developer_name: 'Test Developer',\n      developer_email: 'test@example.com',\n      redirect_uris: ['http://localhost:3000/callback'],\n      grant_types: ['authorization_code', 'refresh_token'],\n      response_types: ['code'],\n      token_endpoint_auth_method: 'none',\n      created_at: new Date(),\n      updated_at: new Date(),\n    };\n\n    describe('storeClient', () => {\n      it('should store a client and return the saved result', async () => {\n        clientRepository.save.mockResolvedValue(\n          mockClient as OAuthClientEntity,\n        );\n\n        const result = await service.storeClient(mockClient);\n\n        expect(clientRepository.save).toHaveBeenCalledWith(mockClient);\n        expect(result).toEqual(mockClient);\n      });\n\n      it('should handle database errors', async () => {\n        const error = new Error('Database error');\n        clientRepository.save.mockRejectedValue(error);\n\n        await expect(service.storeClient(mockClient)).rejects.toThrow(\n          'Database error',\n        );\n      });\n    });\n\n    describe('getClient', () => {\n      it('should return client when found', async () => {\n        clientRepository.findOne.mockResolvedValue(\n          mockClient as OAuthClientEntity,\n        );\n\n        const result = await service.getClient('test-client-id');\n\n        expect(clientRepository.findOne).toHaveBeenCalledWith({\n          where: { client_id: 'test-client-id' },\n        });\n        expect(result).toEqual(mockClient);\n      });\n\n      it('should return undefined when client not found', async () => {\n        clientRepository.findOne.mockResolvedValue(null);\n\n        const result = await service.getClient('non-existent-id');\n\n        expect(result).toBeUndefined();\n      });\n\n      it('should handle database errors', async () => {\n        const error = new Error('Database error');\n        clientRepository.findOne.mockRejectedValue(error);\n\n        await expect(service.getClient('test-client-id')).rejects.toThrow(\n          'Database error',\n        );\n      });\n    });\n\n    describe('findClient', () => {\n      it('should find client by name when found', async () => {\n        clientRepository.findOne.mockResolvedValue(\n          mockClient as OAuthClientEntity,\n        );\n\n        const result = await service.findClient('Test Client');\n\n        expect(clientRepository.findOne).toHaveBeenCalledWith({\n          where: { client_name: 'Test Client' },\n        });\n        expect(result).toEqual(mockClient);\n      });\n\n      it('should return undefined when client name not found', async () => {\n        clientRepository.findOne.mockResolvedValue(null);\n\n        const result = await service.findClient('Non-existent Client');\n\n        expect(result).toBeUndefined();\n      });\n\n      it('should handle database errors', async () => {\n        const error = new Error('Database error');\n        clientRepository.findOne.mockRejectedValue(error);\n\n        await expect(service.findClient('Test Client')).rejects.toThrow(\n          'Database error',\n        );\n      });\n    });\n  });\n\n  describe('Authorization Code Management', () => {\n    const mockAuthCode: AuthorizationCode = {\n      code: 'test-auth-code',\n      user_id: 'user-123',\n      client_id: 'client-123',\n      redirect_uri: 'http://localhost:3000/callback',\n      code_challenge: 'test-challenge',\n      code_challenge_method: 'S256',\n      expires_at: Date.now() + 600000, // 10 minutes from now\n    };\n\n    const expiredAuthCode: AuthorizationCode = {\n      ...mockAuthCode,\n      expires_at: Date.now() - 1000, // 1 second ago\n    };\n\n    describe('storeAuthCode', () => {\n      it('should store an authorization code', async () => {\n        authCodeRepository.save.mockResolvedValue(\n          mockAuthCode as AuthorizationCodeEntity,\n        );\n\n        await service.storeAuthCode(mockAuthCode);\n\n        expect(authCodeRepository.save).toHaveBeenCalledWith(mockAuthCode);\n      });\n\n      it('should handle database errors', async () => {\n        const error = new Error('Database error');\n        authCodeRepository.save.mockRejectedValue(error);\n\n        await expect(service.storeAuthCode(mockAuthCode)).rejects.toThrow(\n          'Database error',\n        );\n      });\n    });\n\n    describe('getAuthCode', () => {\n      it('should return authorization code when found and not expired', async () => {\n        authCodeRepository.findOne.mockResolvedValue(\n          mockAuthCode as AuthorizationCodeEntity,\n        );\n\n        const result = await service.getAuthCode('test-auth-code');\n\n        expect(authCodeRepository.findOne).toHaveBeenCalledWith({\n          where: { code: 'test-auth-code' },\n        });\n        expect(result).toEqual(mockAuthCode);\n      });\n\n      it('should return undefined and delete expired authorization code', async () => {\n        authCodeRepository.findOne.mockResolvedValue(\n          expiredAuthCode as AuthorizationCodeEntity,\n        );\n        authCodeRepository.delete.mockResolvedValue({\n          raw: {},\n          affected: 1,\n        } as DeleteResult);\n\n        const result = await service.getAuthCode('expired-code');\n\n        expect(authCodeRepository.findOne).toHaveBeenCalledWith({\n          where: { code: 'expired-code' },\n        });\n        expect(authCodeRepository.delete).toHaveBeenCalledWith({\n          code: 'expired-code',\n        });\n        expect(result).toBeUndefined();\n      });\n\n      it('should return undefined when authorization code not found', async () => {\n        authCodeRepository.findOne.mockResolvedValue(null);\n\n        const result = await service.getAuthCode('non-existent-code');\n\n        expect(result).toBeUndefined();\n      });\n\n      it('should handle database errors', async () => {\n        const error = new Error('Database error');\n        authCodeRepository.findOne.mockRejectedValue(error);\n\n        await expect(service.getAuthCode('test-auth-code')).rejects.toThrow(\n          'Database error',\n        );\n      });\n    });\n\n    describe('removeAuthCode', () => {\n      it('should remove an authorization code', async () => {\n        authCodeRepository.delete.mockResolvedValue({\n          raw: {},\n          affected: 1,\n        } as DeleteResult);\n\n        await service.removeAuthCode('test-auth-code');\n\n        expect(authCodeRepository.delete).toHaveBeenCalledWith({\n          code: 'test-auth-code',\n        });\n      });\n\n      it('should handle database errors', async () => {\n        const error = new Error('Database error');\n        authCodeRepository.delete.mockRejectedValue(error);\n\n        await expect(service.removeAuthCode('test-auth-code')).rejects.toThrow(\n          'Database error',\n        );\n      });\n    });\n  });\n\n  describe('OAuth Session Management', () => {\n    const mockSession: OAuthSession = {\n      sessionId: 'session-123',\n      state: 'test-state',\n      clientId: 'client-123',\n      redirectUri: 'http://localhost:3000/callback',\n      codeChallenge: 'test-challenge',\n      codeChallengeMethod: 'S256',\n      oauthState: 'oauth-state-123',\n      resource: 'test-resource',\n      expiresAt: Date.now() + 3600000, // 1 hour from now\n    };\n\n    const expiredSession: OAuthSession = {\n      ...mockSession,\n      sessionId: 'expired-session',\n      expiresAt: Date.now() - 1000, // 1 second ago\n    };\n\n    describe('storeOAuthSession', () => {\n      it('should store an OAuth session', async () => {\n        const expectedEntity = { ...mockSession, sessionId: 'session-123' };\n        sessionRepository.save.mockResolvedValue(\n          expectedEntity as OAuthSessionEntity,\n        );\n\n        await service.storeOAuthSession('session-123', mockSession);\n\n        expect(sessionRepository.save).toHaveBeenCalledWith(expectedEntity);\n      });\n\n      it('should handle database errors', async () => {\n        const error = new Error('Database error');\n        sessionRepository.save.mockRejectedValue(error);\n\n        await expect(\n          service.storeOAuthSession('session-123', mockSession),\n        ).rejects.toThrow('Database error');\n      });\n    });\n\n    describe('getOAuthSession', () => {\n      it('should return OAuth session when found and not expired', async () => {\n        sessionRepository.findOne.mockResolvedValue(\n          mockSession as OAuthSessionEntity,\n        );\n\n        const result = await service.getOAuthSession('session-123');\n\n        expect(sessionRepository.findOne).toHaveBeenCalledWith({\n          where: { sessionId: 'session-123' },\n        });\n        expect(result).toEqual(mockSession);\n      });\n\n      it('should return undefined and delete expired OAuth session', async () => {\n        sessionRepository.findOne.mockResolvedValue(\n          expiredSession as OAuthSessionEntity,\n        );\n        sessionRepository.delete.mockResolvedValue({\n          raw: {},\n          affected: 1,\n        } as DeleteResult);\n\n        const result = await service.getOAuthSession('expired-session');\n\n        expect(sessionRepository.findOne).toHaveBeenCalledWith({\n          where: { sessionId: 'expired-session' },\n        });\n        expect(sessionRepository.delete).toHaveBeenCalledWith({\n          sessionId: 'expired-session',\n        });\n        expect(result).toBeUndefined();\n      });\n\n      it('should return undefined when OAuth session not found', async () => {\n        sessionRepository.findOne.mockResolvedValue(null);\n\n        const result = await service.getOAuthSession('non-existent-session');\n\n        expect(result).toBeUndefined();\n      });\n\n      it('should handle database errors', async () => {\n        const error = new Error('Database error');\n        sessionRepository.findOne.mockRejectedValue(error);\n\n        await expect(service.getOAuthSession('session-123')).rejects.toThrow(\n          'Database error',\n        );\n      });\n    });\n\n    describe('removeOAuthSession', () => {\n      it('should remove an OAuth session', async () => {\n        sessionRepository.delete.mockResolvedValue({\n          raw: {},\n          affected: 1,\n        } as DeleteResult);\n\n        await service.removeOAuthSession('session-123');\n\n        expect(sessionRepository.delete).toHaveBeenCalledWith({\n          sessionId: 'session-123',\n        });\n      });\n\n      it('should handle database errors', async () => {\n        const error = new Error('Database error');\n        sessionRepository.delete.mockRejectedValue(error);\n\n        await expect(service.removeOAuthSession('session-123')).rejects.toThrow(\n          'Database error',\n        );\n      });\n    });\n  });\n});\n"]}