{"version":3,"file":"memory-store.service.js","sourceRoot":"","sources":["../../../src/authz/stores/memory-store.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@nestjs/common';\nimport { createHash } from 'crypto';\nimport {\n  OAuthSession,\n  OAuthUserProfile,\n} from '../providers/oauth-provider.interface';\nimport {\n  AuthorizationCode,\n  IOAuthStore,\n  OAuthClient,\n} from './oauth-store.interface';\n\n// In-memory storage (in production, use a database)\n@Injectable()\nexport class MemoryStore implements IOAuthStore {\n  private clients = new Map<string, OAuthClient>();\n  private authCodes = new Map<string, AuthorizationCode>();\n  private oauthSessions = new Map<string, OAuthSession>();\n  private userProfiles = new Map<\n    string,\n    OAuthUserProfile & { profile_id: string; provider: string }\n  >(); // profile_id -> profile\n  private providerUserIndex = new Map<string, string>(); // key(provider:userId) -> profile_id\n\n  async storeClient(client: OAuthClient): Promise<OAuthClient> {\n    this.clients.set(client.client_id, client);\n    return client;\n  }\n\n  async getClient(client_id: string): Promise<OAuthClient | undefined> {\n    return this.clients.get(client_id);\n  }\n\n  async findClient(client_name: string): Promise<OAuthClient | undefined> {\n    for (const client of this.clients.values()) {\n      if (client.client_name === client_name) {\n        return client;\n      }\n    }\n    return undefined;\n  }\n\n  async storeAuthCode(code: AuthorizationCode): Promise<void> {\n    this.authCodes.set(code.code, code);\n  }\n\n  async getAuthCode(code: string): Promise<AuthorizationCode | undefined> {\n    return this.authCodes.get(code);\n  }\n\n  async removeAuthCode(code: string): Promise<void> {\n    this.authCodes.delete(code);\n  }\n\n  // New OAuth session methods for provider-agnostic flow\n  async storeOAuthSession(\n    sessionId: string,\n    session: OAuthSession,\n  ): Promise<void> {\n    this.oauthSessions.set(sessionId, session);\n  }\n\n  async getOAuthSession(sessionId: string): Promise<OAuthSession | undefined> {\n    const session = this.oauthSessions.get(sessionId);\n    if (session && session.expiresAt < Date.now()) {\n      this.oauthSessions.delete(sessionId);\n      return undefined;\n    }\n    return session;\n  }\n\n  async removeOAuthSession(sessionId: string): Promise<void> {\n    this.oauthSessions.delete(sessionId);\n  }\n\n  generateClientId(client: OAuthClient): string {\n    // Create deterministic client ID based on entire client object\n    const normalizedClient = this.normalizeClientObject(client);\n    const clientString = JSON.stringify(normalizedClient);\n    const hash = createHash('sha256').update(clientString).digest('hex');\n\n    // Use first 16 characters of hash with client name prefix for readability\n    const normalizedName = client.client_name\n      .toLowerCase()\n      .replace(/[^a-z0-9]/g, '');\n    return `${normalizedName}_${hash.substring(0, 16)}`;\n  }\n\n  private normalizeClientObject(client: OAuthClient): any {\n    // Create a normalized version of the client object for consistent hashing\n    const normalized: any = {};\n\n    // Sort object keys to ensure consistent ordering\n    const sortedKeys = Object.keys(client).sort();\n\n    for (const key of sortedKeys) {\n      const value = (client as any)[key];\n      if (Array.isArray(value)) {\n        // Sort arrays to ensure consistent ordering\n        normalized[key] = [...value].sort();\n      } else {\n        normalized[key] = value;\n      }\n    }\n\n    return normalized;\n  }\n\n  // User profile management\n  async upsertUserProfile(\n    profile: OAuthUserProfile,\n    provider: string,\n  ): Promise<string> {\n    const key = `${provider}:${profile.id}`;\n    let profileId = this.providerUserIndex.get(key);\n    if (!profileId) {\n      // create new\n      profileId = this.generateProfileId(provider, profile.id);\n      this.providerUserIndex.set(key, profileId);\n    }\n    this.userProfiles.set(profileId, {\n      profile_id: profileId,\n      provider,\n      ...profile,\n    });\n    return profileId;\n  }\n\n  async getUserProfileById(\n    profileId: string,\n  ): Promise<\n    (OAuthUserProfile & { profile_id: string; provider: string }) | undefined\n  > {\n    return this.userProfiles.get(profileId);\n  }\n\n  private generateProfileId(provider: string, providerUserId: string): string {\n    const input = `${provider}:${providerUserId}`;\n    return createHash('sha256').update(input).digest('hex').slice(0, 24);\n  }\n}\n"]}