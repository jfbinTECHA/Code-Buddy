{"version":3,"file":"sqlite-store.service.js","sourceRoot":"","sources":["../../../../src/authz/stores/sqlite/sqlite-store.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@nestjs/common';\nimport Database from 'better-sqlite3';\nimport { randomBytes } from 'crypto';\nimport { OAuthSession } from '../../providers/oauth-provider.interface';\nimport {\n  AuthorizationCode,\n  IOAuthStore,\n  OAuthClient,\n} from '../oauth-store.interface';\n\n@Injectable()\nexport class SQLiteStore implements IOAuthStore {\n  private sqlite: any;\n\n  constructor(databasePath: string = './oauth-sqlite.db') {\n    this.sqlite = new Database(databasePath);\n    this.initializeTables();\n  }\n\n  private initializeTables() {\n    // Enable foreign keys\n    this.sqlite.pragma('foreign_keys = ON');\n\n    // Create tables if they don't exist\n    this.sqlite.exec(`\n      CREATE TABLE IF NOT EXISTS oauth_clients (\n        client_id TEXT PRIMARY KEY,\n        client_name TEXT NOT NULL,\n        client_description TEXT,\n        logo_uri TEXT,\n        client_uri TEXT,\n        developer_name TEXT,\n        developer_email TEXT,\n        redirect_uris TEXT NOT NULL,\n        grant_types TEXT NOT NULL,\n        response_types TEXT NOT NULL,\n        token_endpoint_auth_method TEXT NOT NULL,\n        created_at INTEGER NOT NULL,\n        updated_at INTEGER NOT NULL\n      )\n    `);\n\n    this.sqlite.exec(`\n      CREATE TABLE IF NOT EXISTS authorization_codes (\n        code TEXT PRIMARY KEY,\n        user_id TEXT NOT NULL,\n        client_id TEXT NOT NULL,\n        redirect_uri TEXT NOT NULL,\n        code_challenge TEXT NOT NULL,\n        code_challenge_method TEXT NOT NULL,\n        expires_at INTEGER NOT NULL,\n        used_at INTEGER,\n        github_access_token TEXT NOT NULL\n      )\n    `);\n\n    this.sqlite.exec(`\n      CREATE TABLE IF NOT EXISTS oauth_sessions (\n        session_id TEXT PRIMARY KEY,\n        client_id TEXT NOT NULL,\n        redirect_uri TEXT NOT NULL,\n        code_challenge TEXT NOT NULL,\n        code_challenge_method TEXT NOT NULL,\n        state TEXT,\n        resource TEXT,\n        expires_at INTEGER NOT NULL\n      )\n    `);\n  }\n\n  // Client management\n  async storeClient(client: OAuthClient): Promise<OAuthClient> {\n    const stmt = this.sqlite.prepare(`\n      INSERT INTO oauth_clients (\n        client_id, client_name, client_description, logo_uri, client_uri,\n        developer_name, developer_email, redirect_uris, grant_types,\n        response_types, token_endpoint_auth_method, created_at, updated_at\n      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n    `);\n\n    stmt.run(\n      client.client_id,\n      client.client_name,\n      client.client_description || null,\n      client.logo_uri || null,\n      client.client_uri || null,\n      client.developer_name || null,\n      client.developer_email || null,\n      JSON.stringify(client.redirect_uris),\n      JSON.stringify(client.grant_types),\n      JSON.stringify(client.response_types),\n      client.token_endpoint_auth_method,\n      client.created_at.getTime(),\n      client.updated_at.getTime(),\n    );\n\n    return client;\n  }\n\n  async getClient(client_id: string): Promise<OAuthClient | undefined> {\n    const stmt = this.sqlite.prepare(\n      'SELECT * FROM oauth_clients WHERE client_id = ?',\n    );\n    const result = stmt.get(client_id) as any;\n\n    if (!result) {\n      return undefined;\n    }\n\n    return {\n      client_id: result.client_id,\n      client_name: result.client_name,\n      client_description: result.client_description || undefined,\n      logo_uri: result.logo_uri || undefined,\n      client_uri: result.client_uri || undefined,\n      developer_name: result.developer_name || undefined,\n      developer_email: result.developer_email || undefined,\n      redirect_uris: JSON.parse(result.redirect_uris),\n      grant_types: JSON.parse(result.grant_types),\n      response_types: JSON.parse(result.response_types),\n      token_endpoint_auth_method: result.token_endpoint_auth_method,\n      created_at: new Date(result.created_at),\n      updated_at: new Date(result.updated_at),\n    };\n  }\n\n  async findClient(client_name: string): Promise<OAuthClient | undefined> {\n    const stmt = this.sqlite.prepare(\n      'SELECT * FROM oauth_clients WHERE client_name = ?',\n    );\n    const result = stmt.get(client_name) as any;\n\n    if (!result) {\n      return undefined;\n    }\n\n    return {\n      client_id: result.client_id,\n      client_name: result.client_name,\n      client_description: result.client_description || undefined,\n      logo_uri: result.logo_uri || undefined,\n      client_uri: result.client_uri || undefined,\n      developer_name: result.developer_name || undefined,\n      developer_email: result.developer_email || undefined,\n      redirect_uris: JSON.parse(result.redirect_uris),\n      grant_types: JSON.parse(result.grant_types),\n      response_types: JSON.parse(result.response_types),\n      token_endpoint_auth_method: result.token_endpoint_auth_method,\n      created_at: new Date(result.created_at),\n      updated_at: new Date(result.updated_at),\n    };\n  }\n\n  // Authorization code management\n  async storeAuthCode(code: AuthorizationCode): Promise<void> {\n    const stmt = this.sqlite.prepare(`\n      INSERT INTO authorization_codes (\n        code, user_id, client_id, redirect_uri, code_challenge,\n        code_challenge_method, expires_at, used_at, github_access_token\n      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)\n    `);\n\n    stmt.run(\n      code.code,\n      code.user_id,\n      code.client_id,\n      code.redirect_uri,\n      code.code_challenge,\n      code.code_challenge_method,\n      code.expires_at,\n      code.used_at ? code.used_at.getTime() : null,\n      code.github_access_token,\n    );\n  }\n\n  async getAuthCode(code: string): Promise<AuthorizationCode | undefined> {\n    const stmt = this.sqlite.prepare(\n      'SELECT * FROM authorization_codes WHERE code = ?',\n    );\n    const result = stmt.get(code) as any;\n\n    if (!result) {\n      return undefined;\n    }\n\n    // Check if expired\n    if (result.expires_at < Date.now()) {\n      await this.removeAuthCode(code);\n      return undefined;\n    }\n\n    return {\n      code: result.code,\n      user_id: result.user_id,\n      client_id: result.client_id,\n      redirect_uri: result.redirect_uri,\n      code_challenge: result.code_challenge,\n      code_challenge_method: result.code_challenge_method,\n      expires_at: result.expires_at,\n      used_at: result.used_at ? new Date(result.used_at) : undefined,\n      github_access_token: result.github_access_token,\n    };\n  }\n\n  async removeAuthCode(code: string): Promise<void> {\n    const stmt = this.sqlite.prepare(\n      'DELETE FROM authorization_codes WHERE code = ?',\n    );\n    stmt.run(code);\n  }\n\n  // OAuth session management\n  async storeOAuthSession(\n    sessionId: string,\n    session: OAuthSession,\n  ): Promise<void> {\n    const stmt = this.sqlite.prepare(`\n      INSERT INTO oauth_sessions (\n        session_id, client_id, redirect_uri, code_challenge,\n        code_challenge_method, state, resource, expires_at\n      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?)\n    `);\n\n    stmt.run(\n      sessionId,\n      session.clientId,\n      session.redirectUri,\n      session.codeChallenge,\n      session.codeChallengeMethod,\n      session.state || null,\n      session.resource || null,\n      session.expiresAt,\n    );\n  }\n\n  async getOAuthSession(sessionId: string): Promise<OAuthSession | undefined> {\n    const stmt = this.sqlite.prepare(\n      'SELECT * FROM oauth_sessions WHERE session_id = ?',\n    );\n    const result = stmt.get(sessionId) as any;\n\n    if (!result) {\n      return undefined;\n    }\n\n    // Check if expired\n    if (result.expires_at < Date.now()) {\n      await this.removeOAuthSession(sessionId);\n      return undefined;\n    }\n\n    return {\n      sessionId: result.session_id,\n      clientId: result.client_id,\n      redirectUri: result.redirect_uri,\n      codeChallenge: result.code_challenge,\n      codeChallengeMethod: result.code_challenge_method,\n      state: result.state || undefined,\n      resource: result.resource || undefined,\n      expiresAt: result.expires_at,\n    };\n  }\n\n  async removeOAuthSession(sessionId: string): Promise<void> {\n    const stmt = this.sqlite.prepare(\n      'DELETE FROM oauth_sessions WHERE session_id = ?',\n    );\n    stmt.run(sessionId);\n  }\n\n  generateClientId(client: OAuthClient): string {\n    // Create deterministic client ID based on name + random salt\n    const normalizedName = client.client_name\n      .toLowerCase()\n      .replace(/[^a-z0-9]/g, '');\n    const salt = randomBytes(4).toString('hex');\n    return `${normalizedName}_${salt}`;\n  }\n}\n"]}