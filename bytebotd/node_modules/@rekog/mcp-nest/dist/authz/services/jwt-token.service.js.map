{"version":3,"file":"jwt-token.service.js","sourceRoot":"","sources":["../../../src/authz/services/jwt-token.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Inject, Injectable } from '@nestjs/common';\nimport { randomBytes } from 'crypto';\nimport * as jwt from 'jsonwebtoken';\nimport { OAuthModuleOptions } from '../providers/oauth-provider.interface';\n\nexport interface JwtPayload {\n  sub: string; // user_id\n  azp?: string; // authorized party (client_id for access tokens)\n  client_id?: string; // only for refresh tokens\n  scope?: string;\n  resource?: string; // MCP server resource identifier\n  type: 'access' | 'refresh' | 'user';\n  user_data?: any;\n  user_profile_id?: string;\n  iat?: number;\n  exp?: number;\n}\n\nexport interface TokenPair {\n  access_token: string;\n  token_type: string;\n  expires_in: number;\n  refresh_token?: string;\n  scope?: string;\n}\n\n@Injectable()\nexport class JwtTokenService {\n  private jwtSecret: string;\n  private issuer: string;\n  private accessTokenExpiresIn: string;\n  private refreshTokenExpiresIn: string;\n  private enableRefreshTokens: boolean;\n\n  constructor(@Inject('OAUTH_MODULE_OPTIONS') options: OAuthModuleOptions) {\n    // Use JWT secret from environment variable\n    const jwtSecret = options.jwtSecret;\n\n    if (!jwtSecret) {\n      throw new Error('JWT_SECRET must be set in environment variables.');\n    }\n\n    this.jwtSecret = jwtSecret;\n    this.issuer =\n      options.jwtIssuer || options.serverUrl || 'https://localhost:3000';\n    this.accessTokenExpiresIn = options.jwtAccessTokenExpiresIn;\n    this.refreshTokenExpiresIn = options.jwtRefreshTokenExpiresIn;\n    this.enableRefreshTokens = options.enableRefreshTokens;\n  }\n\n  generateTokenPair(\n    userId: string,\n    clientId: string,\n    scope = '',\n    resource?: string,\n    extras?: { user_profile_id?: string; user_data?: any },\n  ): TokenPair {\n    if (!resource) {\n      throw new Error('Resource is required for token generation');\n    }\n\n    const jti = randomBytes(16).toString('hex'); // JWT ID for tracking\n\n    const accessTokenPayload: any = {\n      sub: userId,\n      azp: clientId, // Use azp instead of client_id\n      iss: this.issuer,\n      aud: resource,\n      resource: resource, // Always include resource\n      type: 'access' as const,\n    };\n    if (extras?.user_profile_id) {\n      accessTokenPayload.user_profile_id = extras.user_profile_id;\n    }\n    if (extras?.user_data) {\n      accessTokenPayload.user_data = extras.user_data;\n    }\n\n    // Always include scope to ensure parity with refresh token claims\n    accessTokenPayload.scope = scope || '';\n\n    const accessToken = jwt.sign(accessTokenPayload, this.jwtSecret, {\n      algorithm: 'HS256',\n      expiresIn: this.accessTokenExpiresIn,\n    });\n\n    let refreshToken: string | undefined = undefined;\n    if (this.enableRefreshTokens) {\n      const refreshTokenPayload: any = {\n        sub: userId,\n        client_id: clientId,\n        scope,\n        resource,\n        type: 'refresh' as const,\n        jti: `refresh_${jti}`,\n        iss: this.issuer,\n        aud: resource,\n      };\n      if (extras?.user_profile_id) {\n        refreshTokenPayload.user_profile_id = extras.user_profile_id;\n      }\n      refreshToken = jwt.sign(refreshTokenPayload, this.jwtSecret, {\n        algorithm: 'HS256',\n        expiresIn: this.refreshTokenExpiresIn,\n      });\n    }\n\n    return {\n      access_token: accessToken,\n      token_type: 'bearer',\n      expires_in: this.parseDurationToSeconds(this.accessTokenExpiresIn),\n      ...(refreshToken ? { refresh_token: refreshToken } : {}),\n    };\n  }\n\n  validateToken(token: string): JwtPayload | null {\n    try {\n      return jwt.verify(token, this.jwtSecret, {\n        algorithms: ['HS256'],\n      }) as JwtPayload;\n    } catch {\n      return null;\n    }\n  }\n\n  refreshAccessToken(refreshToken: string): TokenPair | null {\n    if (!this.enableRefreshTokens) {\n      return null;\n    }\n\n    const payload = this.validateToken(refreshToken);\n\n    if (!payload || payload.type !== 'refresh') {\n      return null;\n    }\n\n    return this.generateTokenPair(\n      payload.sub,\n      payload.client_id!,\n      payload.scope,\n      payload.resource,\n      {\n        user_profile_id: payload.user_profile_id,\n        user_data: payload.user_data,\n      },\n    );\n  }\n\n  generateUserToken(userId: string, userData: any): string {\n    const jti = randomBytes(16).toString('hex');\n    const serverUrl = process.env.SERVER_URL || 'https://localhost:3000';\n\n    const payload = {\n      sub: userId,\n      type: 'user',\n      user_data: userData,\n      jti: `user_${jti}`,\n      iss: serverUrl,\n      aud: 'mcp-client',\n    };\n\n    return jwt.sign(payload, this.jwtSecret, {\n      algorithm: 'HS256',\n      expiresIn: '24h',\n    });\n  }\n\n  private parseDurationToSeconds(duration: string): number {\n    const match = duration.match(/^(\\d+)([smhd])$/);\n    if (!match) {\n      throw new Error(`Invalid duration format: ${duration}`);\n    }\n    const value = parseInt(match[1], 10);\n    const unit = match[2];\n    switch (unit) {\n      case 's':\n        return value;\n      case 'm':\n        return value * 60;\n      case 'h':\n        return value * 60 * 60;\n      case 'd':\n        return value * 60 * 60 * 24;\n      default:\n        throw new Error(`Unsupported duration unit: ${unit}`);\n    }\n  }\n}\n"]}