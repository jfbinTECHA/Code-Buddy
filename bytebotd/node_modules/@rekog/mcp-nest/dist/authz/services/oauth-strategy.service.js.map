{"version":3,"file":"oauth-strategy.service.js","sourceRoot":"","sources":["../../../src/authz/services/oauth-strategy.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA,2CAAkE;AAClE,wDAAgC;AAGnB,QAAA,aAAa,GAAG,gBAAgB,CAAC;AAGvC,IAAM,oBAAoB,GAA1B,MAAM,oBAAoB;IAC/B,YAC0C,OAA2B;QAA3B,YAAO,GAAP,OAAO,CAAoB;IAClE,CAAC;IAEJ,YAAY;QACV,IAAI,CAAC,gBAAgB,EAAE,CAAC;IAC1B,CAAC;IAEO,gBAAgB;QACtB,MAAM,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC;QAGvC,MAAM,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC;QACvC,MAAM,YAAY,GAAG,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC;QAG/C,MAAM,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC;QAEzC,MAAM,eAAe,GAAG,QAAQ,CAAC,eAAe,CAAC;YAC/C,SAAS;YACT,QAAQ;YACR,YAAY;YACZ,YAAY,EAAE,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,QAAQ;SAC9C,CAAC,CAAC;QAEH,MAAM,QAAQ,GAAG,IAAI,QAAQ,CAAC,QAAQ,CACpC,eAAe,EACf,CAAC,WAAmB,EAAE,YAAoB,EAAE,OAAY,EAAE,IAAS,EAAE,EAAE;YACrE,IAAI,CAAC;gBACH,MAAM,aAAa,GAAG,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;gBACtD,OAAO,IAAI,CAAC,IAAI,EAAE;oBAChB,OAAO,EAAE,aAAa;oBACtB,WAAW;oBACX,QAAQ,EAAE,QAAQ,CAAC,IAAI;iBACxB,CAAC,CAAC;YACL,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,OAAO,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;YAC3B,CAAC;QACH,CAAC,CACF,CAAC;QAEF,kBAAQ,CAAC,GAAG,CAAC,qBAAa,EAAE,QAAQ,CAAC,CAAC;IACxC,CAAC;IAED,eAAe;QACb,OAAO,qBAAa,CAAC;IACvB,CAAC;CACF,CAAA;AAhDY,oDAAoB;+BAApB,oBAAoB;IADhC,IAAA,mBAAU,GAAE;IAGR,WAAA,IAAA,eAAM,EAAC,sBAAsB,CAAC,CAAA;;GAFtB,oBAAoB,CAgDhC","sourcesContent":["import { Injectable, OnModuleInit, Inject } from '@nestjs/common';\nimport passport from 'passport';\nimport { OAuthModuleOptions } from '../providers/oauth-provider.interface';\n\nexport const STRATEGY_NAME = 'oauth-provider';\n\n@Injectable()\nexport class OAuthStrategyService implements OnModuleInit {\n  constructor(\n    @Inject('OAUTH_MODULE_OPTIONS') private options: OAuthModuleOptions,\n  ) {}\n\n  onModuleInit() {\n    this.registerStrategy();\n  }\n\n  private registerStrategy() {\n    const provider = this.options.provider;\n\n    // Use client credentials from resolved options\n    const clientId = this.options.clientId;\n    const clientSecret = this.options.clientSecret;\n\n    // Use resolved serverUrl (no fallbacks needed)\n    const serverUrl = this.options.serverUrl;\n\n    const strategyOptions = provider.strategyOptions({\n      serverUrl,\n      clientId,\n      clientSecret,\n      callbackPath: this.options.endpoints.callback,\n    });\n\n    const strategy = new provider.strategy(\n      strategyOptions,\n      (accessToken: string, refreshToken: string, profile: any, done: any) => {\n        try {\n          const mappedProfile = provider.profileMapper(profile);\n          return done(null, {\n            profile: mappedProfile,\n            accessToken,\n            provider: provider.name,\n          });\n        } catch (error) {\n          return done(error, null);\n        }\n      },\n    );\n\n    passport.use(STRATEGY_NAME, strategy);\n  }\n\n  getStrategyName(): string {\n    return STRATEGY_NAME;\n  }\n}\n"]}