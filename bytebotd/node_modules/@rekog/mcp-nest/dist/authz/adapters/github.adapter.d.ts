import { Logger } from '@nestjs/common';
import { IOAuthStore } from '../stores/oauth-store.interface';
import { OAuthModuleOptions } from '../providers/oauth-provider.interface';
export declare class GitHubAdapter {
    private readonly store;
    private readonly options;
    private readonly logger;
    constructor(store: IOAuthStore, options: OAuthModuleOptions);
    static create(name: string): {
        new (name: string): {
            readonly logger: Logger;
            readonly name: string;
            find(id: string): Promise<any | null>;
            findClient(clientId: string): Promise<any | null>;
            findSession(sessionId: string): Promise<any | null>;
            findToken(tokenId: string): Promise<any | null>;
            findGrant(grantId: string): Promise<any | null>;
            formatClientForOidc(client: any): any;
            findByUserCode(userCode: string): Promise<any | null>;
            findByDeviceInfo(deviceInfo: any): Promise<any | null>;
            upsert(id: string, payload: any, expiresIn?: number): Promise<void>;
            upsertClient(clientId: string, payload: any): Promise<void>;
            upsertSession(sessionId: string, payload: any, expiresAt?: number): Promise<void>;
            upsertToken(tokenId: string, payload: any, expiresAt?: number): Promise<void>;
            upsertGrant(grantId: string, payload: any, expiresAt?: number): Promise<void>;
            destroy(id: string): Promise<void>;
            destroyClient(clientId: string): Promise<void>;
            destroySession(sessionId: string): Promise<void>;
            destroyToken(tokenId: string): Promise<void>;
            destroyGrant(grantId: string): Promise<void>;
            revokeByGrantId(grantId: string): Promise<void>;
            consume(id: string): Promise<void>;
        };
    };
    static findAccount(ctx: any, id: string): Promise<{
        accountId: string;
        claims(use: string, scope: string): Promise<any>;
    }>;
}
//# sourceMappingURL=github.adapter.d.ts.map