{"version":3,"file":"github.adapter.js","sourceRoot":"","sources":["../../../src/authz/adapters/github.adapter.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, Inject, Logger } from '@nestjs/common';\nimport { IOAuthStore } from '../stores/oauth-store.interface';\nimport { OAuthModuleOptions } from '../providers/oauth-provider.interface';\n\n/**\n * GitHub Adapter for OIDC Provider\n *\n * This adapter bridges the gap between the OIDC provider and GitHub authentication.\n * It implements the oidc-provider adapter interface to store and retrieve\n * OIDC-related data while integrating with GitHub for user identity.\n */\n@Injectable()\nexport class GitHubAdapter {\n  private readonly logger = new Logger(GitHubAdapter.name);\n\n  constructor(\n    @Inject('IOAuthStore') private readonly store: IOAuthStore,\n    @Inject('OAUTH_MODULE_OPTIONS')\n    private readonly options: OAuthModuleOptions,\n  ) {}\n\n  /**\n   * OIDC Provider Adapter Factory Function\n   * This is called by oidc-provider to create adapter instances\n   */\n  static create(name: string) {\n    return class OidcAdapterInstance {\n      public readonly logger: Logger;\n\n      constructor(public readonly name: string) {\n        this.logger = new Logger(`OidcAdapter:${name}`);\n      }\n\n      /**\n       * Find a stored value by key\n       */\n      async find(id: string): Promise<any | null> {\n        this.logger.debug(`Finding ${this.name} with id: ${id}`);\n\n        try {\n          switch (this.name) {\n            case 'Client':\n              // Use existing client service to find clients\n              const client = await this.findClient(id);\n              return client ? this.formatClientForOidc(client) : null;\n\n            case 'Session':\n              return await this.findSession(id);\n\n            case 'AccessToken':\n            case 'RefreshToken':\n            case 'AuthorizationCode':\n            case 'IdToken':\n              return await this.findToken(id);\n\n            case 'Grant':\n              return await this.findGrant(id);\n\n            default:\n              this.logger.warn(`Unknown adapter type: ${this.name}`);\n              return null;\n          }\n        } catch (error) {\n          this.logger.error(`Error finding ${this.name}:`, error);\n          return null;\n        }\n      }\n\n      /**\n       * Find a client by client_id\n       */\n      public async findClient(clientId: string): Promise<any | null> {\n        // This would typically use your ClientService\n        // For now, return a basic client structure\n        return {\n          client_id: clientId,\n          client_secret: 'dummy_secret', // Should come from your client store\n          redirect_uris: ['http://localhost:3000/callback'],\n          grant_types: ['authorization_code', 'refresh_token'],\n          response_types: ['code'],\n          token_endpoint_auth_method: 'client_secret_basic',\n        };\n      }\n\n      /**\n       * Find a session by session ID\n       */\n      public async findSession(sessionId: string): Promise<any | null> {\n        // Sessions are typically stored in memory or cache\n        // Return null for now - sessions will be handled by the interaction flow\n        return null;\n      }\n\n      /**\n       * Find a token (access token, refresh token, etc.)\n       */\n      public async findToken(tokenId: string): Promise<any | null> {\n        // Tokens would be stored with their type and relevant data\n        // This is a simplified implementation\n        return null;\n      }\n\n      /**\n       * Find a grant by grant ID\n       */\n      public async findGrant(grantId: string): Promise<any | null> {\n        // Grants represent the consent given by the user\n        return null;\n      }\n\n      /**\n       * Format client data for OIDC provider consumption\n       */\n      public formatClientForOidc(client: any): any {\n        return {\n          client_id: client.client_id,\n          client_secret: client.client_secret,\n          redirect_uris: client.redirect_uris || [],\n          grant_types: client.grant_types || ['authorization_code'],\n          response_types: client.response_types || ['code'],\n          token_endpoint_auth_method:\n            client.token_endpoint_auth_method || 'client_secret_basic',\n          scope: client.scope || 'openid profile email',\n        };\n      }\n\n      /**\n       * Find a stored value by user account and client\n       */\n      async findByUserCode(userCode: string): Promise<any | null> {\n        this.logger.debug(`Finding ${this.name} by user code: ${userCode}`);\n        return null;\n      }\n\n      /**\n       * Find a stored value by device info\n       */\n      async findByDeviceInfo(deviceInfo: any): Promise<any | null> {\n        this.logger.debug(`Finding ${this.name} by device info`);\n        return null;\n      }\n\n      /**\n       * Store or update a value\n       */\n      async upsert(\n        id: string,\n        payload: any,\n        expiresIn?: number,\n      ): Promise<void> {\n        this.logger.debug(`Upserting ${this.name} with id: ${id}`);\n\n        try {\n          const expiresAt = expiresIn\n            ? Date.now() + expiresIn * 1000\n            : undefined;\n\n          switch (this.name) {\n            case 'Client':\n              await this.upsertClient(id, payload);\n              break;\n\n            case 'Session':\n              await this.upsertSession(id, payload, expiresAt);\n              break;\n\n            case 'AccessToken':\n            case 'RefreshToken':\n            case 'AuthorizationCode':\n            case 'IdToken':\n              await this.upsertToken(id, payload, expiresAt);\n              break;\n\n            case 'Grant':\n              await this.upsertGrant(id, payload, expiresAt);\n              break;\n\n            default:\n              this.logger.warn(`Unknown adapter type for upsert: ${this.name}`);\n          }\n        } catch (error) {\n          this.logger.error(`Error upserting ${this.name}:`, error);\n          throw error;\n        }\n      }\n\n      /**\n       * Store or update a client\n       */\n      public async upsertClient(clientId: string, payload: any): Promise<void> {\n        // This would typically use your ClientService\n        this.logger.debug(`Client upsert: ${clientId}`, payload);\n      }\n\n      /**\n       * Store or update a session\n       */\n      public async upsertSession(\n        sessionId: string,\n        payload: any,\n        expiresAt?: number,\n      ): Promise<void> {\n        // Store session data - typically in cache or memory\n        this.logger.debug(`Session upsert: ${sessionId}`);\n      }\n\n      /**\n       * Store or update a token\n       */\n      public async upsertToken(\n        tokenId: string,\n        payload: any,\n        expiresAt?: number,\n      ): Promise<void> {\n        // Store token with expiration\n        this.logger.debug(`Token upsert: ${tokenId}, expires: ${expiresAt}`);\n      }\n\n      /**\n       * Store or update a grant\n       */\n      public async upsertGrant(\n        grantId: string,\n        payload: any,\n        expiresAt?: number,\n      ): Promise<void> {\n        // Store grant information\n        this.logger.debug(`Grant upsert: ${grantId}`);\n      }\n\n      /**\n       * Remove a stored value\n       */\n      async destroy(id: string): Promise<void> {\n        this.logger.debug(`Destroying ${this.name} with id: ${id}`);\n\n        try {\n          switch (this.name) {\n            case 'Client':\n              await this.destroyClient(id);\n              break;\n\n            case 'Session':\n              await this.destroySession(id);\n              break;\n\n            case 'AccessToken':\n            case 'RefreshToken':\n            case 'AuthorizationCode':\n            case 'IdToken':\n              await this.destroyToken(id);\n              break;\n\n            case 'Grant':\n              await this.destroyGrant(id);\n              break;\n\n            default:\n              this.logger.warn(\n                `Unknown adapter type for destroy: ${this.name}`,\n              );\n          }\n        } catch (error) {\n          this.logger.error(`Error destroying ${this.name}:`, error);\n          throw error;\n        }\n      }\n\n      /**\n       * Remove a client\n       */\n      public async destroyClient(clientId: string): Promise<void> {\n        this.logger.debug(`Client destroy: ${clientId}`);\n      }\n\n      /**\n       * Remove a session\n       */\n      public async destroySession(sessionId: string): Promise<void> {\n        this.logger.debug(`Session destroy: ${sessionId}`);\n      }\n\n      /**\n       * Remove a token\n       */\n      public async destroyToken(tokenId: string): Promise<void> {\n        this.logger.debug(`Token destroy: ${tokenId}`);\n      }\n\n      /**\n       * Remove a grant\n       */\n      public async destroyGrant(grantId: string): Promise<void> {\n        this.logger.debug(`Grant destroy: ${grantId}`);\n      }\n\n      /**\n       * Remove expired entries\n       */\n      async revokeByGrantId(grantId: string): Promise<void> {\n        this.logger.debug(`Revoking ${this.name} by grant id: ${grantId}`);\n        // Remove all tokens/entries associated with a specific grant\n      }\n\n      /**\n       * Consume a token (mark it as used)\n       */\n      async consume(id: string): Promise<void> {\n        this.logger.debug(`Consuming ${this.name} with id: ${id}`);\n        // Mark token as consumed (for one-time use tokens like authorization codes)\n      }\n    };\n  }\n\n  /**\n   * Account finder for OIDC provider\n   * This is called to resolve account information during authentication\n   */\n  static async findAccount(ctx: any, id: string) {\n    const logger = new Logger('GitHubAdapter:findAccount');\n    logger.debug(`Finding account: ${id}`);\n\n    // Return account information based on the GitHub user ID\n    return {\n      accountId: id,\n      async claims(use: string, scope: string) {\n        logger.debug(\n          `Getting claims for account ${id}, use: ${use}, scope: ${scope}`,\n        );\n\n        // Base claims\n        const claims: any = {\n          sub: id,\n        };\n\n        // Add claims based on scope\n        if (scope.includes('profile')) {\n          claims.preferred_username = id;\n          // Additional profile claims would be populated here\n          // based on stored GitHub user data\n        }\n\n        if (scope.includes('email')) {\n          // Email claims would be populated here\n          // based on stored GitHub user data\n        }\n\n        return claims;\n      },\n    };\n  }\n}\n"]}