{"version":3,"file":"oidc.adapter.js","sourceRoot":"","sources":["../../../src/authz/adapters/oidc.adapter.ts"],"names":[],"mappings":"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","sourcesContent":["import { Logger } from '@nestjs/common';\n\n/**\n * Simple Memory Adapter for OIDC Provider\n * \n * This is a basic in-memory adapter for oidc-provider.\n * For production, you should implement persistent storage.\n */\nexport class OidcMemoryAdapter {\n  private static storage = new Map<string, any>();\n  private logger = new Logger(`OidcAdapter:${this.name}`);\n\n  constructor(private readonly name: string) {}\n\n  async find(id: string): Promise<any | null> {\n    this.logger.debug(`Finding ${this.name} with id: ${id}`);\n    \n    const key = this.key(id);\n    const item = OidcMemoryAdapter.storage.get(key);\n    \n    if (!item) {\n      this.logger.debug(`${this.name} not found: ${id}`);\n      return null;\n    }\n\n    // Check if item has expired\n    if (item.expiresAt && item.expiresAt < Date.now()) {\n      this.logger.debug(`${this.name} expired: ${id}`);\n      OidcMemoryAdapter.storage.delete(key);\n      return null;\n    }\n\n    this.logger.debug(`Found ${this.name}: ${id}`);\n    return item.payload;\n  }\n\n  async findByUserCode(userCode: string): Promise<any | null> {\n    this.logger.debug(`Finding ${this.name} by user code: ${userCode}`);\n    \n    for (const [key, item] of OidcMemoryAdapter.storage.entries()) {\n      if (key.startsWith(`${this.name}:`) && item.payload?.userCode === userCode) {\n        // Check if expired\n        if (item.expiresAt && item.expiresAt < Date.now()) {\n          OidcMemoryAdapter.storage.delete(key);\n          continue;\n        }\n        return item.payload;\n      }\n    }\n    \n    return null;\n  }\n\n  async findByDeviceInfo(deviceInfo: any): Promise<any | null> {\n    this.logger.debug(`Finding ${this.name} by device info`);\n    \n    for (const [key, item] of OidcMemoryAdapter.storage.entries()) {\n      if (key.startsWith(`${this.name}:`) && \n          item.payload?.deviceInfo === deviceInfo) {\n        // Check if expired\n        if (item.expiresAt && item.expiresAt < Date.now()) {\n          OidcMemoryAdapter.storage.delete(key);\n          continue;\n        }\n        return item.payload;\n      }\n    }\n    \n    return null;\n  }\n\n  async upsert(id: string, payload: any, expiresIn?: number): Promise<void> {\n    this.logger.debug(`Upserting ${this.name} with id: ${id}`);\n    \n    const key = this.key(id);\n    const expiresAt = expiresIn ? Date.now() + (expiresIn * 1000) : undefined;\n    \n    OidcMemoryAdapter.storage.set(key, {\n      payload,\n      expiresAt,\n    });\n    \n    this.logger.debug(`Upserted ${this.name}: ${id}${expiresAt ? ` (expires: ${new Date(expiresAt).toISOString()})` : ''}`);\n  }\n\n  async destroy(id: string): Promise<void> {\n    this.logger.debug(`Destroying ${this.name} with id: ${id}`);\n    \n    const key = this.key(id);\n    const deleted = OidcMemoryAdapter.storage.delete(key);\n    \n    if (deleted) {\n      this.logger.debug(`Destroyed ${this.name}: ${id}`);\n    } else {\n      this.logger.debug(`${this.name} not found for destruction: ${id}`);\n    }\n  }\n\n  async revokeByGrantId(grantId: string): Promise<void> {\n    this.logger.debug(`Revoking ${this.name} by grant id: ${grantId}`);\n    \n    const keysToDelete: string[] = [];\n    \n    for (const [key, item] of OidcMemoryAdapter.storage.entries()) {\n      if (key.startsWith(`${this.name}:`) && item.payload?.grantId === grantId) {\n        keysToDelete.push(key);\n      }\n    }\n    \n    keysToDelete.forEach(key => {\n      OidcMemoryAdapter.storage.delete(key);\n      this.logger.debug(`Revoked ${this.name} with key: ${key}`);\n    });\n    \n    this.logger.debug(`Revoked ${keysToDelete.length} ${this.name} entries for grant: ${grantId}`);\n  }\n\n  async consume(id: string): Promise<void> {\n    this.logger.debug(`Consuming ${this.name} with id: ${id}`);\n    \n    const key = this.key(id);\n    const item = OidcMemoryAdapter.storage.get(key);\n    \n    if (item) {\n      // Mark as consumed\n      item.payload.consumed = Date.now();\n      OidcMemoryAdapter.storage.set(key, item);\n      this.logger.debug(`Consumed ${this.name}: ${id}`);\n    } else {\n      this.logger.debug(`${this.name} not found for consumption: ${id}`);\n    }\n  }\n\n  private key(id: string): string {\n    return `${this.name}:${id}`;\n  }\n\n  /**\n   * Static factory method for oidc-provider\n   */\n  static create(name: string) {\n    return OidcMemoryAdapter.bind(null, name);\n  }\n\n  /**\n   * Clear all stored data (useful for testing)\n   */\n  static clearAll(): void {\n    OidcMemoryAdapter.storage.clear();\n    new Logger('OidcMemoryAdapter').debug('Cleared all stored data');\n  }\n\n  /**\n   * Get storage statistics\n   */\n  static getStats() {\n    const stats: Record<string, number> = {};\n    \n    for (const key of OidcMemoryAdapter.storage.keys()) {\n      const [type] = key.split(':', 1);\n      stats[type] = (stats[type] || 0) + 1;\n    }\n    \n    return {\n      total: OidcMemoryAdapter.storage.size,\n      byType: stats,\n    };\n  }\n}"]}