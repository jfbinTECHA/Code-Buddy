"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OidcMemoryAdapter = void 0;
const common_1 = require("@nestjs/common");
class OidcMemoryAdapter {
    constructor(name) {
        this.name = name;
        this.logger = new common_1.Logger(`OidcAdapter:${this.name}`);
    }
    async find(id) {
        this.logger.debug(`Finding ${this.name} with id: ${id}`);
        const key = this.key(id);
        const item = OidcMemoryAdapter.storage.get(key);
        if (!item) {
            this.logger.debug(`${this.name} not found: ${id}`);
            return null;
        }
        if (item.expiresAt && item.expiresAt < Date.now()) {
            this.logger.debug(`${this.name} expired: ${id}`);
            OidcMemoryAdapter.storage.delete(key);
            return null;
        }
        this.logger.debug(`Found ${this.name}: ${id}`);
        return item.payload;
    }
    async findByUserCode(userCode) {
        this.logger.debug(`Finding ${this.name} by user code: ${userCode}`);
        for (const [key, item] of OidcMemoryAdapter.storage.entries()) {
            if (key.startsWith(`${this.name}:`) && item.payload?.userCode === userCode) {
                if (item.expiresAt && item.expiresAt < Date.now()) {
                    OidcMemoryAdapter.storage.delete(key);
                    continue;
                }
                return item.payload;
            }
        }
        return null;
    }
    async findByDeviceInfo(deviceInfo) {
        this.logger.debug(`Finding ${this.name} by device info`);
        for (const [key, item] of OidcMemoryAdapter.storage.entries()) {
            if (key.startsWith(`${this.name}:`) &&
                item.payload?.deviceInfo === deviceInfo) {
                if (item.expiresAt && item.expiresAt < Date.now()) {
                    OidcMemoryAdapter.storage.delete(key);
                    continue;
                }
                return item.payload;
            }
        }
        return null;
    }
    async upsert(id, payload, expiresIn) {
        this.logger.debug(`Upserting ${this.name} with id: ${id}`);
        const key = this.key(id);
        const expiresAt = expiresIn ? Date.now() + (expiresIn * 1000) : undefined;
        OidcMemoryAdapter.storage.set(key, {
            payload,
            expiresAt,
        });
        this.logger.debug(`Upserted ${this.name}: ${id}${expiresAt ? ` (expires: ${new Date(expiresAt).toISOString()})` : ''}`);
    }
    async destroy(id) {
        this.logger.debug(`Destroying ${this.name} with id: ${id}`);
        const key = this.key(id);
        const deleted = OidcMemoryAdapter.storage.delete(key);
        if (deleted) {
            this.logger.debug(`Destroyed ${this.name}: ${id}`);
        }
        else {
            this.logger.debug(`${this.name} not found for destruction: ${id}`);
        }
    }
    async revokeByGrantId(grantId) {
        this.logger.debug(`Revoking ${this.name} by grant id: ${grantId}`);
        const keysToDelete = [];
        for (const [key, item] of OidcMemoryAdapter.storage.entries()) {
            if (key.startsWith(`${this.name}:`) && item.payload?.grantId === grantId) {
                keysToDelete.push(key);
            }
        }
        keysToDelete.forEach(key => {
            OidcMemoryAdapter.storage.delete(key);
            this.logger.debug(`Revoked ${this.name} with key: ${key}`);
        });
        this.logger.debug(`Revoked ${keysToDelete.length} ${this.name} entries for grant: ${grantId}`);
    }
    async consume(id) {
        this.logger.debug(`Consuming ${this.name} with id: ${id}`);
        const key = this.key(id);
        const item = OidcMemoryAdapter.storage.get(key);
        if (item) {
            item.payload.consumed = Date.now();
            OidcMemoryAdapter.storage.set(key, item);
            this.logger.debug(`Consumed ${this.name}: ${id}`);
        }
        else {
            this.logger.debug(`${this.name} not found for consumption: ${id}`);
        }
    }
    key(id) {
        return `${this.name}:${id}`;
    }
    static create(name) {
        return OidcMemoryAdapter.bind(null, name);
    }
    static clearAll() {
        OidcMemoryAdapter.storage.clear();
        new common_1.Logger('OidcMemoryAdapter').debug('Cleared all stored data');
    }
    static getStats() {
        const stats = {};
        for (const key of OidcMemoryAdapter.storage.keys()) {
            const [type] = key.split(':', 1);
            stats[type] = (stats[type] || 0) + 1;
        }
        return {
            total: OidcMemoryAdapter.storage.size,
            byType: stats,
        };
    }
}
exports.OidcMemoryAdapter = OidcMemoryAdapter;
OidcMemoryAdapter.storage = new Map();
//# sourceMappingURL=oidc.adapter.js.map