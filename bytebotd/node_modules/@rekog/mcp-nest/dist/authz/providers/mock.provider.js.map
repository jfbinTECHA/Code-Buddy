{"version":3,"file":"mock.provider.js","sourceRoot":"","sources":["../../../src/authz/providers/mock.provider.ts"],"names":[],"mappings":";;;AAGA,MAAM,YAAY;IAGhB,YACU,OAAY,EACZ,MAKC;QAND,YAAO,GAAP,OAAO,CAAK;QACZ,WAAM,GAAN,MAAM,CAKL;QATX,SAAI,GAAG,MAAM,CAAC;IAUX,CAAC;IAEJ,YAAY,CAAC,IAAS,EAAE,QAAc;QAEpC,MAAM,WAAW,GAAG;YAClB,EAAE,EAAE,cAAc;YAClB,QAAQ,EAAE,WAAW;YACrB,KAAK,EAAE,WAAW;YAClB,WAAW,EAAE,WAAW;YACxB,IAAI,EAAE,WAAW;YACjB,MAAM,EAAE,CAAC,EAAE,KAAK,EAAE,kBAAkB,EAAE,CAAC;YACvC,MAAM,EAAE,CAAC,EAAE,KAAK,EAAE,8BAA8B,EAAE,CAAC;YACnD,QAAQ,EAAE,MAAM;YAChB,IAAI,EAAE,IAAI;YACV,KAAK,EAAE,EAAE;SACV,CAAC;QAGF,IAAI,CAAC,MAAM,CACT,mBAAmB,EACnB,oBAAoB,EACpB,WAAW,EACX,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE;YACZ,IAAI,GAAG,EAAE,CAAC;gBACR,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACxB,CAAC;YACD,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACrB,CAAC,CACF,CAAC;IACJ,CAAC;IAED,OAAO,CAAC,IAAS,EAAE,GAAG,IAAW;QAE/B,MAAM,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;QAC1B,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC;IAClB,CAAC;IAED,IAAI,CAAC,SAAc;QAEjB,OAAO,CAAC,KAAK,CAAC,6BAA6B,EAAE,SAAS,CAAC,CAAC;IAC1D,CAAC;CACF;AAEY,QAAA,iBAAiB,GAAwB;IACpD,IAAI,EAAE,MAAM;IACZ,WAAW,EAAE,6BAA6B;IAC1C,QAAQ,EAAE,YAAY;IACtB,eAAe,EAAE,CAAC,EAAE,SAAS,EAAE,QAAQ,EAAE,YAAY,EAAE,YAAY,EAAE,EAAE,EAAE,CAAC,CAAC;QACzE,QAAQ,EAAE,QAAQ,IAAI,gBAAgB;QACtC,YAAY,EAAE,YAAY,IAAI,oBAAoB;QAClD,WAAW,EAAE,GAAG,SAAS,IAAI,YAAY,EAAE;KAC5C,CAAC;IACF,KAAK,EAAE,CAAC,WAAW,EAAE,YAAY,CAAC;IAClC,aAAa,EAAE,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;QAC3B,EAAE,EAAE,OAAO,CAAC,EAAE;QACd,QAAQ,EAAE,OAAO,CAAC,QAAQ,IAAI,OAAO,CAAC,KAAK;QAC3C,KAAK,EAAE,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,IAAI,kBAAkB;QACvD,WAAW,EAAE,OAAO,CAAC,WAAW,IAAI,OAAO,CAAC,IAAI,IAAI,WAAW;QAC/D,SAAS,EAAE,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,IAAI,8BAA8B;QACvE,GAAG,EAAE,OAAO;KACb,CAAC;CACH,CAAC","sourcesContent":["import { OAuthProviderConfig } from './oauth-provider.interface';\n\n// Mock strategy that immediately succeeds without external OAuth flow\nclass MockStrategy {\n  name = 'mock';\n\n  constructor(\n    private options: any,\n    private verify: (\n      accessToken: string,\n      refreshToken: string,\n      profile: any,\n      done: (error: any, user?: any) => void,\n    ) => void,\n  ) {}\n\n  authenticate(_req: any, _options?: any) {\n    // Simulate a successful authentication with hardcoded user data\n    const mockProfile = {\n      id: 'mock-user-id',\n      username: 'test-user',\n      login: 'test-user',\n      displayName: 'Test User',\n      name: 'Test User',\n      emails: [{ value: 'test@example.com' }],\n      photos: [{ value: 'https://github.com/ghost.png' }],\n      provider: 'mock',\n      _raw: '{}',\n      _json: {},\n    };\n\n    // Call the verify callback immediately with mock data\n    this.verify(\n      'mock-access-token',\n      'mock-refresh-token',\n      mockProfile,\n      (err, user) => {\n        if (err) {\n          return this.fail(err);\n        }\n        this.success(user);\n      },\n    );\n  }\n\n  success(user: any, ...args: any[]) {\n    // This method would be provided by passport, but we need to simulate it\n    const req = args[0] || {};\n    req.user = user;\n  }\n\n  fail(challenge: any) {\n    // This method would be provided by passport, but we need to simulate it\n    console.error('Mock authentication failed:', challenge);\n  }\n}\n\nexport const MockOAuthProvider: OAuthProviderConfig = {\n  name: 'mock',\n  displayName: 'Mock Provider (Development)',\n  strategy: MockStrategy,\n  strategyOptions: ({ serverUrl, clientId, clientSecret, callbackPath }) => ({\n    clientID: clientId || 'mock-client-id',\n    clientSecret: clientSecret || 'mock-client-secret',\n    callbackURL: `${serverUrl}/${callbackPath}`,\n  }),\n  scope: ['read:user', 'user:email'],\n  profileMapper: (profile) => ({\n    id: profile.id,\n    username: profile.username || profile.login,\n    email: profile.emails?.[0]?.value || 'test@example.com',\n    displayName: profile.displayName || profile.name || 'Test User',\n    avatarUrl: profile.photos?.[0]?.value || 'https://github.com/ghost.png',\n    raw: profile,\n  }),\n};\n"]}