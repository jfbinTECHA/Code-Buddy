"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MockOAuthProvider = void 0;
class MockStrategy {
    constructor(options, verify) {
        this.options = options;
        this.verify = verify;
        this.name = 'mock';
    }
    authenticate(_req, _options) {
        const mockProfile = {
            id: 'mock-user-id',
            username: 'test-user',
            login: 'test-user',
            displayName: 'Test User',
            name: 'Test User',
            emails: [{ value: 'test@example.com' }],
            photos: [{ value: 'https://github.com/ghost.png' }],
            provider: 'mock',
            _raw: '{}',
            _json: {},
        };
        this.verify('mock-access-token', 'mock-refresh-token', mockProfile, (err, user) => {
            if (err) {
                return this.fail(err);
            }
            this.success(user);
        });
    }
    success(user, ...args) {
        const req = args[0] || {};
        req.user = user;
    }
    fail(challenge) {
        console.error('Mock authentication failed:', challenge);
    }
}
exports.MockOAuthProvider = {
    name: 'mock',
    displayName: 'Mock Provider (Development)',
    strategy: MockStrategy,
    strategyOptions: ({ serverUrl, clientId, clientSecret, callbackPath }) => ({
        clientID: clientId || 'mock-client-id',
        clientSecret: clientSecret || 'mock-client-secret',
        callbackURL: `${serverUrl}/${callbackPath}`,
    }),
    scope: ['read:user', 'user:email'],
    profileMapper: (profile) => ({
        id: profile.id,
        username: profile.username || profile.login,
        email: profile.emails?.[0]?.value || 'test@example.com',
        displayName: profile.displayName || profile.name || 'Test User',
        avatarUrl: profile.photos?.[0]?.value || 'https://github.com/ghost.png',
        raw: profile,
    }),
};
//# sourceMappingURL=mock.provider.js.map