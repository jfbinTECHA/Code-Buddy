{"version":3,"file":"oauth-provider.interface.js","sourceRoot":"","sources":["../../../src/authz/providers/oauth-provider.interface.ts"],"names":[],"mappings":"","sourcesContent":["import { IOAuthStore } from '../stores/oauth-store.interface';\n\n// Define a minimal placeholder for TypeORM options so the type remains\n// available without requiring the optional `@nestjs/typeorm` package.\n// Consumers who use the TypeORM store should install the package to get\n// the full type definitions.\ntype TypeOrmModuleOptions = Record<string, unknown>;\n\nexport interface OAuthProviderConfig {\n  name: string;\n  displayName?: string;\n  strategy: any; // Passport Strategy constructor\n  strategyOptions: (options: {\n    serverUrl: string;\n    clientId: string;\n    clientSecret: string;\n    callbackPath?: string; // Optional custom callback path\n  }) => any;\n  scope?: string[];\n  profileMapper: (profile: any) => OAuthUserProfile;\n}\n\nexport interface OAuthUserProfile {\n  id: string;\n  username: string;\n  email?: string;\n  displayName?: string;\n  avatarUrl?: string;\n  raw?: any; // Original profile data\n}\n\n// Store configuration union type\nexport type StoreConfiguration =\n  | { type: 'typeorm'; options: TypeOrmModuleOptions }\n  | { type: 'custom'; store: IOAuthStore }\n  | { type: 'memory' }\n  | undefined; // Default to memory store\n\nexport interface OAuthEndpointConfiguration {\n  wellKnownAuthorizationServerMetadata?: string; // Default: '/.well-known/oauth-authorization-server'\n  wellKnownProtectedResourceMetadata?: string | string[]; // Default: '/.well-known/oauth-protected-resource'\n  register?: string; // Default: '/register'\n  authorize?: string; // Default: '/authorize'\n  callback?: string; // Default: '/callback'\n  token?: string; // Default: '/token'\n  revoke?: string; // Default: '/revoke'\n}\n\nexport interface OAuthEndpointDisableOptions {\n  wellKnownAuthorizationServerMetadata?: boolean;\n  wellKnownProtectedResourceMetadata?: boolean;\n}\n\nexport interface OAuthUserModuleOptions {\n  provider: OAuthProviderConfig;\n\n  // Required OAuth Provider Credentials\n  clientId: string;\n  clientSecret: string;\n\n  // Required JWT Configuration\n  jwtSecret: string;\n\n  // Server Configuration\n  serverUrl?: string;\n  resource?: string; // should be the endpoint clients connect to, e.g.: 'https://localhost:3000/mcp'\n  // JWT Configuration\n  jwtIssuer?: string;\n  jwtAudience?: string;\n  jwtAccessTokenExpiresIn?: string;\n  jwtRefreshTokenExpiresIn?: string;\n  enableRefreshTokens?: boolean;\n\n  // Cookie Configuration\n  cookieSecure?: boolean;\n  cookieMaxAge?: number;\n\n  // OAuth Session Configuration\n  oauthSessionExpiresIn?: number; // in milliseconds\n  authCodeExpiresIn?: number; // in milliseconds\n\n  // Protected Resource Metadata Configuration\n  protectedResourceMetadata?: {\n    scopesSupported?: string[];\n    bearerMethodsSupported?: string[];\n    mcpVersionsSupported?: string[];\n  };\n\n  // Authorization Server Metadata Configuration\n  authorizationServerMetadata?: {\n    responseTypesSupported?: string[];\n    responseModesSupported?: string[];\n    grantTypesSupported?: string[];\n    tokenEndpointAuthMethodsSupported?: string[];\n    scopesSupported?: string[];\n    codeChallengeMethodsSupported?: string[];\n  };\n\n  // Storage Configuration - single property for all storage options\n  storeConfiguration?: StoreConfiguration;\n  apiPrefix?: string;\n\n  // Endpoint Configuration\n  endpoints?: OAuthEndpointConfiguration;\n  disableEndpoints?: OAuthEndpointDisableOptions;\n}\n\nexport interface OAuthModuleDefaults {\n  serverUrl: string;\n  resource: string; // Default resource URL\n  jwtIssuer: string;\n  jwtAudience: string;\n  jwtAccessTokenExpiresIn: string;\n  jwtRefreshTokenExpiresIn: string;\n  enableRefreshTokens: boolean;\n  cookieMaxAge: number;\n  oauthSessionExpiresIn: number;\n  authCodeExpiresIn: number;\n  nodeEnv: string;\n  apiPrefix: string;\n  endpoints: OAuthEndpointConfiguration;\n  disableEndpoints: OAuthEndpointDisableOptions;\n  protectedResourceMetadata: {\n    scopesSupported: string[];\n    bearerMethodsSupported: string[];\n    mcpVersionsSupported: string[];\n  };\n  authorizationServerMetadata: {\n    responseTypesSupported: string[];\n    responseModesSupported: string[];\n    grantTypesSupported: string[];\n    tokenEndpointAuthMethodsSupported: string[];\n    scopesSupported: string[];\n    codeChallengeMethodsSupported: string[];\n  };\n}\n\n// Resolved options after merging with defaults\nexport type OAuthModuleOptions = Required<\n  Pick<\n    OAuthUserModuleOptions,\n    'provider' | 'clientId' | 'clientSecret' | 'jwtSecret'\n  >\n> &\n  Required<OAuthModuleDefaults> & {\n    // Optional fields that may remain undefined\n    cookieSecure: boolean;\n    storeConfiguration?: StoreConfiguration;\n  };\n\nexport interface OAuthSession {\n  sessionId: string;\n  state: string;\n  clientId?: string;\n  redirectUri?: string;\n  codeChallenge?: string;\n  codeChallengeMethod?: string;\n  oauthState?: string;\n  scope?: string;\n  resource?: string;\n  expiresAt: number;\n}\n"]}