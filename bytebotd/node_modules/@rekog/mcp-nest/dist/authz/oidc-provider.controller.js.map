{"version":3,"file":"oidc-provider.controller.js","sourceRoot":"","sources":["../../src/authz/oidc-provider.controller.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Controller,\n  Get,\n  Post,\n  Req,\n  Res,\n  Next,\n  Query,\n  Body,\n  UseGuards,\n  Inject,\n  Logger,\n  BadRequestException,\n} from '@nestjs/common';\nimport { Request, Response, NextFunction } from 'express';\nimport { InjectOidcProvider } from 'nest-oidc-provider';\nimport passport from 'passport';\nimport { AuthenticatedRequest, McpAuthJwtGuard } from './guards/jwt-auth.guard';\nimport {\n  OAuthModuleOptions,\n  OAuthUserProfile,\n} from './providers/oauth-provider.interface';\nimport { ClientService } from './services/client.service';\nimport { JwtTokenService } from './services/jwt-token.service';\nimport { STRATEGY_NAME } from './services/oauth-strategy.service';\nimport { IOAuthStore } from './stores/oauth-store.interface';\n\ninterface GitHubAuthRequest extends Request {\n  user?: {\n    profile: OAuthUserProfile;\n    accessToken: string;\n    provider: string;\n  };\n}\n\n@Controller('oidc')\nexport class OidcProviderController {\n  private readonly logger = new Logger(OidcProviderController.name);\n\n  constructor(\n    @InjectOidcProvider() private readonly oidcProvider: any,\n    @Inject('OAUTH_MODULE_OPTIONS')\n    private readonly options: OAuthModuleOptions,\n    @Inject('IOAuthStore') private readonly store: IOAuthStore,\n    private readonly jwtTokenService: JwtTokenService,\n    private readonly clientService: ClientService,\n  ) {}\n\n  /**\n   * Custom interaction endpoint for GitHub authentication\n   * This replaces the default OIDC provider interaction flow\n   */\n  @Get('interaction/:uid')\n  async handleInteraction(\n    @Query('uid') uid: string,\n    @Req() req: Request,\n    @Res() res: Response,\n    @Next() next: NextFunction,\n  ) {\n    try {\n      // Get interaction details from OIDC provider\n      const details = await this.oidcProvider.interactionDetails(req, res);\n\n      this.logger.debug('OIDC Interaction details:', details);\n\n      // Store interaction details in session for callback\n      req.session = req.session || {};\n      (req.session as any).interactionUid = uid;\n      (req.session as any).interactionDetails = details;\n\n      // Redirect to GitHub authentication\n      passport.authenticate(STRATEGY_NAME, {\n        state: uid, // Use interaction UID as state\n      })(req, res, next);\n    } catch (error) {\n      this.logger.error('Interaction error:', error);\n      throw new BadRequestException('Failed to handle interaction');\n    }\n  }\n\n  /**\n   * GitHub OAuth callback - handles GitHub authentication result\n   * and completes OIDC interaction\n   */\n  @Get('callback')\n  handleGitHubCallback(\n    @Req() req: GitHubAuthRequest,\n    @Res() res: Response,\n    @Next() next: NextFunction,\n  ) {\n    passport.authenticate(\n      STRATEGY_NAME,\n      { session: false },\n      async (err: any, user: any) => {\n        try {\n          if (err) {\n            this.logger.error('GitHub callback error:', err);\n            throw new BadRequestException('GitHub authentication failed');\n          }\n\n          if (!user) {\n            throw new BadRequestException('GitHub authentication failed');\n          }\n\n          req.user = user;\n          await this.completeOidcInteraction(req, res);\n        } catch (error) {\n          next(error);\n        }\n      },\n    )(req, res, next);\n  }\n\n  /**\n   * Complete OIDC interaction after successful GitHub authentication\n   */\n  private async completeOidcInteraction(req: GitHubAuthRequest, res: Response) {\n    const user = req.user;\n    if (!user) {\n      throw new BadRequestException('No authenticated user');\n    }\n\n    const session = req.session as any;\n    const interactionUid = session?.interactionUid;\n    const interactionDetails = session?.interactionDetails;\n\n    if (!interactionUid || !interactionDetails) {\n      throw new BadRequestException('Missing interaction details');\n    }\n\n    try {\n      // Create account representation for OIDC provider\n      const account = {\n        accountId: user.profile.username,\n        profile: {\n          sub: user.profile.username,\n          name: user.profile.displayName || user.profile.username,\n          preferred_username: user.profile.username,\n          email: user.profile.email,\n          email_verified: true,\n        },\n      };\n\n      // Submit interaction result to OIDC provider\n      const result = {\n        login: {\n          accountId: account.accountId,\n          ts: Math.floor(Date.now() / 1000),\n        },\n        consent: {\n          grantId: interactionDetails.grantId,\n        },\n      };\n\n      // Complete the OIDC interaction\n      await this.oidcProvider.interactionFinished(req, res, result, {\n        mergeWithLastSubmission: false,\n      });\n\n      // Clear session data\n      delete session.interactionUid;\n      delete session.interactionDetails;\n\n      this.logger.log(\n        'OIDC interaction completed for user:',\n        user.profile.username,\n      );\n    } catch (error) {\n      this.logger.error('Failed to complete OIDC interaction:', error);\n      throw new BadRequestException('Failed to complete authentication');\n    }\n  }\n\n  /**\n   * Account lookup for OIDC provider\n   * This method is called by the OIDC provider to find account information\n   */\n  async findAccount(_ctx: any, id: string) {\n    // In a real implementation, you might want to fetch this from your user store\n    // For now, we'll create a minimal account representation\n    return {\n      accountId: id,\n      async claims() {\n        return {\n          sub: id,\n          // Additional claims would be populated here based on your requirements\n        };\n      },\n    };\n  }\n\n  /**\n   * Client validation endpoint for dynamic client registration\n   */\n  @Post('reg')\n  async registerClient(@Body() registrationDto: any) {\n    return await this.clientService.registerClient(registrationDto);\n  }\n\n  /**\n   * Token validation endpoint (introspection)\n   */\n  @Post('introspect')\n  @UseGuards(McpAuthJwtGuard)\n  validateToken(@Req() req: AuthenticatedRequest) {\n    return {\n      active: true,\n      sub: req.user.sub,\n      client_id: req.user.client_id,\n      scope: req.user.scope,\n      exp: req.user.exp,\n      iat: req.user.iat,\n      token_type: 'Bearer',\n    };\n  }\n\n  /**\n   * Health check endpoint for the OIDC provider\n   */\n  @Get('health')\n  getHealth() {\n    return {\n      status: 'ok',\n      service: 'oidc-provider',\n      timestamp: new Date().toISOString(),\n    };\n  }\n}\n"]}