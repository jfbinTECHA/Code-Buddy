"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var OidcProviderController_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.OidcProviderController = void 0;
const common_1 = require("@nestjs/common");
const nest_oidc_provider_1 = require("nest-oidc-provider");
const passport_1 = __importDefault(require("passport"));
const jwt_auth_guard_1 = require("./guards/jwt-auth.guard");
const client_service_1 = require("./services/client.service");
const jwt_token_service_1 = require("./services/jwt-token.service");
const oauth_strategy_service_1 = require("./services/oauth-strategy.service");
let OidcProviderController = OidcProviderController_1 = class OidcProviderController {
    constructor(oidcProvider, options, store, jwtTokenService, clientService) {
        this.oidcProvider = oidcProvider;
        this.options = options;
        this.store = store;
        this.jwtTokenService = jwtTokenService;
        this.clientService = clientService;
        this.logger = new common_1.Logger(OidcProviderController_1.name);
    }
    async handleInteraction(uid, req, res, next) {
        try {
            const details = await this.oidcProvider.interactionDetails(req, res);
            this.logger.debug('OIDC Interaction details:', details);
            req.session = req.session || {};
            req.session.interactionUid = uid;
            req.session.interactionDetails = details;
            passport_1.default.authenticate(oauth_strategy_service_1.STRATEGY_NAME, {
                state: uid,
            })(req, res, next);
        }
        catch (error) {
            this.logger.error('Interaction error:', error);
            throw new common_1.BadRequestException('Failed to handle interaction');
        }
    }
    handleGitHubCallback(req, res, next) {
        passport_1.default.authenticate(oauth_strategy_service_1.STRATEGY_NAME, { session: false }, async (err, user) => {
            try {
                if (err) {
                    this.logger.error('GitHub callback error:', err);
                    throw new common_1.BadRequestException('GitHub authentication failed');
                }
                if (!user) {
                    throw new common_1.BadRequestException('GitHub authentication failed');
                }
                req.user = user;
                await this.completeOidcInteraction(req, res);
            }
            catch (error) {
                next(error);
            }
        })(req, res, next);
    }
    async completeOidcInteraction(req, res) {
        const user = req.user;
        if (!user) {
            throw new common_1.BadRequestException('No authenticated user');
        }
        const session = req.session;
        const interactionUid = session?.interactionUid;
        const interactionDetails = session?.interactionDetails;
        if (!interactionUid || !interactionDetails) {
            throw new common_1.BadRequestException('Missing interaction details');
        }
        try {
            const account = {
                accountId: user.profile.username,
                profile: {
                    sub: user.profile.username,
                    name: user.profile.displayName || user.profile.username,
                    preferred_username: user.profile.username,
                    email: user.profile.email,
                    email_verified: true,
                },
            };
            const result = {
                login: {
                    accountId: account.accountId,
                    ts: Math.floor(Date.now() / 1000),
                },
                consent: {
                    grantId: interactionDetails.grantId,
                },
            };
            await this.oidcProvider.interactionFinished(req, res, result, {
                mergeWithLastSubmission: false,
            });
            delete session.interactionUid;
            delete session.interactionDetails;
            this.logger.log('OIDC interaction completed for user:', user.profile.username);
        }
        catch (error) {
            this.logger.error('Failed to complete OIDC interaction:', error);
            throw new common_1.BadRequestException('Failed to complete authentication');
        }
    }
    async findAccount(_ctx, id) {
        return {
            accountId: id,
            async claims() {
                return {
                    sub: id,
                };
            },
        };
    }
    async registerClient(registrationDto) {
        return await this.clientService.registerClient(registrationDto);
    }
    validateToken(req) {
        return {
            active: true,
            sub: req.user.sub,
            client_id: req.user.client_id,
            scope: req.user.scope,
            exp: req.user.exp,
            iat: req.user.iat,
            token_type: 'Bearer',
        };
    }
    getHealth() {
        return {
            status: 'ok',
            service: 'oidc-provider',
            timestamp: new Date().toISOString(),
        };
    }
};
exports.OidcProviderController = OidcProviderController;
__decorate([
    (0, common_1.Get)('interaction/:uid'),
    __param(0, (0, common_1.Query)('uid')),
    __param(1, (0, common_1.Req)()),
    __param(2, (0, common_1.Res)()),
    __param(3, (0, common_1.Next)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Object, Object, Function]),
    __metadata("design:returntype", Promise)
], OidcProviderController.prototype, "handleInteraction", null);
__decorate([
    (0, common_1.Get)('callback'),
    __param(0, (0, common_1.Req)()),
    __param(1, (0, common_1.Res)()),
    __param(2, (0, common_1.Next)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Object, Function]),
    __metadata("design:returntype", void 0)
], OidcProviderController.prototype, "handleGitHubCallback", null);
__decorate([
    (0, common_1.Post)('reg'),
    __param(0, (0, common_1.Body)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", Promise)
], OidcProviderController.prototype, "registerClient", null);
__decorate([
    (0, common_1.Post)('introspect'),
    (0, common_1.UseGuards)(jwt_auth_guard_1.McpAuthJwtGuard),
    __param(0, (0, common_1.Req)()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object]),
    __metadata("design:returntype", void 0)
], OidcProviderController.prototype, "validateToken", null);
__decorate([
    (0, common_1.Get)('health'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], OidcProviderController.prototype, "getHealth", null);
exports.OidcProviderController = OidcProviderController = OidcProviderController_1 = __decorate([
    (0, common_1.Controller)('oidc'),
    __param(0, (0, nest_oidc_provider_1.InjectOidcProvider)()),
    __param(1, (0, common_1.Inject)('OAUTH_MODULE_OPTIONS')),
    __param(2, (0, common_1.Inject)('IOAuthStore')),
    __metadata("design:paramtypes", [Object, Object, Object, jwt_token_service_1.JwtTokenService,
        client_service_1.ClientService])
], OidcProviderController);
//# sourceMappingURL=oidc-provider.controller.js.map