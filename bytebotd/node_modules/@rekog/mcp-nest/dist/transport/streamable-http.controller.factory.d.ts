import { CanActivate, Logger, Type } from '@nestjs/common';
import { ModuleRef } from '@nestjs/core';
import type { Request, Response } from 'express';
import { McpServer } from '@modelcontextprotocol/sdk/server/mcp.js';
import { StreamableHTTPServerTransport } from '@modelcontextprotocol/sdk/server/streamableHttp.js';
import { McpOptions } from '../interfaces';
import { McpRegistryService } from '../services/mcp-registry.service';
export declare function createStreamableHttpController(endpoint: string, guards?: Type<CanActivate>[], decorators?: ClassDecorator[]): {
    new (options: McpOptions, mcpModuleId: string, moduleRef: ModuleRef, toolRegistry: McpRegistryService): {
        readonly logger: Logger;
        transports: {
            [sessionId: string]: StreamableHTTPServerTransport;
        };
        mcpServers: {
            [sessionId: string]: McpServer;
        };
        isStatelessMode: boolean;
        readonly options: McpOptions;
        readonly mcpModuleId: string;
        readonly moduleRef: ModuleRef;
        readonly toolRegistry: McpRegistryService;
        createStatelessServer(req: Request): Promise<{
            server: McpServer;
            transport: StreamableHTTPServerTransport;
        }>;
        handlePostRequest(req: Request, res: Response, body: unknown): Promise<void>;
        handleStatelessRequest(req: Request, res: Response, body: unknown): Promise<void>;
        handleStatefulRequest(req: Request, res: Response, body: unknown): Promise<void>;
        handleGetRequest(req: Request, res: Response): Promise<void>;
        handleDeleteRequest(req: Request, res: Response): Promise<void>;
        isInitializeRequest(body: unknown): boolean;
        cleanupSession(sessionId: string): void;
    };
};
//# sourceMappingURL=streamable-http.controller.factory.d.ts.map