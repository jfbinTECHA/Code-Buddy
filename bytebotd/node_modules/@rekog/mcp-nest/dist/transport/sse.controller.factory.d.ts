import { CanActivate, Logger, Type } from '@nestjs/common';
import { ApplicationConfig, ModuleRef } from '@nestjs/core';
import type { Request, Response } from 'express';
import { McpServer } from '@modelcontextprotocol/sdk/server/mcp.js';
import { SSEServerTransport } from '@modelcontextprotocol/sdk/server/sse.js';
import { McpOptions } from '../interfaces';
import { McpRegistryService } from '../services/mcp-registry.service';
import { SsePingService } from '../services/sse-ping.service';
export declare function createSseController(sseEndpoint: string, messagesEndpoint: string, guards?: Type<CanActivate>[], decorators?: ClassDecorator[]): {
    new (options: McpOptions, mcpModuleId: string, applicationConfig: ApplicationConfig, moduleRef: ModuleRef, toolRegistry: McpRegistryService, pingService: SsePingService): {
        readonly logger: Logger;
        transports: Map<string, SSEServerTransport>;
        mcpServers: Map<string, McpServer>;
        readonly options: McpOptions;
        readonly mcpModuleId: string;
        readonly applicationConfig: ApplicationConfig;
        readonly moduleRef: ModuleRef;
        readonly toolRegistry: McpRegistryService;
        readonly pingService: SsePingService;
        onModuleInit(): void;
        sse(res: Response): Promise<void>;
        messages(req: Request, res: Response, body: unknown): Promise<Response<any, Record<string, any>> | undefined>;
    };
};
//# sourceMappingURL=sse.controller.factory.d.ts.map