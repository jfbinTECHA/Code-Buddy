{"version":3,"file":"stdio.service.js","sourceRoot":"","sources":["../../src/transport/stdio.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA,oEAAoE;AACpE,wEAAiF;AACjF,2CAKwB;AACxB,uCAA2D;AAC3D,8CAA6D;AAC7D,2EAAsE;AACtE,2EAAsE;AACtE,wEAAqE;AAG9D,IAAM,YAAY,oBAAlB,MAAM,YAAY;IAGvB,YACyB,OAAoC,EAClC,WAAoC,EAC5C,SAAoB,EACpB,YAAgC;QAHT,YAAO,GAAP,OAAO,CAAY;QACjB,gBAAW,GAAX,WAAW,CAAQ;QAC5C,cAAS,GAAT,SAAS,CAAW;QACpB,iBAAY,GAAZ,YAAY,CAAoB;QANlC,WAAM,GAAG,IAAI,eAAM,CAAC,cAAY,CAAC,IAAI,CAAC,CAAC;IAOrD,CAAC;IAEJ,KAAK,CAAC,sBAAsB;QAC1B,IAAI,IAAI,CAAC,OAAO,CAAC,SAAS,KAAK,6BAAgB,CAAC,KAAK,EAAE,CAAC;YACtD,OAAO;QACT,CAAC;QACD,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,4BAA4B,CAAC,CAAC;QAG9C,MAAM,YAAY,GAAG,IAAA,2CAAoB,EACvC,IAAI,CAAC,WAAW,EAChB,IAAI,CAAC,YAAY,EACjB,IAAI,CAAC,OAAO,CACb,CAAC;QACF,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,yBAAyB,EAAE,YAAY,CAAC,CAAC;QAG3D,MAAM,SAAS,GAAG,IAAI,kBAAS,CAC7B,EAAE,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,EAC1D;YACE,YAAY;YACZ,YAAY,EAAE,IAAI,CAAC,OAAO,CAAC,YAAY,IAAI,EAAE;SAC9C,CACF,CAAC;QAEF,MAAM,SAAS,GAAG,uBAAgB,CAAC,MAAM,EAAE,CAAC;QAC5C,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,OAAO,CAC3C,yCAAkB,EAClB,SAAS,EACT,EAAE,MAAM,EAAE,KAAK,EAAE,CAClB,CAAC;QAGF,QAAQ,CAAC,uBAAuB,CAAC,SAAS,EAAE,EAAS,CAAC,CAAC;QAEvD,MAAM,SAAS,GAAG,IAAI,+BAAoB,EAAE,CAAC;QAC7C,MAAM,SAAS,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;QAEnC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;IACrC,CAAC;CACF,CAAA;AAhDY,oCAAY;uBAAZ,YAAY;IADxB,IAAA,mBAAU,GAAE;IAKR,WAAA,IAAA,eAAM,EAAC,aAAa,CAAC,CAAA;IACrB,WAAA,IAAA,eAAM,EAAC,eAAe,CAAC,CAAA;qDACI,gBAAS;QACN,yCAAkB;GAPxC,YAAY,CAgDxB","sourcesContent":["import { McpServer } from '@modelcontextprotocol/sdk/server/mcp.js';\nimport { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio.js';\nimport {\n  Inject,\n  Injectable,\n  Logger,\n  OnApplicationBootstrap,\n} from '@nestjs/common';\nimport { ContextIdFactory, ModuleRef } from '@nestjs/core';\nimport { McpOptions, McpTransportType } from '../interfaces';\nimport { McpExecutorService } from '../services/mcp-executor.service';\nimport { McpRegistryService } from '../services/mcp-registry.service';\nimport { buildMcpCapabilities } from '../utils/capabilities-builder';\n\n@Injectable()\nexport class StdioService implements OnApplicationBootstrap {\n  private readonly logger = new Logger(StdioService.name);\n\n  constructor(\n    @Inject('MCP_OPTIONS') private readonly options: McpOptions,\n    @Inject('MCP_MODULE_ID') private readonly mcpModuleId: string,\n    private readonly moduleRef: ModuleRef,\n    private readonly toolRegistry: McpRegistryService,\n  ) {}\n\n  async onApplicationBootstrap() {\n    if (this.options.transport !== McpTransportType.STDIO) {\n      return;\n    }\n    this.logger.log('Bootstrapping MCP STDIO...');\n\n    // Create a new MCP server instance with dynamic capabilities\n    const capabilities = buildMcpCapabilities(\n      this.mcpModuleId,\n      this.toolRegistry,\n      this.options,\n    );\n    this.logger.debug('Built MCP capabilities:', capabilities);\n\n    // Create MCP server with dynamic capabilities\n    const mcpServer = new McpServer(\n      { name: this.options.name, version: this.options.version },\n      {\n        capabilities,\n        instructions: this.options.instructions || '',\n      },\n    );\n\n    const contextId = ContextIdFactory.create();\n    const executor = await this.moduleRef.resolve(\n      McpExecutorService,\n      contextId,\n      { strict: false },\n    );\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n    executor.registerRequestHandlers(mcpServer, {} as any);\n\n    const transport = new StdioServerTransport();\n    await mcpServer.connect(transport);\n\n    this.logger.log('MCP STDIO ready');\n  }\n}\n"]}