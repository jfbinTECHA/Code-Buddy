"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createStreamableHttpController = createStreamableHttpController;
const common_1 = require("@nestjs/common");
const core_1 = require("@nestjs/core");
const crypto_1 = require("crypto");
const mcp_js_1 = require("@modelcontextprotocol/sdk/server/mcp.js");
const streamableHttp_js_1 = require("@modelcontextprotocol/sdk/server/streamableHttp.js");
const mcp_executor_service_1 = require("../services/mcp-executor.service");
const mcp_registry_service_1 = require("../services/mcp-registry.service");
const capabilities_builder_1 = require("../utils/capabilities-builder");
function createStreamableHttpController(endpoint, guards = [], decorators = []) {
    var StreamableHttpController_1;
    let StreamableHttpController = StreamableHttpController_1 = class StreamableHttpController {
        constructor(options, mcpModuleId, moduleRef, toolRegistry) {
            this.options = options;
            this.mcpModuleId = mcpModuleId;
            this.moduleRef = moduleRef;
            this.toolRegistry = toolRegistry;
            this.logger = new common_1.Logger(StreamableHttpController_1.name);
            this.transports = {};
            this.mcpServers = {};
            this.isStatelessMode = false;
            this.isStatelessMode = !!options.streamableHttp?.statelessMode;
        }
        async createStatelessServer(req) {
            const transport = new streamableHttp_js_1.StreamableHTTPServerTransport({
                sessionIdGenerator: undefined,
                enableJsonResponse: this.options.streamableHttp?.enableJsonResponse || false,
            });
            const capabilities = (0, capabilities_builder_1.buildMcpCapabilities)(this.mcpModuleId, this.toolRegistry, this.options);
            this.logger.debug('Built MCP capabilities:', capabilities);
            const server = new mcp_js_1.McpServer({ name: this.options.name, version: this.options.version }, {
                capabilities: capabilities,
                instructions: this.options.instructions || '',
            });
            await server.connect(transport);
            const contextId = core_1.ContextIdFactory.getByRequest(req);
            const executor = await this.moduleRef.resolve(mcp_executor_service_1.McpExecutorService, contextId, { strict: true });
            this.logger.debug('Registering request handlers for stateless MCP server');
            executor.registerRequestHandlers(server, req);
            return { server, transport };
        }
        async handlePostRequest(req, res, body) {
            this.logger.debug('Received MCP request:', body);
            try {
                if (this.isStatelessMode) {
                    return this.handleStatelessRequest(req, res, body);
                }
                else {
                    return this.handleStatefulRequest(req, res, body);
                }
            }
            catch (error) {
                this.logger.error('Error handling MCP request:', error);
                if (!res.headersSent) {
                    res.status(500).json({
                        jsonrpc: '2.0',
                        error: {
                            code: -32603,
                            message: 'Internal server error',
                        },
                        id: null,
                    });
                }
            }
        }
        async handleStatelessRequest(req, res, body) {
            this.logger.debug(`Handling stateless MCP request at ${req.url} with body: ${JSON.stringify(body)}`);
            let server = null;
            let transport = null;
            try {
                const stateless = await this.createStatelessServer(req);
                server = stateless.server;
                transport = stateless.transport;
                await transport.handleRequest(req, res, body);
                res.on('close', () => {
                    this.logger.debug('Stateless request closed, cleaning up');
                    transport?.close();
                    server?.close();
                });
            }
            catch (error) {
                this.logger.error('Error in stateless request handling:', error);
                transport?.close();
                server?.close();
                throw error;
            }
        }
        async handleStatefulRequest(req, res, body) {
            this.logger.debug(`Handling stateful MCP request at ${req.url} with body: ${JSON.stringify(body)}`);
            const sessionId = req.headers['mcp-session-id'];
            let transport;
            if (sessionId && this.transports[sessionId]) {
                transport = this.transports[sessionId];
            }
            else if (!sessionId && this.isInitializeRequest(body)) {
                transport = new streamableHttp_js_1.StreamableHTTPServerTransport({
                    sessionIdGenerator: this.options.streamableHttp?.sessionIdGenerator ||
                        (() => (0, crypto_1.randomUUID)()),
                    enableJsonResponse: this.options.streamableHttp?.enableJsonResponse || false,
                });
                const capabilities = (0, capabilities_builder_1.buildMcpCapabilities)(this.mcpModuleId, this.toolRegistry, this.options);
                this.logger.debug('Built MCP capabilities:', capabilities);
                const mcpServer = new mcp_js_1.McpServer({ name: this.options.name, version: this.options.version }, {
                    capabilities,
                    instructions: this.options.instructions || '',
                });
                await mcpServer.connect(transport);
                await transport.handleRequest(req, res, body);
                if (transport.sessionId) {
                    this.transports[transport.sessionId] = transport;
                    this.mcpServers[transport.sessionId] = mcpServer;
                    transport.onclose = () => {
                        this.cleanupSession(transport.sessionId);
                    };
                }
                this.logger.log(`Initialized new session with ID: ${transport.sessionId}`);
                return;
            }
            else {
                res.status(400).json({
                    jsonrpc: '2.0',
                    error: {
                        code: -32000,
                        message: 'Bad Request: No valid session ID provided',
                    },
                    id: null,
                });
                return;
            }
            const mcpServer = this.mcpServers[sessionId];
            if (!mcpServer) {
                res.status(404).json({
                    jsonrpc: '2.0',
                    error: {
                        code: -32000,
                        message: 'Session not found',
                    },
                    id: null,
                });
                return;
            }
            const contextId = core_1.ContextIdFactory.getByRequest(req);
            const executor = await this.moduleRef.resolve(mcp_executor_service_1.McpExecutorService, contextId, { strict: true });
            executor.registerRequestHandlers(mcpServer, req);
            await transport.handleRequest(req, res, body);
        }
        async handleGetRequest(req, res) {
            if (this.isStatelessMode) {
                res.status(405).json({
                    jsonrpc: '2.0',
                    error: {
                        code: -32000,
                        message: 'Method not allowed in stateless mode',
                    },
                    id: null,
                });
                return;
            }
            const sessionId = req.headers['mcp-session-id'];
            if (!sessionId || !this.transports[sessionId]) {
                res.status(400).send('Invalid or missing session ID');
                return;
            }
            this.logger.debug(`Establishing SSE stream for session ${sessionId}`);
            const transport = this.transports[sessionId];
            await transport.handleRequest(req, res);
        }
        async handleDeleteRequest(req, res) {
            if (this.isStatelessMode) {
                res.status(405).json({
                    jsonrpc: '2.0',
                    error: {
                        code: -32000,
                        message: 'Method not allowed in stateless mode',
                    },
                    id: null,
                });
                return;
            }
            const sessionId = req.headers['mcp-session-id'];
            if (!sessionId || !this.transports[sessionId]) {
                res.status(400).send('Invalid or missing session ID');
                return;
            }
            this.logger.debug(`Terminating session ${sessionId}`);
            const transport = this.transports[sessionId];
            await transport.handleRequest(req, res);
            this.cleanupSession(sessionId);
        }
        isInitializeRequest(body) {
            if (Array.isArray(body)) {
                return body.some((msg) => typeof msg === 'object' &&
                    msg !== null &&
                    'method' in msg &&
                    msg.method === 'initialize');
            }
            return (typeof body === 'object' &&
                body !== null &&
                'method' in body &&
                body.method === 'initialize');
        }
        cleanupSession(sessionId) {
            if (sessionId) {
                this.logger.debug(`Cleaning up session: ${sessionId}`);
                delete this.transports[sessionId];
                delete this.mcpServers[sessionId];
            }
        }
    };
    __decorate([
        (0, common_1.Post)(endpoint),
        (0, common_1.UseGuards)(...guards),
        __param(0, (0, common_1.Req)()),
        __param(1, (0, common_1.Res)()),
        __param(2, (0, common_1.Body)()),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object, Object, Object]),
        __metadata("design:returntype", Promise)
    ], StreamableHttpController.prototype, "handlePostRequest", null);
    __decorate([
        (0, common_1.Get)(endpoint),
        (0, common_1.UseGuards)(...guards),
        __param(0, (0, common_1.Req)()),
        __param(1, (0, common_1.Res)()),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object, Object]),
        __metadata("design:returntype", Promise)
    ], StreamableHttpController.prototype, "handleGetRequest", null);
    __decorate([
        (0, common_1.Delete)(endpoint),
        (0, common_1.UseGuards)(...guards),
        __param(0, (0, common_1.Req)()),
        __param(1, (0, common_1.Res)()),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object, Object]),
        __metadata("design:returntype", Promise)
    ], StreamableHttpController.prototype, "handleDeleteRequest", null);
    StreamableHttpController = StreamableHttpController_1 = __decorate([
        (0, common_1.Controller)(),
        (0, common_1.applyDecorators)(...decorators),
        __param(0, (0, common_1.Inject)('MCP_OPTIONS')),
        __param(1, (0, common_1.Inject)('MCP_MODULE_ID')),
        __metadata("design:paramtypes", [Object, String, core_1.ModuleRef,
            mcp_registry_service_1.McpRegistryService])
    ], StreamableHttpController);
    return StreamableHttpController;
}
//# sourceMappingURL=streamable-http.controller.factory.js.map